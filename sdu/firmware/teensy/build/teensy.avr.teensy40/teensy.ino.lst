
/Users/kojihirai/Library/Caches/arduino/sketches/F6C9830418E9C76FEF2389F507DD9F10/teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ec0 	.word	0x20000ec0
6000142c:	20002c20 	.word	0x20002c20

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f916 	bl	60001670 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b4 	bl	60001680 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f920 	bl	60001790 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 faa9 	bl	60001ab8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fa54 	bl	60001a58 <analog_init>
	pwm_init();
600015b0:	f000 fa86 	bl	60001ac0 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f91a 	bl	600017ec <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f85c 	bl	60001674 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9ab 	bl	6000191c <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f855 	bl	6000167c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f851 	bl	60001678 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa77 	bl	60001ac8 <____libc_init_array_veneer>
	main();
600015da:	f000 fa81 	bl	60001ae0 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00002da8 	.word	0x00002da8
600015ec:	60001c00 	.word	0x60001c00
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ec0 	.word	0x20000ec0
600015f8:	600049ac 	.word	0x600049ac
600015fc:	20000000 	.word	0x20000000
60001600:	20000c00 	.word	0x20000c00
60001604:	00001065 	.word	0x00001065
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	000021ad 	.word	0x000021ad
60001618:	20002bc4 	.word	0x20002bc4
6000161c:	000021b1 	.word	0x000021b1
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20002bc8 	.word	0x20002bc8
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001670:	4770      	bx	lr
60001672:	bf00      	nop

60001674 <startup_default_middle_hook>:
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_late_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000167c:	bf00      	nop
6000167e:	4770      	bx	lr

60001680 <configure_cache>:
{
60001680:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001686:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001688:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168a:	4831      	ldr	r0, [pc, #196]	; (60001750 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000168c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001690:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001694:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001696:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169a:	482e      	ldr	r0, [pc, #184]	; (60001754 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000169c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016a6:	482c      	ldr	r0, [pc, #176]	; (60001758 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ac:	4a2b      	ldr	r2, [pc, #172]	; (6000175c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b2:	4c2b      	ldr	r4, [pc, #172]	; (60001760 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016b8:	482a      	ldr	r0, [pc, #168]	; (60001764 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c2:	4c29      	ldr	r4, [pc, #164]	; (60001768 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c4:	4829      	ldr	r0, [pc, #164]	; (6000176c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016ce:	4c28      	ldr	r4, [pc, #160]	; (60001770 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d4:	4827      	ldr	r0, [pc, #156]	; (60001774 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016d6:	4a28      	ldr	r2, [pc, #160]	; (60001778 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016e8:	4c24      	ldr	r4, [pc, #144]	; (6000177c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016f6:	4a23      	ldr	r2, [pc, #140]	; (60001784 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016fc:	4c22      	ldr	r4, [pc, #136]	; (60001788 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001702:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001706:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170a:	4820      	ldr	r0, [pc, #128]	; (6000178c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000170c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001710:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001712:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001716:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171a:	bf00      	nop
	asm("nop");
6000171c:	bf00      	nop
	asm("nop");
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001724:	2201      	movs	r2, #1
60001726:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001732:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001736:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001742:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001746:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000174e:	4770      	bx	lr
60001750:	1000003f 	.word	0x1000003f
60001754:	07080025 	.word	0x07080025
60001758:	00100009 	.word	0x00100009
6000175c:	20002c20 	.word	0x20002c20
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	60000018 	.word	0x60000018
60001784:	070b002f 	.word	0x070b002f
60001788:	70000019 	.word	0x70000019
6000178c:	8000001a 	.word	0x8000001a

60001790 <usb_pll_start>:
{
60001790:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001792:	4a15      	ldr	r2, [pc, #84]	; (600017e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001794:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000179a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000179e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017ac:	f013 0f02 	tst.w	r3, #2
600017b0:	d10e      	bne.n	600017d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017b6:	d00f      	beq.n	600017d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017bc:	d00e      	beq.n	600017dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017be:	2b00      	cmp	r3, #0
600017c0:	daf3      	bge.n	600017aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017c6:	d10b      	bne.n	600017e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017c8:	065b      	lsls	r3, r3, #25
600017ca:	d50b      	bpl.n	600017e4 <usb_pll_start+0x54>
}
600017cc:	bcf0      	pop	{r4, r5, r6, r7}
600017ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017d4:	6190      	str	r0, [r2, #24]
			continue;
600017d6:	e7e8      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017d8:	6155      	str	r5, [r2, #20]
			continue;
600017da:	e7e6      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017dc:	6156      	str	r6, [r2, #20]
			continue;
600017de:	e7e4      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017e0:	6191      	str	r1, [r2, #24]
			continue;
600017e2:	e7e2      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e4:	6157      	str	r7, [r2, #20]
			continue;
600017e6:	e7e0      	b.n	600017aa <usb_pll_start+0x1a>
600017e8:	400d8000 	.word	0x400d8000

600017ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017ec:	4a3f      	ldr	r2, [pc, #252]	; (600018ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017f0:	493f      	ldr	r1, [pc, #252]	; (600018f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600017f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600018f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001802:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600018f8 <tempmon_init+0x10c>
{
6000180a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001810:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001814:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001818:	4d38      	ldr	r5, [pc, #224]	; (600018fc <tempmon_init+0x110>)
6000181a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	4c38      	ldr	r4, [pc, #224]	; (60001900 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000181e:	4839      	ldr	r0, [pc, #228]	; (60001904 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001820:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001822:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001826:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001828:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001830:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001834:	ee07 1a10 	vmov	s14, r1
60001838:	4b33      	ldr	r3, [pc, #204]	; (60001908 <tempmon_init+0x11c>)
6000183a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000183e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001840:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	4931      	ldr	r1, [pc, #196]	; (6000190c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001846:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000184a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000184e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001852:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001856:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000186e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001872:	4827      	ldr	r0, [pc, #156]	; (60001910 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001874:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001878:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001880:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001884:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001888:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001890:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000189c:	ee16 3a10 	vmov	r3, s12
600018a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018c0:	4914      	ldr	r1, [pc, #80]	; (60001914 <tempmon_init+0x128>)
600018c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018ca:	f043 0302 	orr.w	r3, r3, #2
600018ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018d2:	4b11      	ldr	r3, [pc, #68]	; (60001918 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018e0:	2201      	movs	r2, #1
}
600018e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600018e8:	4770      	bx	lr
600018ea:	bf00      	nop
600018ec:	400d8100 	.word	0x400d8100
600018f0:	401f4400 	.word	0x401f4400
600018f4:	42aa0000 	.word	0x42aa0000
600018f8:	42b40000 	.word	0x42b40000
600018fc:	20002bb4 	.word	0x20002bb4
60001900:	20002bb0 	.word	0x20002bb0
60001904:	20002bb8 	.word	0x20002bb8
60001908:	20002bbc 	.word	0x20002bbc
6000190c:	0fff0000 	.word	0x0fff0000
60001910:	e000e400 	.word	0xe000e400
60001914:	20000c00 	.word	0x20000c00
60001918:	00001225 	.word	0x00001225

6000191c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000191c:	4b31      	ldr	r3, [pc, #196]	; (600019e4 <usb_init+0xc8>)
6000191e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001922:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001928:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000192c:	f000 f8d4 	bl	60001ad8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001930:	4a2d      	ldr	r2, [pc, #180]	; (600019e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001932:	492e      	ldr	r1, [pc, #184]	; (600019ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001938:	482d      	ldr	r0, [pc, #180]	; (600019f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000193a:	f043 0303 	orr.w	r3, r3, #3
6000193e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001942:	4b2c      	ldr	r3, [pc, #176]	; (600019f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001944:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001948:	6802      	ldr	r2, [r0, #0]
6000194a:	421a      	tst	r2, r3
6000194c:	d103      	bne.n	60001956 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000194e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001952:	079a      	lsls	r2, r3, #30
60001954:	d01b      	beq.n	6000198e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001956:	4a25      	ldr	r2, [pc, #148]	; (600019ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000195c:	4b24      	ldr	r3, [pc, #144]	; (600019f0 <usb_init+0xd4>)
6000195e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001960:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001964:	f043 0302 	orr.w	r3, r3, #2
60001968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000196c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001970:	079b      	lsls	r3, r3, #30
60001972:	d4fb      	bmi.n	6000196c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001974:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001978:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000197c:	4b1c      	ldr	r3, [pc, #112]	; (600019f0 <usb_init+0xd4>)
6000197e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001982:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001986:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001988:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000198a:	f000 f8ad 	bl	60001ae8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000198e:	4a18      	ldr	r2, [pc, #96]	; (600019f0 <usb_init+0xd4>)
60001990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001994:	4c15      	ldr	r4, [pc, #84]	; (600019ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001996:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001998:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000199a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000199c:	4b16      	ldr	r3, [pc, #88]	; (600019f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000199e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a8:	4618      	mov	r0, r3
600019aa:	f000 f891 	bl	60001ad0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019c2:	641a      	str	r2, [r3, #64]	; 0x40
600019c4:	4b0d      	ldr	r3, [pc, #52]	; (600019fc <usb_init+0xe0>)
600019c6:	4a0e      	ldr	r2, [pc, #56]	; (60001a00 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019e2:	bd10      	pop	{r4, pc}
600019e4:	400d8000 	.word	0x400d8000
600019e8:	400fc000 	.word	0x400fc000
600019ec:	402e0000 	.word	0x402e0000
600019f0:	400d9000 	.word	0x400d9000
600019f4:	001e1c00 	.word	0x001e1c00
600019f8:	20000000 	.word	0x20000000
600019fc:	20000c00 	.word	0x20000c00
60001a00:	0000140d 	.word	0x0000140d

60001a04 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a04:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a06:	4b0e      	ldr	r3, [pc, #56]	; (60001a40 <_reboot_Teensyduino_+0x3c>)
60001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a0a:	079b      	lsls	r3, r3, #30
60001a0c:	d400      	bmi.n	60001a10 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a0e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a10:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a12:	4b0c      	ldr	r3, [pc, #48]	; (60001a44 <_reboot_Teensyduino_+0x40>)
60001a14:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a20:	490a      	ldr	r1, [pc, #40]	; (60001a4c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a22:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a26:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a28:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a2a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a32:	4807      	ldr	r0, [pc, #28]	; (60001a50 <_reboot_Teensyduino_+0x4c>)
60001a34:	4a07      	ldr	r2, [pc, #28]	; (60001a54 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a36:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a38:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a3a:	689b      	ldr	r3, [r3, #8]
60001a3c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a3e:	bf00      	nop
60001a40:	401f4400 	.word	0x401f4400
60001a44:	402e0000 	.word	0x402e0000
60001a48:	400ac000 	.word	0x400ac000
60001a4c:	00200003 	.word	0x00200003
60001a50:	20208000 	.word	0x20208000
60001a54:	eb120000 	.word	0xeb120000

60001a58 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a58:	4b10      	ldr	r3, [pc, #64]	; (60001a9c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a5a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a5c:	4a10      	ldr	r2, [pc, #64]	; (60001aa0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a60:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001a64:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a66:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a68:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a6e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001a72:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a74:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a76:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a78:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a7a:	061b      	lsls	r3, r3, #24
60001a7c:	d4fc      	bmi.n	60001a78 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a7e:	4a09      	ldr	r2, [pc, #36]	; (60001aa4 <analog_init+0x4c>)
60001a80:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a84:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a86:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a88:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001a90:	d1fb      	bne.n	60001a8a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001a92:	4a05      	ldr	r2, [pc, #20]	; (60001aa8 <analog_init+0x50>)
60001a94:	7013      	strb	r3, [r2, #0]
}
60001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
60001a9a:	4770      	bx	lr
60001a9c:	400fc000 	.word	0x400fc000
60001aa0:	400c4000 	.word	0x400c4000
60001aa4:	400c8000 	.word	0x400c8000
60001aa8:	20002bef 	.word	0x20002bef

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <__set_arm_clock_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__set_arm_clock_veneer+0x4>
60001abc:	00000b49 	.word	0x00000b49

60001ac0 <__pwm_init_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__pwm_init_veneer+0x4>
60001ac4:	00000f71 	.word	0x00000f71

60001ac8 <____libc_init_array_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <____libc_init_array_veneer+0x4>
60001acc:	00002a01 	.word	0x00002a01

60001ad0 <__memset_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__memset_veneer+0x4>
60001ad4:	00002921 	.word	0x00002921

60001ad8 <__usb_init_serialnumber_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__usb_init_serialnumber_veneer+0x4>
60001adc:	00001b7d 	.word	0x00001b7d

60001ae0 <__main_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__main_veneer+0x4>
60001ae4:	00000ee1 	.word	0x00000ee1

60001ae8 <__delay_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__delay_veneer+0x4>
60001aec:	00000e39 	.word	0x00000e39

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000045 0000037d                       E...}...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ec0 	.word	0x20000ec0
      3c:	20000ec0 	.word	0x20000ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20002390 	.word	0x20002390
      64:	60006800 	.word	0x60006800

00000068 <dma1_isr()>:
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
      68:	4803      	ldr	r0, [pc, #12]	; (78 <dma1_isr()+0x10>)
volatile int bufferIndex = 0;
volatile bool newData = false;

void dma1_isr() {
  dma1.clearInterrupt();
  newData = true;
      6a:	2201      	movs	r2, #1
      6c:	4903      	ldr	r1, [pc, #12]	; (7c <dma1_isr()+0x14>)
      6e:	4b04      	ldr	r3, [pc, #16]	; (80 <dma1_isr()+0x18>)
      70:	7900      	ldrb	r0, [r0, #4]
      72:	77c8      	strb	r0, [r1, #31]
      74:	701a      	strb	r2, [r3, #0]
}
      76:	4770      	bx	lr
      78:	200013c4 	.word	0x200013c4
      7c:	400e8000 	.word	0x400e8000
      80:	20002bf0 	.word	0x20002bf0

00000084 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
      84:	b510      	push	{r4, lr}
      86:	4604      	mov	r4, r0
		release();
      88:	f000 fd44 	bl	b14 <DMAChannel::release()>
	}
      8c:	4620      	mov	r0, r4
      8e:	bd10      	pop	{r4, pc}

00000090 <setup>:
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!(ch & 0x80)) {
      94:	4d78      	ldr	r5, [pc, #480]	; (278 <setup+0x1e8>)
      96:	b083      	sub	sp, #12
	if (pin > sizeof(pin_to_channel)) return 0;
      98:	4c78      	ldr	r4, [pc, #480]	; (27c <setup+0x1ec>)
}
      9a:	f240 28ee 	movw	r8, #750	; 0x2ee
      9e:	4e78      	ldr	r6, [pc, #480]	; (280 <setup+0x1f0>)
      a0:	f8df a208 	ldr.w	sl, [pc, #520]	; 2ac <setup+0x21c>
      a4:	682f      	ldr	r7, [r5, #0]
      a6:	f001 fff3 	bl	2090 <yield>
      aa:	7823      	ldrb	r3, [r4, #0]
      ac:	2b00      	cmp	r3, #0
      ae:	f000 80d5 	beq.w	25c <setup+0x1cc>
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	7833      	ldrb	r3, [r6, #0]
      b4:	07da      	lsls	r2, r3, #31
      b6:	f140 80d1 	bpl.w	25c <setup+0x1cc>
      ba:	682b      	ldr	r3, [r5, #0]
      bc:	f8da 2000 	ldr.w	r2, [sl]
      c0:	1a9b      	subs	r3, r3, r2
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	2b0e      	cmp	r3, #14
      c4:	f240 80ca 	bls.w	25c <setup+0x1cc>
      c8:	4f6e      	ldr	r7, [pc, #440]	; (284 <setup+0x1f4>)
      ca:	2100      	movs	r1, #0
      cc:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 2b0 <setup+0x220>
}
      d0:	683b      	ldr	r3, [r7, #0]
	while (newdiv > 65535 && prescale < 7) {
      d2:	6f18      	ldr	r0, [r3, #112]	; 0x70
      d4:	f000 fc40 	bl	958 <ADC_Module::setAveraging(unsigned char)>
      d8:	683b      	ldr	r3, [r7, #0]
      da:	210c      	movs	r1, #12

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
      dc:	6f18      	ldr	r0, [r3, #112]	; 0x70
      de:	f000 fb7f 	bl	7e0 <ADC_Module::setResolution(unsigned char)>
    IMXRT_TMR4.CH[QTIMER4_INDEX].CMPLD1 = 0;
    IMXRT_TMR4.CH[QTIMER4_INDEX].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
                                        TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);

    quadtimerFrequency(&IMXRT_TMR4, QTIMER4_INDEX, freq);
    quadtimerWrite(&IMXRT_TMR4, QTIMER4_INDEX, 5);
      e2:	683b      	ldr	r3, [r7, #0]
      e4:	2102      	movs	r1, #2
}
      e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
      e8:	f000 f9b6 	bl	458 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
      ec:	683b      	ldr	r3, [r7, #0]
    quadtimerWrite(&IMXRT_TMR4, QTIMER4_INDEX, 5);
      ee:	4f66      	ldr	r7, [pc, #408]	; (288 <setup+0x1f8>)
      f0:	2107      	movs	r1, #7
        IMXRT_ADC_ETC.CTRL &= ~(ADC_ETC_CTRL_TSC_BYPASS);                                                       // 0x40000001;  // start with trigger 0
      f2:	6f18      	ldr	r0, [r3, #112]	; 0x70
        IMXRT_ADC_ETC.CTRL |= ADC_ETC_CTRL_DMA_MODE_SEL | ADC_ETC_CTRL_TRIG_ENABLE(1 << ADC_ETC_TRIGGER_INDEX); // Add trigger
      f4:	f000 fadc 	bl	6b0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
            | ADC_ETC_TRIG_CHAIN_HWTS0(1) | ADC_ETC_TRIG_CHAIN_CSEL0(adc_pin_channel);
      f8:	683b      	ldr	r3, [r7, #0]
      fa:	2200      	movs	r2, #0
        IMXRT_ADC_ETC.CTRL &= ~(ADC_ETC_CTRL_TSC_BYPASS);                                                       // 0x40000001;  // start with trigger 0
      fc:	4863      	ldr	r0, [pc, #396]	; (28c <setup+0x1fc>)
      fe:	f04f 0101 	mov.w	r1, #1
     102:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
        IMXRT_ADC_ETC.CTRL |= ADC_ETC_CTRL_DMA_MODE_SEL | ADC_ETC_CTRL_TRIG_ENABLE(1 << ADC_ETC_TRIGGER_INDEX); // Add trigger
     106:	6018      	str	r0, [r3, #0]
     108:	2002      	movs	r0, #2
     10a:	809a      	strh	r2, [r3, #4]
     10c:	7199      	strb	r1, [r3, #6]
        IMXRT_ADC_ETC.TRIG[ADC_ETC_TRIGGER_INDEX].CTRL = ADC_ETC_TRIG_CTRL_TRIG_CHAIN(0);                       // chainlength -1 only us
     10e:	f897 b004 	ldrb.w	fp, [r7, #4]
        IMXRT_ADC_ETC.CTRL |= ADC_ETC_CTRL_DMA_MODE_SEL | ADC_ETC_CTRL_TRIG_ENABLE(1 << ADC_ETC_TRIGGER_INDEX); // Add trigger
     112:	495f      	ldr	r1, [pc, #380]	; (290 <setup+0x200>)
        IMXRT_ADC_ETC.TRIG[ADC_ETC_TRIGGER_INDEX].CTRL = ADC_ETC_TRIG_CTRL_TRIG_CHAIN(0);                       // chainlength -1 only us
     114:	f8df c19c 	ldr.w	ip, [pc, #412]	; 2b4 <setup+0x224>
        IMXRT_ADC_ETC.CTRL |= ADC_ETC_CTRL_DMA_MODE_SEL | ADC_ETC_CTRL_TRIG_ENABLE(1 << ADC_ETC_TRIGGER_INDEX); // Add trigger
     118:	fa0f f88b 	sxth.w	r8, fp
     11c:	6199      	str	r1, [r3, #24]
     11e:	495d      	ldr	r1, [pc, #372]	; (294 <setup+0x204>)
            | ADC_ETC_TRIG_CHAIN_HWTS0(1) | ADC_ETC_TRIG_CHAIN_CSEL0(adc_pin_channel);
     120:	f8c3 9010 	str.w	r9, [r3, #16]
     124:	60da      	str	r2, [r3, #12]
        IMXRT_ADC_ETC.TRIG[ADC_ETC_TRIGGER_INDEX].CTRL = ADC_ETC_TRIG_CTRL_TRIG_CHAIN(0);                       // chainlength -1 only us
     126:	f8a3 e01e 	strh.w	lr, [r3, #30]
        IMXRT_ADC_ETC.TRIG[ADC_ETC_TRIGGER_INDEX].CHAIN_1_0 =
     12a:	71d8      	strb	r0, [r3, #7]
        if (adc_regs.GC & ADC_GC_DMAEN)
     12c:	f8a3 e016 	strh.w	lr, [r3, #22]
     130:	8298      	strh	r0, [r3, #20]
     132:	6098      	str	r0, [r3, #8]
            IMXRT_ADC_ETC.DMA_CTRL |= ADC_ETC_DMA_CTRL_TRIQ_ENABLE(ADC_ETC_TRIGGER_INDEX);
     134:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
     138:	f84c 1028 	str.w	r1, [ip, r8, lsl #2]
     13c:	4956      	ldr	r1, [pc, #344]	; (298 <setup+0x208>)
     13e:	f897 8004 	ldrb.w	r8, [r7, #4]
     142:	2701      	movs	r7, #1
     144:	eb01 1158 	add.w	r1, r1, r8, lsr #5

    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        __disable_irq();
        reg &= ~flag;
     148:	f008 091f 	and.w	r9, r8, #31
     14c:	f108 0810 	add.w	r8, r8, #16
        __enable_irq();
     150:	4081      	lsls	r1, r0
        delay(5); // give some time to be sure it is init
     152:	fa07 f909 	lsl.w	r9, r7, r9
     156:	4f51      	ldr	r7, [pc, #324]	; (29c <setup+0x20c>)
     158:	9101      	str	r1, [sp, #4]
     15a:	4951      	ldr	r1, [pc, #324]	; (2a0 <setup+0x210>)
     15c:	f847 1028 	str.w	r1, [r7, r8, lsl #2]
     160:	f04f 0701 	mov.w	r7, #1
     164:	9901      	ldr	r1, [sp, #4]
     166:	f8df 8150 	ldr.w	r8, [pc, #336]	; 2b8 <setup+0x228>
        __disable_irq();
        //digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN) );
        adc0->saveConfig(&old_adc0_config);
        __enable_irq();
    }
    ADC_Module::ADC_Config old_adc1_config = {};
     16a:	f8c1 9000 	str.w	r9, [r1]
    ADC_Module::ADC_Config old_adc0_config = {};
     16e:	8b99      	ldrh	r1, [r3, #28]
     170:	f8df 9148 	ldr.w	r9, [pc, #328]	; 2bc <setup+0x22c>
     174:	b289      	uxth	r1, r1
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
     176:	4301      	orrs	r1, r0
     178:	8399      	strh	r1, [r3, #28]
     17a:	4b4a      	ldr	r3, [pc, #296]	; (2a4 <setup+0x214>)
     17c:	f883 b01b 	strb.w	fp, [r3, #27]
     180:	f5a3 330f 	sub.w	r3, r3, #146432	; 0x23c00
     184:	f8d8 1000 	ldr.w	r1, [r8]
     188:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
     18c:	f8df b130 	ldr.w	fp, [pc, #304]	; 2c0 <setup+0x230>
     190:	808a      	strh	r2, [r1, #4]
     192:	600b      	str	r3, [r1, #0]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     194:	4b3e      	ldr	r3, [pc, #248]	; (290 <setup+0x200>)
     196:	60ca      	str	r2, [r1, #12]
     198:	f8c1 9010 	str.w	r9, [r1, #16]
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     19c:	71c8      	strb	r0, [r1, #7]
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     19e:	8288      	strh	r0, [r1, #20]
     1a0:	718f      	strb	r7, [r1, #6]
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a2:	6088      	str	r0, [r1, #8]
     1a4:	618b      	str	r3, [r1, #24]
	n = __builtin_bswap32(n);
     1a6:	f898 8004 	ldrb.w	r8, [r8, #4]
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1aa:	4b3a      	ldr	r3, [pc, #232]	; (294 <setup+0x204>)
     1ac:	fa0f f988 	sxth.w	r9, r8
	if (priority(ch3) < priority(ch4)) swap(ch3, ch4);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
     1b0:	f8a1 e01e 	strh.w	lr, [r1, #30]
	c1.channel = c2.channel;
     1b4:	f8a1 e016 	strh.w	lr, [r1, #22]
	c1.TCD = c2.TCD;
     1b8:	2114      	movs	r1, #20
	t = c1.TCD;
     1ba:	f84c 2029 	str.w	r2, [ip, r9, lsl #2]
	c2.TCD = t;
     1be:	f84c 3029 	str.w	r3, [ip, r9, lsl #2]
}
     1c2:	4b38      	ldr	r3, [pc, #224]	; (2a4 <setup+0x214>)
     1c4:	f883 801b 	strb.w	r8, [r3, #27]
     1c8:	f5a3 330f 	sub.w	r3, r3, #146432	; 0x23c00
		TCD->SADDR = &p;
     1cc:	f8db 8000 	ldr.w	r8, [fp]
     1d0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
		TCD->SOFF = 0;
     1d4:	f8a8 2004 	strh.w	r2, [r8, #4]
		TCD->SADDR = &p;
     1d8:	f8c8 3000 	str.w	r3, [r8]
		TCD->DLASTSGA = -len;
     1dc:	4b2c      	ldr	r3, [pc, #176]	; (290 <setup+0x200>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     1de:	f89b 9004 	ldrb.w	r9, [fp, #4]
		TCD->ATTR_DST = 1;
     1e2:	f888 7006 	strb.w	r7, [r8, #6]
		TCD->DLASTSGA = -len;
     1e6:	f8c8 3018 	str.w	r3, [r8, #24]
		TCD->ATTR_SRC = 2;
     1ea:	f888 0007 	strb.w	r0, [r8, #7]
		TCD->DOFF = 2;
     1ee:	f8a8 0014 	strh.w	r0, [r8, #20]
		TCD->NBYTES = 2;
     1f2:	f8c8 0008 	str.w	r0, [r8, #8]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     1f6:	fa0f f089 	sxth.w	r0, r9
		TCD->DADDR = p;
     1fa:	4f2b      	ldr	r7, [pc, #172]	; (2a8 <setup+0x218>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     1fc:	4b25      	ldr	r3, [pc, #148]	; (294 <setup+0x204>)
		TCD->DADDR = p;
     1fe:	f8c8 7010 	str.w	r7, [r8, #16]
		TCD->SLAST = 0;
     202:	f8c8 200c 	str.w	r2, [r8, #12]
		TCD->BITER = len / 2;
     206:	f8a8 e01e 	strh.w	lr, [r8, #30]
		TCD->CITER = len / 2;
     20a:	f8a8 e016 	strh.w	lr, [r8, #22]
		*mux = 0;
     20e:	f84c 2020 	str.w	r2, [ip, r0, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     212:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     216:	4b23      	ldr	r3, [pc, #140]	; (2a4 <setup+0x214>)
  dma3.destinationBuffer(linearBuffer, sizeof(linearBuffer));
  dma3.triggerAtHardwareEvent(DMAMUX_SOURCE_ADC1);
  dma3.enable();
  
  // Start continuous ADC conversions
  adc->adc1->startContinuous(DRILL_CURRENT_PIN);  // Changed from adc0 to adc1
     218:	4f1a      	ldr	r7, [pc, #104]	; (284 <setup+0x1f4>)
     21a:	f883 901b 	strb.w	r9, [r3, #27]
     21e:	683b      	ldr	r3, [r7, #0]
     220:	6f18      	ldr	r0, [r3, #112]	; 0x70
     222:	f000 fbed 	bl	a00 <ADC_Module::startContinuous(unsigned char)>
  adc->adc1->startContinuous(POWER_CURRENT_PIN);
     226:	683b      	ldr	r3, [r7, #0]
     228:	2115      	movs	r1, #21
     22a:	6f18      	ldr	r0, [r3, #112]	; 0x70
     22c:	f000 fbe8 	bl	a00 <ADC_Module::startContinuous(unsigned char)>
  adc->adc1->startContinuous(LINEAR_CURRENT_PIN);
     230:	683b      	ldr	r3, [r7, #0]
     232:	2116      	movs	r1, #22
     234:	6f18      	ldr	r0, [r3, #112]	; 0x70
     236:	f000 fbe3 	bl	a00 <ADC_Module::startContinuous(unsigned char)>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     23a:	f001 ff29 	bl	2090 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     23e:	7823      	ldrb	r3, [r4, #0]
     240:	2b00      	cmp	r3, #0
     242:	d0fa      	beq.n	23a <setup+0x1aa>
     244:	7833      	ldrb	r3, [r6, #0]
     246:	07db      	lsls	r3, r3, #31
     248:	d5f7      	bpl.n	23a <setup+0x1aa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     24a:	682b      	ldr	r3, [r5, #0]
     24c:	f8da 2000 	ldr.w	r2, [sl]
     250:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     252:	2b0e      	cmp	r3, #14
     254:	d9f1      	bls.n	23a <setup+0x1aa>
  
  while (!Serial);
}
     256:	b003      	add	sp, #12
     258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     25c:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     25e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     260:	1bdb      	subs	r3, r3, r7
			if (usb_configuration) {
     262:	b132      	cbz	r2, 272 <setup+0x1e2>
				if (elapsed > 2000) break;
     264:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     268:	f63f af2e 	bhi.w	c8 <setup+0x38>
			yield();
     26c:	f001 ff10 	bl	2090 <yield>
     270:	e719      	b.n	a6 <setup+0x16>
				if (elapsed > 750) break;
     272:	4543      	cmp	r3, r8
     274:	d9fa      	bls.n	26c <setup+0x1dc>
     276:	e727      	b.n	c8 <setup+0x38>
     278:	20002bc8 	.word	0x20002bc8
     27c:	20002bf8 	.word	0x20002bf8
     280:	20002bf7 	.word	0x20002bf7
     284:	200013bc 	.word	0x200013bc
     288:	200013c4 	.word	0x200013c4
     28c:	400c4024 	.word	0x400c4024
     290:	fffff830 	.word	0xfffff830
     294:	80000018 	.word	0x80000018
     298:	38003840 	.word	0x38003840
     29c:	20000c00 	.word	0x20000c00
     2a0:	00000069 	.word	0x00000069
     2a4:	400e8000 	.word	0x400e8000
     2a8:	20001bc0 	.word	0x20001bc0
     2ac:	20002bd8 	.word	0x20002bd8
     2b0:	200013dc 	.word	0x200013dc
     2b4:	400ec000 	.word	0x400ec000
     2b8:	200013cc 	.word	0x200013cc
     2bc:	200023a8 	.word	0x200023a8
     2c0:	200013d4 	.word	0x200013d4

000002c4 <loop>:

void loop() {
     2c4:	b530      	push	{r4, r5, lr}
  if (newData) {
     2c6:	4d26      	ldr	r5, [pc, #152]	; (360 <loop+0x9c>)
void loop() {
     2c8:	b085      	sub	sp, #20
  if (newData) {
     2ca:	782b      	ldrb	r3, [r5, #0]
     2cc:	b90b      	cbnz	r3, 2d2 <loop+0xe>
    if (bufferIndex >= BUFFER_SIZE) {
      bufferIndex = 0;
    }
    newData = false;
  }
     2ce:	b005      	add	sp, #20
     2d0:	bd30      	pop	{r4, r5, pc}
    uint16_t rawDrill = drillBuffer[bufferIndex];
     2d2:	4c24      	ldr	r4, [pc, #144]	; (364 <loop+0xa0>)
     2d4:	4924      	ldr	r1, [pc, #144]	; (368 <loop+0xa4>)
     2d6:	6820      	ldr	r0, [r4, #0]
    float currDrill = rawDrill * DRILL_TO_AMP;
     2d8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 36c <loop+0xa8>
     2dc:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    uint16_t rawPower = powerBuffer[bufferIndex];
     2e0:	4a23      	ldr	r2, [pc, #140]	; (370 <loop+0xac>)
    float currDrill = rawDrill * DRILL_TO_AMP;
     2e2:	ee07 1a90 	vmov	s15, r1
    uint16_t rawPower = powerBuffer[bufferIndex];
     2e6:	6820      	ldr	r0, [r4, #0]
    uint16_t rawLinear = linearBuffer[bufferIndex];
     2e8:	4b22      	ldr	r3, [pc, #136]	; (374 <loop+0xb0>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2ea:	2104      	movs	r1, #4
    float currDrill = rawDrill * DRILL_TO_AMP;
     2ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    uint16_t rawPower = powerBuffer[bufferIndex];
     2f0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    float currLinear = rawLinear * LINEAR_TO_AMP;
     2f4:	eddf 6a20 	vldr	s13, [pc, #128]	; 378 <loop+0xb4>
     2f8:	eb0d 0001 	add.w	r0, sp, r1
    float currDrill = rawDrill * DRILL_TO_AMP;
     2fc:	ee67 7a87 	vmul.f32	s15, s15, s14
     300:	edcd 7a01 	vstr	s15, [sp, #4]
    uint16_t rawPower = powerBuffer[bufferIndex];
     304:	ee07 2a90 	vmov	s15, r2
    uint16_t rawLinear = linearBuffer[bufferIndex];
     308:	6822      	ldr	r2, [r4, #0]
    float currPower = rawPower * POWER_TO_AMP;
     30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    uint16_t rawLinear = linearBuffer[bufferIndex];
     30e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    float currPower = rawPower * POWER_TO_AMP;
     312:	ee67 7a87 	vmul.f32	s15, s15, s14
     316:	edcd 7a02 	vstr	s15, [sp, #8]
    uint16_t rawLinear = linearBuffer[bufferIndex];
     31a:	ee07 3a90 	vmov	s15, r3
    float currLinear = rawLinear * LINEAR_TO_AMP;
     31e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     322:	ee67 7aa6 	vmul.f32	s15, s15, s13
     326:	edcd 7a03 	vstr	s15, [sp, #12]
     32a:	f001 fea5 	bl	2078 <usb_serial_write>
     32e:	2104      	movs	r1, #4
     330:	a802      	add	r0, sp, #8
     332:	f001 fea1 	bl	2078 <usb_serial_write>
     336:	2104      	movs	r1, #4
     338:	a803      	add	r0, sp, #12
     33a:	f001 fe9d 	bl	2078 <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     33e:	200a      	movs	r0, #10
     340:	f001 fe84 	bl	204c <usb_serial_putchar>
    bufferIndex++;
     344:	6823      	ldr	r3, [r4, #0]
     346:	3301      	adds	r3, #1
     348:	6023      	str	r3, [r4, #0]
    if (bufferIndex >= BUFFER_SIZE) {
     34a:	6823      	ldr	r3, [r4, #0]
     34c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     350:	db01      	blt.n	356 <loop+0x92>
      bufferIndex = 0;
     352:	2300      	movs	r3, #0
     354:	6023      	str	r3, [r4, #0]
    newData = false;
     356:	2300      	movs	r3, #0
     358:	702b      	strb	r3, [r5, #0]
     35a:	b005      	add	sp, #20
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	bf00      	nop
     360:	20002bf0 	.word	0x20002bf0
     364:	200013c0 	.word	0x200013c0
     368:	200013dc 	.word	0x200013dc
     36c:	3c040840 	.word	0x3c040840
     370:	200023a8 	.word	0x200023a8
     374:	20001bc0 	.word	0x20001bc0
     378:	3b8cd59a 	.word	0x3b8cd59a

0000037c <_GLOBAL__sub_I_adc>:
     37c:	b570      	push	{r4, r5, r6, lr}
ADC *adc = new ADC();
     37e:	207c      	movs	r0, #124	; 0x7c
		begin();
     380:	4e12      	ldr	r6, [pc, #72]	; (3cc <_GLOBAL__sub_I_adc+0x50>)
     382:	f000 fdb5 	bl	ef0 <operator new(unsigned int)>
DMAChannel dma1;
     386:	4c12      	ldr	r4, [pc, #72]	; (3d0 <_GLOBAL__sub_I_adc+0x54>)
ADC *adc = new ADC();
     388:	4605      	mov	r5, r0
     38a:	f000 f82b 	bl	3e4 <ADC::ADC()>
     38e:	4b11      	ldr	r3, [pc, #68]	; (3d4 <_GLOBAL__sub_I_adc+0x58>)
     390:	4630      	mov	r0, r6
     392:	2100      	movs	r1, #0
     394:	601d      	str	r5, [r3, #0]
     396:	f000 fb63 	bl	a60 <DMAChannel::begin(bool)>
DMAChannel dma1;
     39a:	4a0f      	ldr	r2, [pc, #60]	; (3d8 <_GLOBAL__sub_I_adc+0x5c>)
     39c:	4621      	mov	r1, r4
     39e:	4630      	mov	r0, r6
     3a0:	f001 fff4 	bl	238c <__aeabi_atexit>
     3a4:	480d      	ldr	r0, [pc, #52]	; (3dc <_GLOBAL__sub_I_adc+0x60>)
     3a6:	2100      	movs	r1, #0
     3a8:	f000 fb5a 	bl	a60 <DMAChannel::begin(bool)>
DMAChannel dma2;
     3ac:	4a0a      	ldr	r2, [pc, #40]	; (3d8 <_GLOBAL__sub_I_adc+0x5c>)
     3ae:	4621      	mov	r1, r4
     3b0:	480a      	ldr	r0, [pc, #40]	; (3dc <_GLOBAL__sub_I_adc+0x60>)
     3b2:	f001 ffeb 	bl	238c <__aeabi_atexit>
     3b6:	480a      	ldr	r0, [pc, #40]	; (3e0 <_GLOBAL__sub_I_adc+0x64>)
     3b8:	2100      	movs	r1, #0
     3ba:	f000 fb51 	bl	a60 <DMAChannel::begin(bool)>
DMAChannel dma3;
     3be:	4621      	mov	r1, r4
     3c0:	4a05      	ldr	r2, [pc, #20]	; (3d8 <_GLOBAL__sub_I_adc+0x5c>)
     3c2:	4807      	ldr	r0, [pc, #28]	; (3e0 <_GLOBAL__sub_I_adc+0x64>)
     3c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
DMAChannel dma3;
     3c8:	f001 bfe0 	b.w	238c <__aeabi_atexit>
     3cc:	200013c4 	.word	0x200013c4
     3d0:	00000085 	.word	0x00000085
     3d4:	200013bc 	.word	0x200013bc
     3d8:	20000470 	.word	0x20000470
     3dc:	200013cc 	.word	0x200013cc
     3e0:	200013d4 	.word	0x200013d4

000003e4 <ADC::ADC()>:
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
     3e4:	b538      	push	{r3, r4, r5, lr}
     3e6:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, ADC0_START)
     3e8:	4b0a      	ldr	r3, [pc, #40]	; (414 <ADC::ADC()+0x30>)
     3ea:	4a0b      	ldr	r2, [pc, #44]	; (418 <ADC::ADC()+0x34>)
     3ec:	2100      	movs	r1, #0
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
     3ee:	f104 0534 	add.w	r5, r4, #52	; 0x34
             adc0_obj(0, channel2sc1aADC0, ADC0_START)
     3f2:	f000 fa8d 	bl	910 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
     3f6:	4b09      	ldr	r3, [pc, #36]	; (41c <ADC::ADC()+0x38>)
     3f8:	2101      	movs	r1, #1
     3fa:	4a09      	ldr	r2, [pc, #36]	; (420 <ADC::ADC()+0x3c>)
     3fc:	4628      	mov	r0, r5
     3fe:	f000 fa87 	bl	910 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>
     402:	2302      	movs	r3, #2
}
     404:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, ADC1_START)
     406:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
     40a:	e9c4 451b 	strd	r4, r5, [r4, #108]	; 0x6c
     40e:	e9c4 451d 	strd	r4, r5, [r4, #116]	; 0x74
}
     412:	bd38      	pop	{r3, r4, r5, pc}
     414:	400c4000 	.word	0x400c4000
     418:	20000280 	.word	0x20000280
     41c:	400c8000 	.word	0x400c8000
     420:	2000029c 	.word	0x2000029c

00000424 <ADC_Module::calibrate()>:
    __disable_irq();
     424:	b672      	cpsid	i
    calibrating = 1;
     426:	2301      	movs	r3, #1
    atomic::clearBitFlag(adc_regs.GC, ADC_GC_CAL);
     428:	6a82      	ldr	r2, [r0, #40]	; 0x28
    calibrating = 1;
     42a:	7543      	strb	r3, [r0, #21]
        __disable_irq();
     42c:	b672      	cpsid	i
        reg &= ~flag;
     42e:	6c93      	ldr	r3, [r2, #72]	; 0x48
     430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     434:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     436:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GS, ADC_GS_CALF);
     438:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     43a:	b672      	cpsid	i
        reg |= flag;
     43c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
     43e:	f043 0302 	orr.w	r3, r3, #2
     442:	64d3      	str	r3, [r2, #76]	; 0x4c
        __enable_irq();
     444:	b662      	cpsie	i
    atomic::setBitFlag(adc_regs.GC, ADC_GC_CAL);
     446:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     448:	b672      	cpsid	i
        reg |= flag;
     44a:	6c93      	ldr	r3, [r2, #72]	; 0x48
     44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     450:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     452:	b662      	cpsie	i
    __enable_irq();
     454:	b662      	cpsie	i
}
     456:	4770      	bx	lr

00000458 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
    if (speed == conversion_speed)
     458:	7f83      	ldrb	r3, [r0, #30]
     45a:	428b      	cmp	r3, r1
     45c:	f000 80e0 	beq.w	620 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1c8>
{
     460:	b470      	push	{r4, r5, r6}
    switch (speed)
     462:	2904      	cmp	r1, #4
     464:	f200 810c 	bhi.w	680 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x228>
     468:	e8df f011 	tbh	[pc, r1, lsl #1]
     46c:	00730025 	.word	0x00730025
     470:	00b50090 	.word	0x00b50090
     474:	0005      	.short	0x0005
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     476:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     478:	b672      	cpsid	i
        reg |= flag;
     47a:	6c53      	ldr	r3, [r2, #68]	; 0x44
     47c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     480:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     482:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.GC, ADC_GC_ADACKEN);     // enable ADACK (takes max 5us to be ready)
     484:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     486:	b672      	cpsid	i
        reg |= flag;
     488:	6c93      	ldr	r3, [r2, #72]	; 0x48
     48a:	f043 0301 	orr.w	r3, r3, #1
     48e:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     490:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3)); // select ADACK as clock source
     492:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     494:	b672      	cpsid	i
        reg |= flag;
     496:	6c53      	ldr	r3, [r2, #68]	; 0x44
     498:	f043 0303 	orr.w	r3, r3, #3
     49c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     49e:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3)); // select no dividers
     4a0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     4a2:	b672      	cpsid	i
        reg &= ~flag;
     4a4:	6c53      	ldr	r3, [r2, #68]	; 0x44
     4a6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
     4aa:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     4ac:	b662      	cpsie	i
}
     4ae:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
     4b0:	7781      	strb	r1, [r0, #30]
    calibrate();
     4b2:	f7ff bfb7 	b.w	424 <ADC_Module::calibrate()>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     4b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     4b8:	b672      	cpsid	i
        reg &= ~flag;
     4ba:	6c53      	ldr	r3, [r2, #68]	; 0x44
     4bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     4c0:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     4c2:	b662      	cpsie	i
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     4c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     4c6:	b672      	cpsid	i
        reg |= flag;
     4c8:	6c53      	ldr	r3, [r2, #68]	; 0x44
     4ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     4ce:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     4d0:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_LOW_SPEED(ADC_F_BUS);
     4d2:	4a6f      	ldr	r2, [pc, #444]	; (690 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
     4d4:	4b6f      	ldr	r3, [pc, #444]	; (694 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
     4d6:	6814      	ldr	r4, [r2, #0]
     4d8:	429c      	cmp	r4, r3
     4da:	f080 8084 	bcs.w	5e6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x18e>
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
     4de:	4b6e      	ldr	r3, [pc, #440]	; (698 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
     4e0:	429c      	cmp	r4, r3
     4e2:	d274      	bcs.n	5ce <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x176>
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
     4e4:	4b6d      	ldr	r3, [pc, #436]	; (69c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
     4e6:	429c      	cmp	r4, r3
     4e8:	f080 809b 	bcs.w	622 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>
        else if (f_adc_clock / 2 >= ADC_MIN_FREQ_16BITS)
     4ec:	4b6c      	ldr	r3, [pc, #432]	; (6a0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x248>)
     4ee:	2200      	movs	r2, #0
     4f0:	429c      	cmp	r4, r3
     4f2:	4616      	mov	r6, r2
     4f4:	bf34      	ite	cc
     4f6:	2400      	movcc	r4, #0
     4f8:	2401      	movcs	r4, #1
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_ADACKEN);                                          // disable async
     4fa:	6a85      	ldr	r5, [r0, #40]	; 0x28
        __disable_irq();
     4fc:	b672      	cpsid	i
        reg &= ~flag;
     4fe:	6cab      	ldr	r3, [r5, #72]	; 0x48
     500:	f023 0301 	bic.w	r3, r3, #1
     504:	64ab      	str	r3, [r5, #72]	; 0x48
        __enable_irq();
     506:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADICLK(3), ADC_CFG1_speed & ADC_CFG_ADICLK(3)); // bus or bus/2
     508:	6a83      	ldr	r3, [r0, #40]	; 0x28
            }
        }
        else
        { // 2 bits
            // lsb first
            if ((state >> __builtin_ctzl(flag)) & 0x1)
     50a:	2a00      	cmp	r2, #0
     50c:	f000 8081 	beq.w	612 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ba>
        __disable_irq();
     510:	b672      	cpsid	i
        reg |= flag;
     512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     514:	f042 0201 	orr.w	r2, r2, #1
     518:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     51a:	b662      	cpsie	i
        __disable_irq();
     51c:	b672      	cpsid	i
        reg &= ~flag;
     51e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     520:	f022 0202 	bic.w	r2, r2, #2
     524:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     526:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADIV(3), ADC_CFG1_speed & ADC_CFG_ADIV(3));     // divisor for the clock source
     528:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if ((state >> __builtin_ctzl(flag)) & 0x1)
     52a:	2c00      	cmp	r4, #0
     52c:	d05f      	beq.n	5ee <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x196>
        __disable_irq();
     52e:	b672      	cpsid	i
        reg |= flag;
     530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     532:	f042 0220 	orr.w	r2, r2, #32
     536:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     538:	b662      	cpsie	i
            else
            { // lsb is 0
                clearBitFlag(reg, (uint32_t)(1 << __builtin_ctzl(flag)));
            }
            // msb
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
     53a:	2e00      	cmp	r6, #0
     53c:	d05f      	beq.n	5fe <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1a6>
        __disable_irq();
     53e:	b672      	cpsid	i
        reg |= flag;
     540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     546:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     548:	b662      	cpsie	i
}
     54a:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
     54c:	7781      	strb	r1, [r0, #30]
    calibrate();
     54e:	f7ff bf69 	b.w	424 <ADC_Module::calibrate()>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     552:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     554:	b672      	cpsid	i
        reg &= ~flag;
     556:	6c53      	ldr	r3, [r2, #68]	; 0x44
     558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     55c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     55e:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     560:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     562:	b672      	cpsid	i
        reg &= ~flag;
     564:	6c53      	ldr	r3, [r2, #68]	; 0x44
     566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     56a:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     56c:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_MEDIUM_SPEED(ADC_F_BUS);
     56e:	4a48      	ldr	r2, [pc, #288]	; (690 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock / 16 >= ADC_MIN_FREQ_16BITS)
     570:	4b48      	ldr	r3, [pc, #288]	; (694 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x23c>)
     572:	6812      	ldr	r2, [r2, #0]
     574:	429a      	cmp	r2, r3
     576:	d258      	bcs.n	62a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1d2>
        else if (f_adc_clock / 8 >= ADC_MIN_FREQ_16BITS)
     578:	4b47      	ldr	r3, [pc, #284]	; (698 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x240>)
     57a:	429a      	cmp	r2, r3
     57c:	d268      	bcs.n	650 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1f8>
        else if (f_adc_clock / 4 >= ADC_MIN_FREQ_16BITS)
     57e:	4b47      	ldr	r3, [pc, #284]	; (69c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x244>)
     580:	429a      	cmp	r2, r3
     582:	d273      	bcs.n	66c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x214>
     584:	2200      	movs	r2, #0
     586:	4616      	mov	r6, r2
     588:	4614      	mov	r4, r2
     58a:	e7b6      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     58c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     58e:	b672      	cpsid	i
        reg |= flag;
     590:	6c53      	ldr	r3, [r2, #68]	; 0x44
     592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     596:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     598:	b662      	cpsie	i
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
     59a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     59c:	b672      	cpsid	i
        reg &= ~flag;
     59e:	6c53      	ldr	r3, [r2, #68]	; 0x44
     5a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     5a4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     5a6:	b662      	cpsie	i
        ADC_CFG1_speed = get_CFG_HIGH_SPEED(ADC_F_BUS);
     5a8:	4b39      	ldr	r3, [pc, #228]	; (690 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x238>)
        if (f_adc_clock <= ADC_MAX_FREQ)
     5aa:	4a3e      	ldr	r2, [pc, #248]	; (6a4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24c>)
     5ac:	681b      	ldr	r3, [r3, #0]
     5ae:	4293      	cmp	r3, r2
     5b0:	d9e8      	bls.n	584 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x12c>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ)
     5b2:	4a3d      	ldr	r2, [pc, #244]	; (6a8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x250>)
     5b4:	4293      	cmp	r3, r2
     5b6:	d955      	bls.n	664 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x20c>
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
     5b8:	4a3c      	ldr	r2, [pc, #240]	; (6ac <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x254>)
     5ba:	4293      	cmp	r3, r2
     5bc:	d931      	bls.n	622 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1ca>
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
     5be:	f102 6218 	add.w	r2, r2, #159383552	; 0x9800000
     5c2:	f502 2216 	add.w	r2, r2, #614400	; 0x96000
     5c6:	f602 0204 	addw	r2, r2, #2052	; 0x804
     5ca:	4293      	cmp	r3, r2
     5cc:	d80b      	bhi.n	5e6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x18e>
     5ce:	2601      	movs	r6, #1
     5d0:	2200      	movs	r2, #0
     5d2:	4634      	mov	r4, r6
     5d4:	e791      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
     5d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        __disable_irq();
     5d8:	b672      	cpsid	i
        reg &= ~flag;
     5da:	6c53      	ldr	r3, [r2, #68]	; 0x44
     5dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     5e0:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     5e2:	b662      	cpsie	i
    if (is_adack)
     5e4:	e74e      	b.n	484 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x2c>
     5e6:	2201      	movs	r2, #1
     5e8:	4616      	mov	r6, r2
     5ea:	4614      	mov	r4, r2
     5ec:	e785      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        __disable_irq();
     5ee:	b672      	cpsid	i
        reg &= ~flag;
     5f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     5f2:	f022 0220 	bic.w	r2, r2, #32
     5f6:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     5f8:	b662      	cpsie	i
            if ((state >> (31 - __builtin_clzl(flag))) & 0x1)
     5fa:	2e00      	cmp	r6, #0
     5fc:	d19f      	bne.n	53e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xe6>
        __disable_irq();
     5fe:	b672      	cpsid	i
        reg &= ~flag;
     600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
     606:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     608:	b662      	cpsie	i
}
     60a:	bc70      	pop	{r4, r5, r6}
    conversion_speed = speed;
     60c:	7781      	strb	r1, [r0, #30]
    calibrate();
     60e:	f7ff bf09 	b.w	424 <ADC_Module::calibrate()>
        __disable_irq();
     612:	b672      	cpsid	i
        reg &= ~flag;
     614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     616:	f022 0201 	bic.w	r2, r2, #1
     61a:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     61c:	b662      	cpsie	i
    }
     61e:	e77d      	b.n	51c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xc4>
     620:	4770      	bx	lr
     622:	2200      	movs	r2, #0
     624:	2601      	movs	r6, #1
     626:	4614      	mov	r4, r2
     628:	e767      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
     62a:	4b1f      	ldr	r3, [pc, #124]	; (6a8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x250>)
     62c:	429a      	cmp	r2, r3
     62e:	d923      	bls.n	678 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x220>
        else if (f_adc_clock / 4 <= ADC_MAX_FREQ_16BITS)
     630:	4b1e      	ldr	r3, [pc, #120]	; (6ac <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x254>)
     632:	429a      	cmp	r2, r3
     634:	d91e      	bls.n	674 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x21c>
        else if (f_adc_clock / 8 <= ADC_MAX_FREQ_16BITS)
     636:	f103 6318 	add.w	r3, r3, #159383552	; 0x9800000
            if ((state >> __builtin_ctzl(flag)) & 0x1)
     63a:	2601      	movs	r6, #1
     63c:	f503 2316 	add.w	r3, r3, #614400	; 0x96000
     640:	4634      	mov	r4, r6
     642:	f603 0304 	addw	r3, r3, #2052	; 0x804
     646:	429a      	cmp	r2, r3
     648:	bf94      	ite	ls
     64a:	2200      	movls	r2, #0
     64c:	2201      	movhi	r2, #1
     64e:	e754      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
     650:	4b14      	ldr	r3, [pc, #80]	; (6a4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x24c>)
     652:	429a      	cmp	r2, r3
     654:	d90a      	bls.n	66c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x214>
            return (ADC_LIB_CFG1_ADIV(1) + ADC_LIB_CFG1_ADICLK(0));
     656:	2420      	movs	r4, #32
            return ADC_CFG1_HI_SPEED_16_BITS + 0x20;
     658:	3420      	adds	r4, #32
     65a:	2200      	movs	r2, #0
     65c:	2601      	movs	r6, #1
     65e:	f3c4 1440 	ubfx	r4, r4, #5, #1
     662:	e74a      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
     664:	2200      	movs	r2, #0
     666:	2401      	movs	r4, #1
     668:	4616      	mov	r6, r2
     66a:	e746      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        if (f_adc_clock <= ADC_MAX_FREQ_16BITS)
     66c:	2600      	movs	r6, #0
     66e:	2401      	movs	r4, #1
     670:	4632      	mov	r2, r6
     672:	e742      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
            return (ADC_LIB_CFG1_ADIV(2) + ADC_LIB_CFG1_ADICLK(0));
     674:	2440      	movs	r4, #64	; 0x40
     676:	e7ef      	b.n	658 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x200>
        else if (f_adc_clock / 2 <= ADC_MAX_FREQ_16BITS)
     678:	2400      	movs	r4, #0
     67a:	2601      	movs	r6, #1
     67c:	4622      	mov	r2, r4
            return ADC_CFG1_HI_SPEED_16_BITS + 0x20;
     67e:	e73c      	b.n	4fa <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xa2>
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
     680:	8a43      	ldrh	r3, [r0, #18]
     682:	b29b      	uxth	r3, r3
     684:	f043 0301 	orr.w	r3, r3, #1
}
     688:	bc70      	pop	{r4, r5, r6}
     68a:	8243      	strh	r3, [r0, #18]
     68c:	4770      	bx	lr
     68e:	bf00      	nop
     690:	20000460 	.word	0x20000460
     694:	03d09000 	.word	0x03d09000
     698:	01e84800 	.word	0x01e84800
     69c:	00f42400 	.word	0x00f42400
     6a0:	007a1200 	.word	0x007a1200
     6a4:	02625a00 	.word	0x02625a00
     6a8:	04c4b401 	.word	0x04c4b401
     6ac:	09896803 	.word	0x09896803

000006b0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
     6b0:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
     6b2:	7d43      	ldrb	r3, [r0, #21]
{
     6b4:	4604      	mov	r4, r0
     6b6:	460d      	mov	r5, r1
    if (calibrating)
     6b8:	b9eb      	cbnz	r3, 6f6 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x46>
    switch (speed)
     6ba:	2d07      	cmp	r5, #7
     6bc:	d819      	bhi.n	6f2 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x42>
     6be:	e8df f005 	tbb	[pc, r5]
     6c2:	331d      	.short	0x331d
     6c4:	59534d40 	.word	0x59534d40
     6c8:	045f      	.short	0x045f
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     6ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     6cc:	b672      	cpsid	i
        reg &= ~flag;
     6ce:	6c53      	ldr	r3, [r2, #68]	; 0x44
     6d0:	f023 0310 	bic.w	r3, r3, #16
     6d4:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     6d6:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(0));
     6d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
     6da:	b672      	cpsid	i
        reg &= ~flag;
     6dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     6de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     6e2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     6e4:	b662      	cpsie	i
        __disable_irq();
     6e6:	b672      	cpsid	i
        reg &= ~flag;
     6e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     6ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
     6ee:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     6f0:	b662      	cpsie	i
    sampling_speed = speed;
     6f2:	77e5      	strb	r5, [r4, #31]
}
     6f4:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
     6f6:	f000 f849 	bl	78c <ADC_Module::wait_for_cal()>
     6fa:	e7de      	b.n	6ba <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     6fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     6fe:	b672      	cpsid	i
        reg |= flag;
     700:	6c53      	ldr	r3, [r2, #68]	; 0x44
     702:	f043 0310 	orr.w	r3, r3, #16
        reg &= ~flag;
     706:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     708:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(3));
     70a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
     70c:	b672      	cpsid	i
        reg |= flag;
     70e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        reg &= ~flag;
     714:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     716:	b662      	cpsie	i
        __disable_irq();
     718:	b672      	cpsid	i
        reg |= flag;
     71a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     71c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
     720:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     722:	b662      	cpsie	i
    sampling_speed = speed;
     724:	77e5      	strb	r5, [r4, #31]
}
     726:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     728:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     72a:	b672      	cpsid	i
        reg |= flag;
     72c:	6c53      	ldr	r3, [r2, #68]	; 0x44
     72e:	f043 0310 	orr.w	r3, r3, #16
     732:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     734:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(2));
     736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
     738:	b672      	cpsid	i
        reg &= ~flag;
     73a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     73c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     740:	e7e8      	b.n	714 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x64>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     742:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     744:	b672      	cpsid	i
        reg |= flag;
     746:	6c53      	ldr	r3, [r2, #68]	; 0x44
     748:	f043 0310 	orr.w	r3, r3, #16
        reg &= ~flag;
     74c:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     74e:	b662      	cpsie	i
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_ADSTS(3), ADC_CFG_ADSTS(1));
     750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
     752:	b672      	cpsid	i
        reg |= flag;
     754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
     75a:	e7c2      	b.n	6e2 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x32>
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time enable
     75c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     75e:	b672      	cpsid	i
        reg |= flag;
     760:	6c53      	ldr	r3, [r2, #68]	; 0x44
     762:	f043 0310 	orr.w	r3, r3, #16
     766:	e7b5      	b.n	6d4 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x24>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     768:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     76a:	b672      	cpsid	i
        reg &= ~flag;
     76c:	6c53      	ldr	r3, [r2, #68]	; 0x44
     76e:	f023 0310 	bic.w	r3, r3, #16
     772:	e7c8      	b.n	706 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x56>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     774:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     776:	b672      	cpsid	i
        reg &= ~flag;
     778:	6c53      	ldr	r3, [r2, #68]	; 0x44
     77a:	f023 0310 	bic.w	r3, r3, #16
     77e:	e7d8      	b.n	732 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x82>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLSMP); // long sampling time disabled
     780:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     782:	b672      	cpsid	i
        reg &= ~flag;
     784:	6c53      	ldr	r3, [r2, #68]	; 0x44
     786:	f023 0310 	bic.w	r3, r3, #16
     78a:	e7df      	b.n	74c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x9c>

0000078c <ADC_Module::wait_for_cal()>:
{
     78c:	b538      	push	{r3, r4, r5, lr}
     78e:	2100      	movs	r1, #0
    while (atomic::getBitFlag(adc_regs.GC, ADC_GC_CAL))
     790:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if (init_calib)
     792:	7d82      	ldrb	r2, [r0, #22]
    }

    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)((reg)&flag) >> (31 - __builtin_clzl(flag));
     794:	6c9d      	ldr	r5, [r3, #72]	; 0x48
     796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    calibrating = 0;
     798:	7541      	strb	r1, [r0, #21]
    if (init_calib)
     79a:	b902      	cbnz	r2, 79e <ADC_Module::wait_for_cal()+0x12>
}
     79c:	bd38      	pop	{r3, r4, r5, pc}
     79e:	4604      	mov	r4, r0
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
     7a0:	2101      	movs	r1, #1
     7a2:	f7ff fe59 	bl	458 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
        setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
     7a6:	2103      	movs	r1, #3
     7a8:	f7ff ff82 	bl	6b0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    if (calibrating)
     7ac:	7d63      	ldrb	r3, [r4, #21]
     7ae:	b993      	cbnz	r3, 7d6 <ADC_Module::wait_for_cal()+0x4a>
        atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);
     7b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     7b2:	b672      	cpsid	i
        reg |= flag;
     7b4:	6c93      	ldr	r3, [r2, #72]	; 0x48
     7b6:	f043 0320 	orr.w	r3, r3, #32
     7ba:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     7bc:	b662      	cpsie	i
            atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
     7be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     7c0:	b672      	cpsid	i
        reg &= ~flag;
     7c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
     7c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     7c8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     7ca:	b662      	cpsie	i
    analog_num_average = num;
     7cc:	2204      	movs	r2, #4
        init_calib = 0; // clear
     7ce:	2300      	movs	r3, #0
    analog_num_average = num;
     7d0:	7722      	strb	r2, [r4, #28]
        init_calib = 0; // clear
     7d2:	75a3      	strb	r3, [r4, #22]
}
     7d4:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
     7d6:	4620      	mov	r0, r4
     7d8:	f7ff ffd8 	bl	78c <ADC_Module::wait_for_cal()>
     7dc:	e7e8      	b.n	7b0 <ADC_Module::wait_for_cal()+0x24>
     7de:	bf00      	nop

000007e0 <ADC_Module::setResolution(unsigned char)>:
{
     7e0:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
     7e2:	7dc3      	ldrb	r3, [r0, #23]
     7e4:	428b      	cmp	r3, r1
     7e6:	d019      	beq.n	81c <ADC_Module::setResolution(unsigned char)+0x3c>
    if (calibrating)
     7e8:	7d43      	ldrb	r3, [r0, #21]
     7ea:	4604      	mov	r4, r0
     7ec:	460d      	mov	r5, r1
     7ee:	bb03      	cbnz	r3, 832 <ADC_Module::setResolution(unsigned char)+0x52>
    if (bits <= 9)
     7f0:	2d09      	cmp	r5, #9
     7f2:	d914      	bls.n	81e <ADC_Module::setResolution(unsigned char)+0x3e>
    else if (bits <= 11)
     7f4:	2d0b      	cmp	r5, #11
        atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_MODE(3), ADC_CFG_MODE(1));
     7f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    else if (bits <= 11)
     7f8:	d81e      	bhi.n	838 <ADC_Module::setResolution(unsigned char)+0x58>
        __disable_irq();
     7fa:	b672      	cpsid	i
        reg |= flag;
     7fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     7fe:	f042 0204 	orr.w	r2, r2, #4
     802:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     804:	b662      	cpsie	i
        __disable_irq();
     806:	b672      	cpsid	i
        reg &= ~flag;
     808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     80a:	f022 0208 	bic.w	r2, r2, #8
     80e:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     810:	b662      	cpsie	i
        analog_max_val = 1023;
     812:	f240 32ff 	movw	r2, #1023	; 0x3ff
     816:	230a      	movs	r3, #10
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
     818:	61a2      	str	r2, [r4, #24]
    analog_res_bits = config;
     81a:	75e3      	strb	r3, [r4, #23]
}
     81c:	bd38      	pop	{r3, r4, r5, pc}
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_MODE(3));
     81e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     820:	b672      	cpsid	i
        reg &= ~flag;
     822:	6c53      	ldr	r3, [r2, #68]	; 0x44
     824:	f023 030c 	bic.w	r3, r3, #12
     828:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     82a:	b662      	cpsie	i
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
     82c:	22ff      	movs	r2, #255	; 0xff
     82e:	2308      	movs	r3, #8
     830:	e7f2      	b.n	818 <ADC_Module::setResolution(unsigned char)+0x38>
        wait_for_cal();
     832:	f7ff ffab 	bl	78c <ADC_Module::wait_for_cal()>
     836:	e7db      	b.n	7f0 <ADC_Module::setResolution(unsigned char)+0x10>
        __disable_irq();
     838:	b672      	cpsid	i
        reg &= ~flag;
     83a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     83c:	f022 0204 	bic.w	r2, r2, #4
     840:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     842:	b662      	cpsie	i
        __disable_irq();
     844:	b672      	cpsid	i
        reg |= flag;
     846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     848:	f042 0208 	orr.w	r2, r2, #8
     84c:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     84e:	b662      	cpsie	i
        analog_max_val = 4095;
     850:	f640 72ff 	movw	r2, #4095	; 0xfff
     854:	230c      	movs	r3, #12
     856:	e7df      	b.n	818 <ADC_Module::setResolution(unsigned char)+0x38>

00000858 <ADC_Module::analog_init()>:
{
     858:	b510      	push	{r4, lr}

    //! Switch on clock to ADC
    void startClock()
    {
#if defined(ADC_TEENSY_4)
        if (ADC_num == 0)
     85a:	7d03      	ldrb	r3, [r0, #20]
     85c:	4604      	mov	r4, r0
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
     85e:	4a2b      	ldr	r2, [pc, #172]	; (90c <ADC_Module::analog_init()+0xb4>)
        if (ADC_num == 0)
     860:	2b00      	cmp	r3, #0
     862:	d149      	bne.n	8f8 <ADC_Module::analog_init()+0xa0>
            CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
     864:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
     866:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     86a:	66d3      	str	r3, [r2, #108]	; 0x6c
    analog_res_bits = 0;
     86c:	2300      	movs	r3, #0
    analog_num_average = 0;
     86e:	f44f 7200 	mov.w	r2, #512	; 0x200
    atomic::setBitFlag(adc_regs.CFG, ADC_CFG_OVWREN);
     872:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    analog_res_bits = 0;
     874:	75e3      	strb	r3, [r4, #23]
    analog_max_val = 0;
     876:	61a3      	str	r3, [r4, #24]
    analog_num_average = 0;
     878:	83a2      	strh	r2, [r4, #28]
    interrupts_enabled = false;
     87a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        __disable_irq();
     87e:	b672      	cpsid	i
        reg |= flag;
     880:	6c4a      	ldr	r2, [r1, #68]	; 0x44
     882:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     886:	644a      	str	r2, [r1, #68]	; 0x44
        __enable_irq();
     888:	b662      	cpsie	i
    conversion_speed = ADC_CONVERSION_SPEED::HIGH_SPEED; // set to something different from line 139 so it gets changed there
     88a:	f240 7102 	movw	r1, #1794	; 0x702
    if (analog_reference_internal == ref_type)
     88e:	7f62      	ldrb	r2, [r4, #29]
    calibrating = 0;
     890:	7563      	strb	r3, [r4, #21]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
     892:	8263      	strh	r3, [r4, #18]
    conversion_speed = ADC_CONVERSION_SPEED::HIGH_SPEED; // set to something different from line 139 so it gets changed there
     894:	83e1      	strh	r1, [r4, #30]
    num_measurements = 0;
     896:	7463      	strb	r3, [r4, #17]
    if (analog_reference_internal == ref_type)
     898:	b152      	cbz	r2, 8b0 <ADC_Module::analog_init()+0x58>
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_REFSEL(3));
     89a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
     89c:	7763      	strb	r3, [r4, #29]
        __disable_irq();
     89e:	b672      	cpsid	i
        reg &= ~flag;
     8a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
     8a2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
     8a6:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     8a8:	b662      	cpsie	i
    calibrate();
     8aa:	4620      	mov	r0, r4
     8ac:	f7ff fdba 	bl	424 <ADC_Module::calibrate()>
    setResolution(10);
     8b0:	210a      	movs	r1, #10
     8b2:	4620      	mov	r0, r4
     8b4:	f7ff ff94 	bl	7e0 <ADC_Module::setResolution(unsigned char)>
    init_calib = 1;
     8b8:	2201      	movs	r2, #1
    if (calibrating)
     8ba:	7d63      	ldrb	r3, [r4, #21]
    init_calib = 1;
     8bc:	75a2      	strb	r2, [r4, #22]
    if (calibrating)
     8be:	bb03      	cbnz	r3, 902 <ADC_Module::analog_init()+0xaa>
        atomic::setBitFlag(adc_regs.GC, ADC_GC_AVGE);
     8c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     8c2:	b672      	cpsid	i
        reg |= flag;
     8c4:	6c93      	ldr	r3, [r2, #72]	; 0x48
     8c6:	f043 0320 	orr.w	r3, r3, #32
     8ca:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     8cc:	b662      	cpsie	i
            atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
     8ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     8d0:	b672      	cpsid	i
        reg |= flag;
     8d2:	6c53      	ldr	r3, [r2, #68]	; 0x44
     8d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
     8d8:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     8da:	b662      	cpsie	i
    analog_num_average = num;
     8dc:	2320      	movs	r3, #32
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
     8de:	4620      	mov	r0, r4
     8e0:	2100      	movs	r1, #0
    analog_num_average = num;
     8e2:	7723      	strb	r3, [r4, #28]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
     8e4:	f7ff fdb8 	bl	458 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    setSamplingSpeed(ADC_SAMPLING_SPEED::LOW_SPEED);
     8e8:	2101      	movs	r1, #1
     8ea:	f7ff fee1 	bl	6b0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
    calibrate();
     8ee:	4620      	mov	r0, r4
}
     8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calibrate();
     8f4:	f7ff bd96 	b.w	424 <ADC_Module::calibrate()>
        }
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
     8f8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
     8fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     8fe:	66d3      	str	r3, [r2, #108]	; 0x6c
     900:	e7b4      	b.n	86c <ADC_Module::analog_init()+0x14>
        wait_for_cal();
     902:	4620      	mov	r0, r4
     904:	f7ff ff42 	bl	78c <ADC_Module::wait_for_cal()>
     908:	e7da      	b.n	8c0 <ADC_Module::analog_init()+0x68>
     90a:	bf00      	nop
     90c:	400fc000 	.word	0x400fc000

00000910 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)>:
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
     910:	2900      	cmp	r1, #0
ADC_Module::ADC_Module(uint8_t ADC_number,
     912:	b510      	push	{r4, lr}
                                                 adc_regs(a_adc_regs)
     914:	6283      	str	r3, [r0, #40]	; 0x28
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
     916:	bf0c      	ite	eq
     918:	460b      	moveq	r3, r1
     91a:	2303      	movne	r3, #3
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
     91c:	6202      	str	r2, [r0, #32]
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
     91e:	bf14      	ite	ne
     920:	226b      	movne	r2, #107	; 0x6b
     922:	2267      	moveq	r2, #103	; 0x67
     924:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
     928:	bf0c      	ite	eq
     92a:	460b      	moveq	r3, r1
     92c:	2304      	movne	r3, #4
ADC_Module::ADC_Module(uint8_t ADC_number,
     92e:	4604      	mov	r4, r0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
     930:	7501      	strb	r1, [r0, #20]
                                                 XBAR_IN(ADC_num ? XBARA1_IN_QTIMER4_TIMER3 : XBARA1_IN_QTIMER4_TIMER0), XBAR_OUT(ADC_num ? XBARA1_OUT_ADC_ETC_TRIG10 : XBARA1_OUT_ADC_ETC_TRIG00), QTIMER4_INDEX(ADC_num ? 3 : 0), ADC_ETC_TRIGGER_INDEX(ADC_num ? 4 : 0), IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC2 : IRQ_NUMBER_t::IRQ_ADC1)
     932:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
     936:	bf14      	ite	ne
     938:	2327      	movne	r3, #39	; 0x27
     93a:	2324      	moveq	r3, #36	; 0x24
     93c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
     940:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
     944:	bf14      	ite	ne
     946:	2344      	movne	r3, #68	; 0x44
     948:	2343      	moveq	r3, #67	; 0x43
     94a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    analog_init();
     94e:	f7ff ff83 	bl	858 <ADC_Module::analog_init()>
}
     952:	4620      	mov	r0, r4
     954:	bd10      	pop	{r4, pc}
     956:	bf00      	nop

00000958 <ADC_Module::setAveraging(unsigned char)>:
{
     958:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
     95a:	7d43      	ldrb	r3, [r0, #21]
{
     95c:	4604      	mov	r4, r0
     95e:	460d      	mov	r5, r1
    if (calibrating)
     960:	2b00      	cmp	r3, #0
     962:	d130      	bne.n	9c6 <ADC_Module::setAveraging(unsigned char)+0x6e>
    if (num <= 1)
     964:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.GC, ADC_GC_AVGE);
     966:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (num <= 1)
     968:	d924      	bls.n	9b4 <ADC_Module::setAveraging(unsigned char)+0x5c>
        __disable_irq();
     96a:	b672      	cpsid	i
        reg |= flag;
     96c:	6c93      	ldr	r3, [r2, #72]	; 0x48
     96e:	f043 0320 	orr.w	r3, r3, #32
     972:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     974:	b662      	cpsie	i
        if (num <= 4)
     976:	2d04      	cmp	r5, #4
     978:	d809      	bhi.n	98e <ADC_Module::setAveraging(unsigned char)+0x36>
            atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
     97a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     97c:	b672      	cpsid	i
        reg &= ~flag;
     97e:	6c53      	ldr	r3, [r2, #68]	; 0x44
     980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     984:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     986:	b662      	cpsie	i
            num = 4;
     988:	2304      	movs	r3, #4
    analog_num_average = num;
     98a:	7723      	strb	r3, [r4, #28]
}
     98c:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
     98e:	2d08      	cmp	r5, #8
     990:	d91c      	bls.n	9cc <ADC_Module::setAveraging(unsigned char)+0x74>
        else if (num <= 16)
     992:	2d10      	cmp	r5, #16
     994:	d82a      	bhi.n	9ec <ADC_Module::setAveraging(unsigned char)+0x94>
            atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(2));
     996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
     998:	b672      	cpsid	i
        reg &= ~flag;
     99a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     99c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
     9a0:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     9a2:	b662      	cpsie	i
        __disable_irq();
     9a4:	b672      	cpsid	i
        reg |= flag;
     9a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     9a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
     9ac:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     9ae:	b662      	cpsie	i
            num = 16;
     9b0:	2310      	movs	r3, #16
    }
     9b2:	e7ea      	b.n	98a <ADC_Module::setAveraging(unsigned char)+0x32>
        __disable_irq();
     9b4:	b672      	cpsid	i
        reg &= ~flag;
     9b6:	6c93      	ldr	r3, [r2, #72]	; 0x48
     9b8:	f023 0320 	bic.w	r3, r3, #32
     9bc:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     9be:	b662      	cpsie	i
        num = 0;
     9c0:	2300      	movs	r3, #0
    analog_num_average = num;
     9c2:	7723      	strb	r3, [r4, #28]
}
     9c4:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
     9c6:	f7ff fee1 	bl	78c <ADC_Module::wait_for_cal()>
     9ca:	e7cb      	b.n	964 <ADC_Module::setAveraging(unsigned char)+0xc>
            atomic::changeBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3), ADC_CFG_AVGS(1));
     9cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __disable_irq();
     9ce:	b672      	cpsid	i
        reg |= flag;
     9d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     9d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     9d6:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     9d8:	b662      	cpsie	i
        __disable_irq();
     9da:	b672      	cpsid	i
        reg &= ~flag;
     9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     9de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     9e2:	645a      	str	r2, [r3, #68]	; 0x44
        __enable_irq();
     9e4:	b662      	cpsie	i
            num = 8;
     9e6:	2308      	movs	r3, #8
    analog_num_average = num;
     9e8:	7723      	strb	r3, [r4, #28]
}
     9ea:	bd38      	pop	{r3, r4, r5, pc}
            atomic::setBitFlag(adc_regs.CFG, ADC_CFG_AVGS(3));
     9ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        __disable_irq();
     9ee:	b672      	cpsid	i
        reg |= flag;
     9f0:	6c53      	ldr	r3, [r2, #68]	; 0x44
     9f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
     9f6:	6453      	str	r3, [r2, #68]	; 0x44
        __enable_irq();
     9f8:	b662      	cpsie	i
            num = 32;
     9fa:	2320      	movs	r3, #32
    }
     9fc:	e7c5      	b.n	98a <ADC_Module::setAveraging(unsigned char)+0x32>
     9fe:	bf00      	nop

00000a00 <ADC_Module::startContinuous(unsigned char)>:
    if (pin > ADC_MAX_PIN)
     a00:	291b      	cmp	r1, #27
{
     a02:	b538      	push	{r3, r4, r5, lr}
     a04:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
     a06:	d820      	bhi.n	a4a <ADC_Module::startContinuous(unsigned char)+0x4a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
     a08:	6a03      	ldr	r3, [r0, #32]
     a0a:	460d      	mov	r5, r1
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
     a0c:	5c5b      	ldrb	r3, [r3, r1]
     a0e:	f003 031f 	and.w	r3, r3, #31
     a12:	2b1f      	cmp	r3, #31
     a14:	d019      	beq.n	a4a <ADC_Module::startContinuous(unsigned char)+0x4a>
    if (calibrating)
     a16:	7d43      	ldrb	r3, [r0, #21]
     a18:	b9f3      	cbnz	r3, a58 <ADC_Module::startContinuous(unsigned char)+0x58>
    num_measurements++;
     a1a:	7c63      	ldrb	r3, [r4, #17]
        atomic::setBitFlag(adc_regs.GC, ADC_GC_ADCO);
     a1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     a1e:	3301      	adds	r3, #1
     a20:	7463      	strb	r3, [r4, #17]
        __disable_irq();
     a22:	b672      	cpsid	i
        reg |= flag;
     a24:	6c93      	ldr	r3, [r2, #72]	; 0x48
     a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     a2a:	6493      	str	r3, [r2, #72]	; 0x48
        __enable_irq();
     a2c:	b662      	cpsie	i
    const uint8_t sc1a_pin = channel2sc1a[pin];
     a2e:	6a23      	ldr	r3, [r4, #32]
     a30:	5d5b      	ldrb	r3, [r3, r5]
    __disable_irq();
     a32:	b672      	cpsid	i
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
     a34:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
     a38:	f003 031f 	and.w	r3, r3, #31
     a3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     a3e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
     a42:	6013      	str	r3, [r2, #0]
    __enable_irq();
     a44:	b662      	cpsie	i
    return true;
     a46:	2001      	movs	r0, #1
}
     a48:	bd38      	pop	{r3, r4, r5, pc}
     a4a:	8a63      	ldrh	r3, [r4, #18]
        return false;
     a4c:	2000      	movs	r0, #0
     a4e:	b29b      	uxth	r3, r3
     a50:	f043 0304 	orr.w	r3, r3, #4
     a54:	8263      	strh	r3, [r4, #18]
}
     a56:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
     a58:	f7ff fe98 	bl	78c <ADC_Module::wait_for_cal()>
     a5c:	e7dd      	b.n	a1a <ADC_Module::startContinuous(unsigned char)+0x1a>
     a5e:	bf00      	nop

00000a60 <DMAChannel::begin(bool)>:
{
     a60:	b430      	push	{r4, r5}
	__disable_irq();
     a62:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
     a64:	b921      	cbnz	r1, a70 <DMAChannel::begin(bool)+0x10>
     a66:	6803      	ldr	r3, [r0, #0]
     a68:	b113      	cbz	r3, a70 <DMAChannel::begin(bool)+0x10>
     a6a:	7902      	ldrb	r2, [r0, #4]
     a6c:	2a0f      	cmp	r2, #15
     a6e:	d93b      	bls.n	ae8 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
     a70:	4c24      	ldr	r4, [pc, #144]	; (b04 <DMAChannel::begin(bool)+0xa4>)
     a72:	8821      	ldrh	r1, [r4, #0]
{
     a74:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
     a76:	fa41 f203 	asr.w	r2, r1, r3
     a7a:	f012 0201 	ands.w	r2, r2, #1
     a7e:	d008      	beq.n	a92 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
     a80:	3301      	adds	r3, #1
     a82:	2b10      	cmp	r3, #16
     a84:	d1f7      	bne.n	a76 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
     a86:	b662      	cpsie	i
			TCD = (TCD_t *)0;
     a88:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
     a8a:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
     a8c:	6002      	str	r2, [r0, #0]
}
     a8e:	bc30      	pop	{r4, r5}
     a90:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
     a92:	f04f 0c01 	mov.w	ip, #1
     a96:	fa0c fc03 	lsl.w	ip, ip, r3
     a9a:	ea41 010c 	orr.w	r1, r1, ip
     a9e:	8021      	strh	r1, [r4, #0]
			__enable_irq();
     aa0:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
     aa2:	4919      	ldr	r1, [pc, #100]	; (b08 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
     aa4:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
     aa8:	4c18      	ldr	r4, [pc, #96]	; (b0c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
     aaa:	4419      	add	r1, r3
	channel = ch;
     aac:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
     ab0:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
     ab2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
     ab4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
     ab8:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
     aba:	f240 4482 	movw	r4, #1154	; 0x482
     abe:	4914      	ldr	r1, [pc, #80]	; (b10 <DMAChannel::begin(bool)+0xb0>)
     ac0:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
     ac2:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
     ac6:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
     aca:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
     ace:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
     ad2:	6003      	str	r3, [r0, #0]
}
     ad4:	bc30      	pop	{r4, r5}
	*p++ = 0;
     ad6:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
     ada:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
     ade:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
     ae2:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
     ae6:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
     ae8:	4c06      	ldr	r4, [pc, #24]	; (b04 <DMAChannel::begin(bool)+0xa4>)
     aea:	8821      	ldrh	r1, [r4, #0]
     aec:	fa41 f502 	asr.w	r5, r1, r2
     af0:	07ed      	lsls	r5, r5, #31
     af2:	d5bf      	bpl.n	a74 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
     af4:	4d04      	ldr	r5, [pc, #16]	; (b08 <DMAChannel::begin(bool)+0xa8>)
     af6:	4415      	add	r5, r2
     af8:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
     afc:	d1ba      	bne.n	a74 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
     afe:	b662      	cpsie	i
		return;
     b00:	e7c5      	b.n	a8e <DMAChannel::begin(bool)+0x2e>
     b02:	bf00      	nop
     b04:	20002be4 	.word	0x20002be4
     b08:	02007480 	.word	0x02007480
     b0c:	400fc000 	.word	0x400fc000
     b10:	400e8000 	.word	0x400e8000

00000b14 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
     b14:	7903      	ldrb	r3, [r0, #4]
     b16:	2b0f      	cmp	r3, #15
     b18:	d811      	bhi.n	b3e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
     b1a:	4a09      	ldr	r2, [pc, #36]	; (b40 <DMAChannel::release()+0x2c>)
     b1c:	7693      	strb	r3, [r2, #26]
	__disable_irq();
     b1e:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
     b20:	4908      	ldr	r1, [pc, #32]	; (b44 <DMAChannel::release()+0x30>)
     b22:	2201      	movs	r2, #1
     b24:	f890 c004 	ldrb.w	ip, [r0, #4]
     b28:	880b      	ldrh	r3, [r1, #0]
     b2a:	fa02 f20c 	lsl.w	r2, r2, ip
     b2e:	ea23 0302 	bic.w	r3, r3, r2
     b32:	800b      	strh	r3, [r1, #0]
	__enable_irq();
     b34:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
     b36:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
     b38:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
     b3a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
     b3c:	6003      	str	r3, [r0, #0]
}
     b3e:	4770      	bx	lr
     b40:	400e8000 	.word	0x400e8000
     b44:	20002be4 	.word	0x20002be4

00000b48 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     b48:	49a2      	ldr	r1, [pc, #648]	; (dd4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     b4a:	4ba3      	ldr	r3, [pc, #652]	; (dd8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
     b4c:	4288      	cmp	r0, r1
{
     b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
     b52:	4ca2      	ldr	r4, [pc, #648]	; (ddc <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     b54:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     b56:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     b58:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
     b5c:	d91b      	bls.n	b96 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     b5e:	4ba0      	ldr	r3, [pc, #640]	; (de0 <set_arm_clock+0x298>)
     b60:	4298      	cmp	r0, r3
     b62:	f240 8102 	bls.w	d6a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     b66:	1ac3      	subs	r3, r0, r3
     b68:	499e      	ldr	r1, [pc, #632]	; (de4 <set_arm_clock+0x29c>)
     b6a:	0a1b      	lsrs	r3, r3, #8
     b6c:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     b70:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     b74:	09db      	lsrs	r3, r3, #7
     b76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b7e:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     b82:	428b      	cmp	r3, r1
     b84:	bf28      	it	cs
     b86:	460b      	movcs	r3, r1
     b88:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
     b8c:	4b96      	ldr	r3, [pc, #600]	; (de8 <set_arm_clock+0x2a0>)
     b8e:	fba3 3707 	umull	r3, r7, r3, r7
     b92:	08ff      	lsrs	r7, r7, #3
     b94:	e004      	b.n	ba0 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
     b96:	4f95      	ldr	r7, [pc, #596]	; (dec <set_arm_clock+0x2a4>)
     b98:	42b8      	cmp	r0, r7
     b9a:	bf8c      	ite	hi
     b9c:	270e      	movhi	r7, #14
     b9e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     ba0:	498d      	ldr	r1, [pc, #564]	; (dd8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     ba2:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     ba6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     baa:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     bb0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     bb4:	d20c      	bcs.n	bd0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     bb6:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     bba:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     bbe:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
     bc2:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     bc6:	680b      	ldr	r3, [r1, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	dafc      	bge.n	bc6 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     bcc:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     bd0:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
     bd4:	d124      	bne.n	c20 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     bd6:	4986      	ldr	r1, [pc, #536]	; (df0 <set_arm_clock+0x2a8>)
     bd8:	690c      	ldr	r4, [r1, #16]
     bda:	4986      	ldr	r1, [pc, #536]	; (df4 <set_arm_clock+0x2ac>)
     bdc:	43a1      	bics	r1, r4
     bde:	f000 80ea 	beq.w	db6 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     be2:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
     be6:	4634      	mov	r4, r6
     be8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     bec:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
     bf0:	d004      	beq.n	bfc <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     bf2:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     bf6:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
     bf8:	4b77      	ldr	r3, [pc, #476]	; (dd8 <set_arm_clock+0x290>)
     bfa:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     bfc:	f411 5f40 	tst.w	r1, #12288	; 0x3000
     c00:	d007      	beq.n	c12 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     c02:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
     c06:	4974      	ldr	r1, [pc, #464]	; (dd8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     c08:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
     c0a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     c0c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
     c0e:	071a      	lsls	r2, r3, #28
     c10:	d4fc      	bmi.n	c0c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     c12:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     c16:	4a70      	ldr	r2, [pc, #448]	; (dd8 <set_arm_clock+0x290>)
     c18:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     c1a:	6c93      	ldr	r3, [r2, #72]	; 0x48
     c1c:	069b      	lsls	r3, r3, #26
     c1e:	d4fc      	bmi.n	c1a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
     c20:	4c75      	ldr	r4, [pc, #468]	; (df8 <set_arm_clock+0x2b0>)
     c22:	42a0      	cmp	r0, r4
     c24:	f200 80ce 	bhi.w	dc4 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
     c28:	f04f 0c01 	mov.w	ip, #1
     c2c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
     c2e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
     c30:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
     c34:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
     c38:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     c3c:	42a2      	cmp	r2, r4
     c3e:	d818      	bhi.n	c72 <set_arm_clock+0x12a>
		if (div_arm < 8) {
     c40:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
     c44:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
     c48:	f040 808d 	bne.w	d66 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
     c4c:	f1bc 0f04 	cmp.w	ip, #4
     c50:	f200 8091 	bhi.w	d76 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
     c54:	180a      	adds	r2, r1, r0
     c56:	42a2      	cmp	r2, r4
     c58:	f200 80a4 	bhi.w	da4 <set_arm_clock+0x25c>
     c5c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
     c60:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
     c62:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     c66:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
     c6a:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     c6e:	42a2      	cmp	r2, r4
     c70:	d9e6      	bls.n	c40 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     c72:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     c76:	028c      	lsls	r4, r1, #10
     c78:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     c7c:	485f      	ldr	r0, [pc, #380]	; (dfc <set_arm_clock+0x2b4>)
     c7e:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
     c80:	4a5f      	ldr	r2, [pc, #380]	; (e00 <set_arm_clock+0x2b8>)
     c82:	4290      	cmp	r0, r2
     c84:	d97f      	bls.n	d86 <set_arm_clock+0x23e>
     c86:	f8df a1a4 	ldr.w	sl, [pc, #420]	; e2c <set_arm_clock+0x2e4>
     c8a:	226c      	movs	r2, #108	; 0x6c
     c8c:	485d      	ldr	r0, [pc, #372]	; (e04 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     c8e:	4d58      	ldr	r5, [pc, #352]	; (df0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
     c90:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     c94:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
     c98:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     c9c:	f8df c190 	ldr.w	ip, [pc, #400]	; e30 <set_arm_clock+0x2e8>
     ca0:	ea0e 0c0c 	and.w	ip, lr, ip
     ca4:	45d4      	cmp	ip, sl
     ca6:	d009      	beq.n	cbc <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     cac:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
     cb0:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     cb4:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     cb6:	682a      	ldr	r2, [r5, #0]
     cb8:	2a00      	cmp	r2, #0
     cba:	dafc      	bge.n	cb6 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     cbc:	4a46      	ldr	r2, [pc, #280]	; (dd8 <set_arm_clock+0x290>)
     cbe:	6915      	ldr	r5, [r2, #16]
     cc0:	f005 0507 	and.w	r5, r5, #7
     cc4:	429d      	cmp	r5, r3
     cc6:	d003      	beq.n	cd0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     cc8:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     cca:	6c93      	ldr	r3, [r2, #72]	; 0x48
     ccc:	03dd      	lsls	r5, r3, #15
     cce:	d4fc      	bmi.n	cca <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     cd0:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
     cd4:	d009      	beq.n	cea <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     cd6:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     cda:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
     cde:	4a3e      	ldr	r2, [pc, #248]	; (dd8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     ce0:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
     ce2:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     ce4:	6c93      	ldr	r3, [r2, #72]	; 0x48
     ce6:	0799      	lsls	r1, r3, #30
     ce8:	d4fc      	bmi.n	ce4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     cea:	4947      	ldr	r1, [pc, #284]	; (e08 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
     cec:	4a47      	ldr	r2, [pc, #284]	; (e0c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     cee:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
     cf0:	4291      	cmp	r1, r2
     cf2:	d83c      	bhi.n	d6e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     cf4:	4b46      	ldr	r3, [pc, #280]	; (e10 <set_arm_clock+0x2c8>)
     cf6:	09c9      	lsrs	r1, r1, #7
     cf8:	fba3 3101 	umull	r3, r1, r3, r1
     cfc:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     cfe:	1e4b      	subs	r3, r1, #1
     d00:	021b      	lsls	r3, r3, #8
     d02:	ea86 0203 	eor.w	r2, r6, r3
     d06:	f412 7f40 	tst.w	r2, #768	; 0x300
     d0a:	d006      	beq.n	d1a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     d0c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
     d14:	4a30      	ldr	r2, [pc, #192]	; (dd8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     d16:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
     d18:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     d1a:	4a2f      	ldr	r2, [pc, #188]	; (dd8 <set_arm_clock+0x290>)
     d1c:	6953      	ldr	r3, [r2, #20]
     d1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
     d22:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     d24:	6c93      	ldr	r3, [r2, #72]	; 0x48
     d26:	069b      	lsls	r3, r3, #26
     d28:	d4fc      	bmi.n	d24 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     d2a:	4b3a      	ldr	r3, [pc, #232]	; (e14 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     d2c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     d2e:	fba3 2300 	umull	r2, r3, r3, r0
     d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     d36:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
     d3a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     d3e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
     d42:	4a35      	ldr	r2, [pc, #212]	; (e18 <set_arm_clock+0x2d0>)
     d44:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
     d46:	4a35      	ldr	r2, [pc, #212]	; (e1c <set_arm_clock+0x2d4>)
     d48:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     d4a:	4a35      	ldr	r2, [pc, #212]	; (e20 <set_arm_clock+0x2d8>)
     d4c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     d4e:	d208      	bcs.n	d62 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     d50:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     d54:	4a21      	ldr	r2, [pc, #132]	; (ddc <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     d56:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
     d5a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     d5c:	6813      	ldr	r3, [r2, #0]
     d5e:	2b00      	cmp	r3, #0
     d60:	dafc      	bge.n	d5c <set_arm_clock+0x214>
	}

	return frequency;
}
     d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d66:	4673      	mov	r3, lr
     d68:	e762      	b.n	c30 <set_arm_clock+0xe8>
     d6a:	2712      	movs	r7, #18
     d6c:	e718      	b.n	ba0 <set_arm_clock+0x58>
     d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
     d72:	2104      	movs	r1, #4
     d74:	e7c5      	b.n	d02 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d76:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d7a:	4820      	ldr	r0, [pc, #128]	; (dfc <set_arm_clock+0x2b4>)
     d7c:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d7e:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d80:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d82:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d86:	4a27      	ldr	r2, [pc, #156]	; (e24 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
     d88:	f8df a0a8 	ldr.w	sl, [pc, #168]	; e34 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d8c:	fba2 2000 	umull	r2, r0, r2, r0
     d90:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
     d92:	4825      	ldr	r0, [pc, #148]	; (e28 <set_arm_clock+0x2e0>)
     d94:	2a36      	cmp	r2, #54	; 0x36
     d96:	bf38      	it	cc
     d98:	2236      	movcc	r2, #54	; 0x36
     d9a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
     d9e:	ea42 0a0a 	orr.w	sl, r2, sl
     da2:	e774      	b.n	c8e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     da4:	ea4f 248c 	mov.w	r4, ip, lsl #10
     da8:	2300      	movs	r3, #0
     daa:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
     dae:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
     db2:	46ac      	mov	ip, r5
     db4:	e762      	b.n	c7c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     db6:	461d      	mov	r5, r3
     db8:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
     dbc:	4611      	mov	r1, r2
     dbe:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
     dc2:	e713      	b.n	bec <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
     dc4:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
     dc6:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     dca:	4602      	mov	r2, r0
     dcc:	4631      	mov	r1, r6
     dce:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
     dd0:	46e6      	mov	lr, ip
     dd2:	e753      	b.n	c7c <set_arm_clock+0x134>
     dd4:	1f78a400 	.word	0x1f78a400
     dd8:	400fc000 	.word	0x400fc000
     ddc:	40080000 	.word	0x40080000
     de0:	23c34600 	.word	0x23c34600
     de4:	004cb223 	.word	0x004cb223
     de8:	51eb851f 	.word	0x51eb851f
     dec:	016e3600 	.word	0x016e3600
     df0:	400d8000 	.word	0x400d8000
     df4:	80003040 	.word	0x80003040
     df8:	269fb1ff 	.word	0x269fb1ff
     dfc:	005b8d80 	.word	0x005b8d80
     e00:	4df67eff 	.word	0x4df67eff
     e04:	4d3f6400 	.word	0x4d3f6400
     e08:	08f0d17f 	.word	0x08f0d17f
     e0c:	2cb4177f 	.word	0x2cb4177f
     e10:	00e5109f 	.word	0x00e5109f
     e14:	431bde83 	.word	0x431bde83
     e18:	20000464 	.word	0x20000464
     e1c:	20000460 	.word	0x20000460
     e20:	20002bc0 	.word	0x20002bc0
     e24:	165e9f81 	.word	0x165e9f81
     e28:	00b71b00 	.word	0x00b71b00
     e2c:	8000206c 	.word	0x8000206c
     e30:	8001307f 	.word	0x8001307f
     e34:	80002000 	.word	0x80002000

00000e38 <delay>:
	if (msec == 0) return;
     e38:	b900      	cbnz	r0, e3c <delay+0x4>
     e3a:	4770      	bx	lr
{
     e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     e40:	2101      	movs	r1, #1
     e42:	4681      	mov	r9, r0
     e44:	4c21      	ldr	r4, [pc, #132]	; (ecc <delay+0x94>)
     e46:	4d22      	ldr	r5, [pc, #136]	; (ed0 <delay+0x98>)
     e48:	4e22      	ldr	r6, [pc, #136]	; (ed4 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     e4a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     e4e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     e50:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     e52:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     e56:	2b00      	cmp	r3, #0
     e58:	d1f7      	bne.n	e4a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     e5a:	491f      	ldr	r1, [pc, #124]	; (ed8 <delay+0xa0>)
     e5c:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
     e5e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e62:	f8df a078 	ldr.w	sl, [pc, #120]	; edc <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     e66:	1a1b      	subs	r3, r3, r0
     e68:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     e6a:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e6e:	f8da 2000 	ldr.w	r2, [sl]
     e72:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     e76:	455a      	cmp	r2, fp
     e78:	bf94      	ite	ls
     e7a:	4490      	addls	r8, r2
     e7c:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     e7e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     e82:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     e84:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     e86:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     e8a:	2b00      	cmp	r3, #0
     e8c:	d1f7      	bne.n	e7e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     e8e:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e90:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     e94:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     e96:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e9a:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     e9e:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     ea2:	bf94      	ite	ls
     ea4:	4462      	addls	r2, ip
     ea6:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     eaa:	eba2 0208 	sub.w	r2, r2, r8
     eae:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     eb2:	d306      	bcc.n	ec2 <delay+0x8a>
			if (--msec == 0) return;
     eb4:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     eb8:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     ebc:	d1df      	bne.n	e7e <delay+0x46>
}
     ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     ec2:	f001 f8e5 	bl	2090 <yield>
		while ((micros() - start) >= 1000) {
     ec6:	4904      	ldr	r1, [pc, #16]	; (ed8 <delay+0xa0>)
     ec8:	e7d9      	b.n	e7e <delay+0x46>
     eca:	bf00      	nop
     ecc:	20002bcc 	.word	0x20002bcc
     ed0:	20002bc8 	.word	0x20002bc8
     ed4:	20002bc4 	.word	0x20002bc4
     ed8:	e0001000 	.word	0xe0001000
     edc:	20002bc0 	.word	0x20002bc0

00000ee0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     ee0:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     ee2:	f7ff f8d5 	bl	90 <setup>
	while (1) {
		loop();
     ee6:	f7ff f9ed 	bl	2c4 <loop>
		yield();
     eea:	f001 f8d1 	bl	2090 <yield>
	while (1) {
     eee:	e7fa      	b.n	ee6 <main+0x6>

00000ef0 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
     ef0:	f001 ba52 	b.w	2398 <malloc>

00000ef4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     ef4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
     ef6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     ef8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
     efc:	4619      	mov	r1, r3
{
     efe:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     f00:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     f04:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     f08:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     f0c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
     f10:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
     f14:	460a      	mov	r2, r1
	p->FFILT0 = 0;
     f16:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     f1a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     f1e:	b29b      	uxth	r3, r3
     f20:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     f24:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     f28:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
     f2c:	3101      	adds	r1, #1
     f2e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
     f32:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     f34:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     f36:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     f3a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     f3c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     f3e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     f40:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     f42:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
     f46:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     f48:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     f4a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     f4c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
     f4e:	d1eb      	bne.n	f28 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     f50:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     f54:	b29b      	uxth	r3, r3
     f56:	f043 030f 	orr.w	r3, r3, #15
     f5a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     f5e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     f62:	b29b      	uxth	r3, r3
     f64:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     f68:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
     f6c:	bd10      	pop	{r4, pc}
     f6e:	bf00      	nop

00000f70 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f70:	4b37      	ldr	r3, [pc, #220]	; (1050 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     f72:	4a38      	ldr	r2, [pc, #224]	; (1054 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f74:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     f76:	4838      	ldr	r0, [pc, #224]	; (1058 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f78:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
     f7c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     f7e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     f80:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     f84:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     f88:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     f8c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     f90:	430a      	orrs	r2, r1
     f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
     f96:	f7ff ffad 	bl	ef4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
     f9a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     f9e:	f7ff ffa9 	bl	ef4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
     fa2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     fa6:	f7ff ffa5 	bl	ef4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
     faa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     fae:	f7ff ffa1 	bl	ef4 <flexpwm_init>
	for (i=0; i < 4; i++) {
     fb2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     fb4:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     fb8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
     fbc:	4611      	mov	r1, r2
     fbe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     fc2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     fc6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     fc8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     fca:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     fcc:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     fce:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     fd2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     fd4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     fd6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     fda:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     fdc:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
     fde:	d1ee      	bne.n	fbe <pwm_init+0x4e>
     fe0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     fe2:	481e      	ldr	r0, [pc, #120]	; (105c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     fe4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     fe8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
     fec:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     fee:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     ff2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
     ff6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     ffa:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     ffe:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1000:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1002:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1004:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1006:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    100a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    100c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    100e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1012:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1014:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1016:	d1ee      	bne.n	ff6 <pwm_init+0x86>
    1018:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    101a:	4811      	ldr	r0, [pc, #68]	; (1060 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    101c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    101e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1022:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1024:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1028:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    102c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1030:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1034:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1036:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1038:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    103a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    103c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    103e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1040:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1042:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1046:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1048:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    104c:	d1ee      	bne.n	102c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    104e:	bd70      	pop	{r4, r5, r6, pc}
    1050:	400fc000 	.word	0x400fc000
    1054:	fc030000 	.word	0xfc030000
    1058:	403dc000 	.word	0x403dc000
    105c:	401e0000 	.word	0x401e0000
    1060:	401e4000 	.word	0x401e4000

00001064 <unused_interrupt_vector>:
	__disable_irq();
    1064:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    1066:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    106a:	4c52      	ldr	r4, [pc, #328]	; (11b4 <unused_interrupt_vector+0x150>)
    106c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    1070:	f01e 0f04 	tst.w	lr, #4
    1074:	bf0c      	ite	eq
    1076:	f3ef 8208 	mrseq	r2, MSP
    107a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    107e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    1082:	4e4d      	ldr	r6, [pc, #308]	; (11b8 <unused_interrupt_vector+0x154>)
	while (p < end) {
    1084:	4d4d      	ldr	r5, [pc, #308]	; (11bc <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    1086:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    108a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    108e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    1092:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    1096:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    109a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    109e:	6993      	ldr	r3, [r2, #24]
    10a0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    10a4:	69d3      	ldr	r3, [r2, #28]
    10a6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    10aa:	f000 f8bd 	bl	1228 <tempmonGetTemp>
    10ae:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    10b2:	f001 f959 	bl	2368 <rtc_get>
	info->len = sizeof(*info) / 4;
    10b6:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    10b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    10bc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    10c0:	460b      	mov	r3, r1
    10c2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    10c6:	493e      	ldr	r1, [pc, #248]	; (11c0 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    10c8:	1d30      	adds	r0, r6, #4
    10ca:	405a      	eors	r2, r3
    10cc:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    10ce:	f002 0301 	and.w	r3, r2, #1
    10d2:	3c01      	subs	r4, #1
    10d4:	fb01 f303 	mul.w	r3, r1, r3
    10d8:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    10dc:	d1f7      	bne.n	10ce <unused_interrupt_vector+0x6a>
	while (p < end) {
    10de:	42a8      	cmp	r0, r5
    10e0:	d002      	beq.n	10e8 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    10e2:	6873      	ldr	r3, [r6, #4]
    10e4:	4606      	mov	r6, r0
    10e6:	e7ef      	b.n	10c8 <unused_interrupt_vector+0x64>
	info->crc = crc;
    10e8:	4b32      	ldr	r3, [pc, #200]	; (11b4 <unused_interrupt_vector+0x150>)
    10ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    10ee:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    10f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    10f6:	4930      	ldr	r1, [pc, #192]	; (11b8 <unused_interrupt_vector+0x154>)
    10f8:	4a32      	ldr	r2, [pc, #200]	; (11c4 <unused_interrupt_vector+0x160>)
    10fa:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    10fe:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    1102:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1106:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    110a:	4a2f      	ldr	r2, [pc, #188]	; (11c8 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    110c:	2502      	movs	r5, #2
    110e:	482f      	ldr	r0, [pc, #188]	; (11cc <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1110:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1112:	492f      	ldr	r1, [pc, #188]	; (11d0 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1114:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    1118:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    111a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    111c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    111e:	482d      	ldr	r0, [pc, #180]	; (11d4 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1120:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1128:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    112a:	680b      	ldr	r3, [r1, #0]
    112c:	4283      	cmp	r3, r0
    112e:	d83d      	bhi.n	11ac <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    1130:	4d26      	ldr	r5, [pc, #152]	; (11cc <unused_interrupt_vector+0x168>)
    1132:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    1134:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    113c:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    113e:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    1140:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1144:	4924      	ldr	r1, [pc, #144]	; (11d8 <unused_interrupt_vector+0x174>)
    1146:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    114a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    114e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    1152:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    1156:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    115a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    115e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    1162:	e001      	b.n	1168 <unused_interrupt_vector+0x104>
		usb_isr();
    1164:	f000 f952 	bl	140c <usb_isr>
		if (PIT_TFLG0) {
    1168:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    116c:	2b00      	cmp	r3, #0
    116e:	d0f9      	beq.n	1164 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    1170:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    1172:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    1176:	2c4f      	cmp	r4, #79	; 0x4f
    1178:	d9f4      	bls.n	1164 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    117a:	4b18      	ldr	r3, [pc, #96]	; (11dc <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    117c:	2002      	movs	r0, #2
    117e:	4918      	ldr	r1, [pc, #96]	; (11e0 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1180:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    1184:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1188:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    118a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    118e:	b93b      	cbnz	r3, 11a0 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    1190:	4814      	ldr	r0, [pc, #80]	; (11e4 <unused_interrupt_vector+0x180>)
    1192:	4915      	ldr	r1, [pc, #84]	; (11e8 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1194:	4a0d      	ldr	r2, [pc, #52]	; (11cc <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    1196:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1198:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    119c:	2b00      	cmp	r3, #0
    119e:	d0fa      	beq.n	1196 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    11a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    11a4:	4a11      	ldr	r2, [pc, #68]	; (11ec <unused_interrupt_vector+0x188>)
    11a6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    11aa:	e7fe      	b.n	11aa <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    11ac:	f7ff fccc 	bl	b48 <set_arm_clock>
    11b0:	e7be      	b.n	1130 <unused_interrupt_vector+0xcc>
    11b2:	bf00      	nop
    11b4:	2027ff00 	.word	0x2027ff00
    11b8:	2027ff80 	.word	0x2027ff80
    11bc:	2027ffa8 	.word	0x2027ffa8
    11c0:	edb88320 	.word	0xedb88320
    11c4:	2027ffa0 	.word	0x2027ffa0
    11c8:	400fc000 	.word	0x400fc000
    11cc:	40084000 	.word	0x40084000
    11d0:	20000464 	.word	0x20000464
    11d4:	0bcd3d80 	.word	0x0bcd3d80
    11d8:	00249f00 	.word	0x00249f00
    11dc:	400d9000 	.word	0x400d9000
    11e0:	402e0000 	.word	0x402e0000
    11e4:	400f8000 	.word	0x400f8000
    11e8:	0bad00f1 	.word	0x0bad00f1
    11ec:	05fa0004 	.word	0x05fa0004

000011f0 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    11f0:	490a      	ldr	r1, [pc, #40]	; (121c <_sbrk+0x2c>)
    11f2:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    11f4:	b138      	cbz	r0, 1206 <_sbrk+0x16>
{
    11f6:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    11f8:	1813      	adds	r3, r2, r0
    11fa:	4809      	ldr	r0, [pc, #36]	; (1220 <_sbrk+0x30>)
    11fc:	4283      	cmp	r3, r0
    11fe:	d804      	bhi.n	120a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1200:	4610      	mov	r0, r2
                __brkval = prev + incr;
    1202:	600b      	str	r3, [r1, #0]
}
    1204:	bd08      	pop	{r3, pc}
    1206:	4610      	mov	r0, r2
    1208:	4770      	bx	lr
                        errno = ENOMEM;
    120a:	f001 fbf3 	bl	29f4 <__errno>
    120e:	230c      	movs	r3, #12
                        return (void *)-1;
    1210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    1214:	6003      	str	r3, [r0, #0]
}
    1216:	4610      	mov	r0, r2
    1218:	bd08      	pop	{r3, pc}
    121a:	bf00      	nop
    121c:	2000046c 	.word	0x2000046c
    1220:	20280000 	.word	0x20280000

00001224 <Panic_Temp_isr>:
  unused_interrupt_vector();
    1224:	f7ff bf1e 	b.w	1064 <unused_interrupt_vector>

00001228 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    1228:	4a12      	ldr	r2, [pc, #72]	; (1274 <tempmonGetTemp+0x4c>)
    122a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    122e:	075b      	lsls	r3, r3, #29
    1230:	d5fb      	bpl.n	122a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1232:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1236:	4810      	ldr	r0, [pc, #64]	; (1278 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1238:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    123c:	490f      	ldr	r1, [pc, #60]	; (127c <tempmonGetTemp+0x54>)
    123e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1242:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1246:	ed91 6a00 	vldr	s12, [r1]
    124a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    124e:	4a0c      	ldr	r2, [pc, #48]	; (1280 <tempmonGetTemp+0x58>)
    1250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1254:	4b0b      	ldr	r3, [pc, #44]	; (1284 <tempmonGetTemp+0x5c>)
    1256:	edd2 6a00 	vldr	s13, [r2]
    125a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    125e:	ed93 7a00 	vldr	s14, [r3]
    1262:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1266:	ee67 7a86 	vmul.f32	s15, s15, s12
    126a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    126e:	ee37 0a40 	vsub.f32	s0, s14, s0
    1272:	4770      	bx	lr
    1274:	400d8100 	.word	0x400d8100
    1278:	20002bb0 	.word	0x20002bb0
    127c:	20002bb8 	.word	0x20002bb8
    1280:	20002bbc 	.word	0x20002bbc
    1284:	20002bb4 	.word	0x20002bb4

00001288 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1288:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    128a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    128c:	b11b      	cbz	r3, 1296 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    128e:	6853      	ldr	r3, [r2, #4]
    1290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1294:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1296:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1298:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    129a:	b33c      	cbz	r4, 12ec <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    129c:	4b1a      	ldr	r3, [pc, #104]	; (1308 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    129e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    12a0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    12a4:	420c      	tst	r4, r1
    12a6:	d11d      	bne.n	12e4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    12a8:	4e18      	ldr	r6, [pc, #96]	; (130c <schedule_transfer+0x84>)
    12aa:	6877      	ldr	r7, [r6, #4]
    12ac:	e004      	b.n	12b8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    12ae:	6874      	ldr	r4, [r6, #4]
    12b0:	1be4      	subs	r4, r4, r7
    12b2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    12b6:	d20b      	bcs.n	12d0 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    12b8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    12bc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    12c0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    12c4:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    12c8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    12cc:	0464      	lsls	r4, r4, #17
    12ce:	d5ee      	bpl.n	12ae <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    12d0:	400d      	ands	r5, r1
    12d2:	d107      	bne.n	12e4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    12d4:	4c0c      	ldr	r4, [pc, #48]	; (1308 <schedule_transfer+0x80>)
		endpoint->status = 0;
    12d6:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    12da:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    12de:	430b      	orrs	r3, r1
    12e0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    12e4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    12e6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    12e8:	bcf0      	pop	{r4, r5, r6, r7}
    12ea:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    12ec:	4d06      	ldr	r5, [pc, #24]	; (1308 <schedule_transfer+0x80>)
	endpoint->status = 0;
    12ee:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    12f2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    12f6:	430b      	orrs	r3, r1
    12f8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    12fc:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    12fe:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1300:	b662      	cpsie	i
}
    1302:	bcf0      	pop	{r4, r5, r6, r7}
    1304:	4770      	bx	lr
    1306:	bf00      	nop
    1308:	402e0000 	.word	0x402e0000
    130c:	e0001000 	.word	0xe0001000

00001310 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1310:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1312:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    1314:	b19d      	cbz	r5, 133e <run_callbacks+0x2e>
    1316:	4606      	mov	r6, r0
    1318:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    131a:	2400      	movs	r4, #0
    131c:	e003      	b.n	1326 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    131e:	6812      	ldr	r2, [r2, #0]
		count++;
    1320:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    1322:	2a01      	cmp	r2, #1
    1324:	d00c      	beq.n	1340 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    1326:	6853      	ldr	r3, [r2, #4]
    1328:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    132c:	d0f7      	beq.n	131e <run_callbacks+0xe>
			ep->first_transfer = t;
    132e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1330:	b12c      	cbz	r4, 133e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    1332:	4628      	mov	r0, r5
		ep->callback_function(first);
    1334:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    1336:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    1338:	4798      	blx	r3
	while (count) {
    133a:	3c01      	subs	r4, #1
    133c:	d1f9      	bne.n	1332 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    133e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    1340:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    1344:	e7f4      	b.n	1330 <run_callbacks+0x20>
    1346:	bf00      	nop

00001348 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1348:	b430      	push	{r4, r5}
	if (len > 0) {
    134a:	b9d9      	cbnz	r1, 1384 <endpoint0_transmit.constprop.0+0x3c>
    134c:	4c1f      	ldr	r4, [pc, #124]	; (13cc <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    134e:	4b20      	ldr	r3, [pc, #128]	; (13d0 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    1350:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1352:	4a20      	ldr	r2, [pc, #128]	; (13d4 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    1354:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1356:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    135a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    135c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    135e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1362:	2480      	movs	r4, #128	; 0x80
    1364:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1366:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    136a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    136e:	481a      	ldr	r0, [pc, #104]	; (13d8 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    1370:	432b      	orrs	r3, r5
    1372:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1376:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    1378:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    137c:	2b00      	cmp	r3, #0
    137e:	d1fb      	bne.n	1378 <endpoint0_transmit.constprop.0+0x30>
}
    1380:	bc30      	pop	{r4, r5}
    1382:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1384:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    1386:	4b15      	ldr	r3, [pc, #84]	; (13dc <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1388:	4c10      	ldr	r4, [pc, #64]	; (13cc <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    138a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    138c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1390:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    1392:	4a10      	ldr	r2, [pc, #64]	; (13d4 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1394:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1396:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    139a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    139c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    139e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    13a2:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    13a4:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    13a6:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    13aa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    13ae:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    13b0:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    13b2:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    13b4:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    13b6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    13ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    13be:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    13c2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    13c6:	2b00      	cmp	r3, #0
    13c8:	d1fb      	bne.n	13c2 <endpoint0_transmit.constprop.0+0x7a>
    13ca:	e7c0      	b.n	134e <endpoint0_transmit.constprop.0+0x6>
    13cc:	20000000 	.word	0x20000000
    13d0:	20000ec0 	.word	0x20000ec0
    13d4:	402e0000 	.word	0x402e0000
    13d8:	20001bb4 	.word	0x20001bb4
    13dc:	20000ee0 	.word	0x20000ee0

000013e0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    13e0:	4908      	ldr	r1, [pc, #32]	; (1404 <usb_stop_sof_interrupts+0x24>)
    13e2:	2201      	movs	r2, #1
    13e4:	780b      	ldrb	r3, [r1, #0]
    13e6:	fa02 f000 	lsl.w	r0, r2, r0
    13ea:	ea23 0000 	bic.w	r0, r3, r0
    13ee:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    13f0:	b930      	cbnz	r0, 1400 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    13f2:	4a05      	ldr	r2, [pc, #20]	; (1408 <usb_stop_sof_interrupts+0x28>)
    13f4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    13f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    13fc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    1400:	4770      	bx	lr
    1402:	bf00      	nop
    1404:	20002bf3 	.word	0x20002bf3
    1408:	402e0000 	.word	0x402e0000

0000140c <usb_isr>:
{
    140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    1410:	4c97      	ldr	r4, [pc, #604]	; (1670 <usb_isr+0x264>)
{
    1412:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    1414:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1418:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    141a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    141e:	d553      	bpl.n	14c8 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1420:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1424:	2a00      	cmp	r2, #0
    1426:	d04a      	beq.n	14be <usb_isr+0xb2>
    1428:	4e92      	ldr	r6, [pc, #584]	; (1674 <usb_isr+0x268>)
    142a:	f8df a260 	ldr.w	sl, [pc, #608]	; 168c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    142e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 16a4 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1432:	f8df b274 	ldr.w	fp, [pc, #628]	; 16a8 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1436:	f8df 8274 	ldr.w	r8, [pc, #628]	; 16ac <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    143a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    143e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1442:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1446:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    144a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    144e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1452:	049d      	lsls	r5, r3, #18
    1454:	d5f5      	bpl.n	1442 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1456:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    145a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    145e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1462:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1466:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    146a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    146e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    1472:	d1fa      	bne.n	146a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    1474:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    1476:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    1478:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    147c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    1480:	f000 81cf 	beq.w	1822 <usb_isr+0x416>
    1484:	f200 80db 	bhi.w	163e <usb_isr+0x232>
    1488:	f240 3102 	movw	r1, #770	; 0x302
    148c:	428b      	cmp	r3, r1
    148e:	f000 81e7 	beq.w	1860 <usb_isr+0x454>
    1492:	f200 809a 	bhi.w	15ca <usb_isr+0x1be>
    1496:	2b82      	cmp	r3, #130	; 0x82
    1498:	f000 81cb 	beq.w	1832 <usb_isr+0x426>
    149c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    14a0:	f040 808a 	bne.w	15b8 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    14a4:	f010 0f78 	tst.w	r0, #120	; 0x78
    14a8:	b283      	uxth	r3, r0
    14aa:	f000 8203 	beq.w	18b4 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    14ae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    14b2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14b6:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    14ba:	2a00      	cmp	r2, #0
    14bc:	d1bd      	bne.n	143a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    14be:	4a6c      	ldr	r2, [pc, #432]	; (1670 <usb_isr+0x264>)
    14c0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    14c4:	2b00      	cmp	r3, #0
    14c6:	d142      	bne.n	154e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    14c8:	067e      	lsls	r6, r7, #25
    14ca:	d516      	bpl.n	14fa <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    14cc:	4b68      	ldr	r3, [pc, #416]	; (1670 <usb_isr+0x264>)
    14ce:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    14d2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    14d6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    14da:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    14de:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    14e2:	2c00      	cmp	r4, #0
    14e4:	d1fb      	bne.n	14de <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    14e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    14ea:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    14ee:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    14f2:	f000 fd1d 	bl	1f30 <usb_serial_reset>
		endpointN_notify_mask = 0;
    14f6:	4b60      	ldr	r3, [pc, #384]	; (1678 <usb_isr+0x26c>)
    14f8:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    14fa:	01fc      	lsls	r4, r7, #7
    14fc:	d503      	bpl.n	1506 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    14fe:	4b5f      	ldr	r3, [pc, #380]	; (167c <usb_isr+0x270>)
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	b103      	cbz	r3, 1506 <usb_isr+0xfa>
    1504:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    1506:	01b8      	lsls	r0, r7, #6
    1508:	d503      	bpl.n	1512 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    150a:	4b5d      	ldr	r3, [pc, #372]	; (1680 <usb_isr+0x274>)
    150c:	681b      	ldr	r3, [r3, #0]
    150e:	b103      	cbz	r3, 1512 <usb_isr+0x106>
    1510:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    1512:	0779      	lsls	r1, r7, #29
    1514:	d508      	bpl.n	1528 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1516:	4b56      	ldr	r3, [pc, #344]	; (1670 <usb_isr+0x264>)
    1518:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    151c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1520:	d047      	beq.n	15b2 <usb_isr+0x1a6>
			usb_high_speed = 1;
    1522:	4b58      	ldr	r3, [pc, #352]	; (1684 <usb_isr+0x278>)
    1524:	2201      	movs	r2, #1
    1526:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1528:	4b51      	ldr	r3, [pc, #324]	; (1670 <usb_isr+0x264>)
    152a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    152e:	061a      	lsls	r2, r3, #24
    1530:	d50a      	bpl.n	1548 <usb_isr+0x13c>
    1532:	063b      	lsls	r3, r7, #24
    1534:	d508      	bpl.n	1548 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    1536:	4a54      	ldr	r2, [pc, #336]	; (1688 <usb_isr+0x27c>)
    1538:	7813      	ldrb	r3, [r2, #0]
    153a:	b12b      	cbz	r3, 1548 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    153c:	3b01      	subs	r3, #1
    153e:	b2db      	uxtb	r3, r3
    1540:	7013      	strb	r3, [r2, #0]
    1542:	2b00      	cmp	r3, #0
    1544:	f000 8272 	beq.w	1a2c <usb_isr+0x620>
}
    1548:	b003      	add	sp, #12
    154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    154e:	494f      	ldr	r1, [pc, #316]	; (168c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    1550:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    1554:	6808      	ldr	r0, [r1, #0]
    1556:	4203      	tst	r3, r0
    1558:	f040 81d1 	bne.w	18fe <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    155c:	4a46      	ldr	r2, [pc, #280]	; (1678 <usb_isr+0x26c>)
    155e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    1560:	401c      	ands	r4, r3
    1562:	d0b1      	beq.n	14c8 <usb_isr+0xbc>
				while (tx) {
    1564:	ea5f 4814 	movs.w	r8, r4, lsr #16
    1568:	d010      	beq.n	158c <usb_isr+0x180>
    156a:	4e42      	ldr	r6, [pc, #264]	; (1674 <usb_isr+0x268>)
					tx &= ~(1<<p);
    156c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    1570:	fa98 f5a8 	rbit	r5, r8
    1574:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1578:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    157c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1580:	3040      	adds	r0, #64	; 0x40
    1582:	f7ff fec5 	bl	1310 <run_callbacks>
				while (tx) {
    1586:	ea38 0805 	bics.w	r8, r8, r5
    158a:	d1f1      	bne.n	1570 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    158c:	b2a4      	uxth	r4, r4
				while(rx) {
    158e:	2c00      	cmp	r4, #0
    1590:	d09a      	beq.n	14c8 <usb_isr+0xbc>
    1592:	4e38      	ldr	r6, [pc, #224]	; (1674 <usb_isr+0x268>)
					rx &= ~(1<<p);
    1594:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    1598:	fa94 f5a4 	rbit	r5, r4
    159c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    15a0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    15a4:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    15a8:	f7ff feb2 	bl	1310 <run_callbacks>
				while(rx) {
    15ac:	43ac      	bics	r4, r5
    15ae:	d1f3      	bne.n	1598 <usb_isr+0x18c>
    15b0:	e78a      	b.n	14c8 <usb_isr+0xbc>
			usb_high_speed = 0;
    15b2:	4a34      	ldr	r2, [pc, #208]	; (1684 <usb_isr+0x278>)
    15b4:	7013      	strb	r3, [r2, #0]
    15b6:	e7b7      	b.n	1528 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    15b8:	2b80      	cmp	r3, #128	; 0x80
    15ba:	f47f af78 	bne.w	14ae <usb_isr+0xa2>
		reply_buffer[0] = 0;
    15be:	4834      	ldr	r0, [pc, #208]	; (1690 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    15c0:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    15c2:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    15c4:	f7ff fec0 	bl	1348 <endpoint0_transmit.constprop.0>
		return;
    15c8:	e775      	b.n	14b6 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    15ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    15ce:	f000 810b 	beq.w	17e8 <usb_isr+0x3dc>
    15d2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    15d6:	2b01      	cmp	r3, #1
    15d8:	f63f af69 	bhi.w	14ae <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    15dc:	4b2d      	ldr	r3, [pc, #180]	; (1694 <usb_isr+0x288>)
    15de:	685d      	ldr	r5, [r3, #4]
    15e0:	2d00      	cmp	r5, #0
    15e2:	f43f af64 	beq.w	14ae <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    15e6:	fa1f fc8c 	uxth.w	ip, ip
    15ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    15ee:	e004      	b.n	15fa <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    15f0:	691d      	ldr	r5, [r3, #16]
    15f2:	330c      	adds	r3, #12
    15f4:	2d00      	cmp	r5, #0
    15f6:	f43f af5a 	beq.w	14ae <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    15fa:	881a      	ldrh	r2, [r3, #0]
    15fc:	4572      	cmp	r2, lr
    15fe:	d1f7      	bne.n	15f0 <usb_isr+0x1e4>
    1600:	885a      	ldrh	r2, [r3, #2]
    1602:	4562      	cmp	r2, ip
    1604:	d1f4      	bne.n	15f0 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    1606:	ea4f 221e 	mov.w	r2, lr, lsr #8
    160a:	2a03      	cmp	r2, #3
    160c:	f000 81a5 	beq.w	195a <usb_isr+0x54e>
					datalen = list->length;
    1610:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    1612:	0c00      	lsrs	r0, r0, #16
    1614:	4282      	cmp	r2, r0
    1616:	bf28      	it	cs
    1618:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    161a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    161e:	f040 81a1 	bne.w	1964 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    1622:	4b18      	ldr	r3, [pc, #96]	; (1684 <usb_isr+0x278>)
    1624:	491c      	ldr	r1, [pc, #112]	; (1698 <usb_isr+0x28c>)
    1626:	7818      	ldrb	r0, [r3, #0]
    1628:	4b1c      	ldr	r3, [pc, #112]	; (169c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    162a:	9201      	str	r2, [sp, #4]
    162c:	2800      	cmp	r0, #0
    162e:	bf18      	it	ne
    1630:	4619      	movne	r1, r3
    1632:	481b      	ldr	r0, [pc, #108]	; (16a0 <usb_isr+0x294>)
    1634:	f000 fdcc 	bl	21d0 <memcpy>
    1638:	4d19      	ldr	r5, [pc, #100]	; (16a0 <usb_isr+0x294>)
    163a:	9a01      	ldr	r2, [sp, #4]
    163c:	e1e1      	b.n	1a02 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    163e:	f242 2121 	movw	r1, #8737	; 0x2221
    1642:	428b      	cmp	r3, r1
    1644:	d07c      	beq.n	1740 <usb_isr+0x334>
    1646:	d933      	bls.n	16b0 <usb_isr+0x2a4>
    1648:	f242 3121 	movw	r1, #8993	; 0x2321
    164c:	428b      	cmp	r3, r1
    164e:	f000 8081 	beq.w	1754 <usb_isr+0x348>
    1652:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    1656:	428b      	cmp	r3, r1
    1658:	f47f af29 	bne.w	14ae <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    165c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    1660:	b283      	uxth	r3, r0
    1662:	f47f af24 	bne.w	14ae <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    1666:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    166a:	f363 0c0f 	bfi	ip, r3, #0, #16
    166e:	e7b5      	b.n	15dc <usb_isr+0x1d0>
    1670:	402e0000 	.word	0x402e0000
    1674:	20000000 	.word	0x20000000
    1678:	20001bb8 	.word	0x20001bb8
    167c:	20002bdc 	.word	0x20002bdc
    1680:	20002be0 	.word	0x20002be0
    1684:	20002bf9 	.word	0x20002bf9
    1688:	20002bfa 	.word	0x20002bfa
    168c:	20001bb4 	.word	0x20001bb4
    1690:	20002b78 	.word	0x20002b78
    1694:	200002b8 	.word	0x200002b8
    1698:	60001b2c 	.word	0x60001b2c
    169c:	60001b90 	.word	0x60001b90
    16a0:	20200000 	.word	0x20200000
    16a4:	20001bac 	.word	0x20001bac
    16a8:	b8c6cf5d 	.word	0xb8c6cf5d
    16ac:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    16b0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    16b4:	d066      	beq.n	1784 <usb_isr+0x378>
    16b6:	f242 0121 	movw	r1, #8225	; 0x2021
    16ba:	428b      	cmp	r3, r1
    16bc:	f47f aef7 	bne.w	14ae <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    16c0:	0c03      	lsrs	r3, r0, #16
    16c2:	2b07      	cmp	r3, #7
    16c4:	f47f aef3 	bne.w	14ae <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    16c8:	4bb2      	ldr	r3, [pc, #712]	; (1994 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    16ca:	49b3      	ldr	r1, [pc, #716]	; (1998 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    16cc:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    16ce:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    16d0:	49b2      	ldr	r1, [pc, #712]	; (199c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    16d2:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    16d4:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    16d8:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    16dc:	2201      	movs	r2, #1
    16de:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    16e0:	4aaf      	ldr	r2, [pc, #700]	; (19a0 <usb_isr+0x594>)
    16e2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    16e4:	4aaf      	ldr	r2, [pc, #700]	; (19a4 <usb_isr+0x598>)
    16e6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    16e8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    16ec:	f041 0101 	orr.w	r1, r1, #1
    16f0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    16f4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    16f8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    16fc:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    16fe:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    1700:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1704:	2b00      	cmp	r3, #0
    1706:	d1fb      	bne.n	1700 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1708:	4aa7      	ldr	r2, [pc, #668]	; (19a8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    170a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    170c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    170e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1710:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1712:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1714:	f248 0380 	movw	r3, #32896	; 0x8080
    1718:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    171a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    171e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1722:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    172a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    172e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1732:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    1736:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    173a:	2b00      	cmp	r3, #0
    173c:	d1fb      	bne.n	1736 <usb_isr+0x32a>
    173e:	e6ba      	b.n	14b6 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1740:	b280      	uxth	r0, r0
    1742:	b938      	cbnz	r0, 1754 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1744:	4b99      	ldr	r3, [pc, #612]	; (19ac <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1746:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    174a:	6819      	ldr	r1, [r3, #0]
    174c:	4b98      	ldr	r3, [pc, #608]	; (19b0 <usb_isr+0x5a4>)
    174e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1750:	4b98      	ldr	r3, [pc, #608]	; (19b4 <usb_isr+0x5a8>)
    1752:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    1754:	4b94      	ldr	r3, [pc, #592]	; (19a8 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    1756:	2200      	movs	r2, #0
    1758:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    175a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    175c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    175e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1760:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1762:	2280      	movs	r2, #128	; 0x80
    1764:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1766:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    176a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    176e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1776:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    177a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    177e:	2b00      	cmp	r3, #0
    1780:	d1fb      	bne.n	177a <usb_isr+0x36e>
    1782:	e698      	b.n	14b6 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    1784:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1788:	4b8b      	ldr	r3, [pc, #556]	; (19b8 <usb_isr+0x5ac>)
    178a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    178c:	4b8b      	ldr	r3, [pc, #556]	; (19bc <usb_isr+0x5b0>)
    178e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1792:	4b8b      	ldr	r3, [pc, #556]	; (19c0 <usb_isr+0x5b4>)
    1794:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1798:	4b8a      	ldr	r3, [pc, #552]	; (19c4 <usb_isr+0x5b8>)
    179a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    179e:	f000 fbc9 	bl	1f34 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    17a2:	2280      	movs	r2, #128	; 0x80
    17a4:	4629      	mov	r1, r5
    17a6:	4888      	ldr	r0, [pc, #544]	; (19c8 <usb_isr+0x5bc>)
    17a8:	f001 f8ba 	bl	2920 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    17ac:	4b87      	ldr	r3, [pc, #540]	; (19cc <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17ae:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    17b0:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    17b4:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    17b8:	4b7b      	ldr	r3, [pc, #492]	; (19a8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    17ba:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17bc:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    17be:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    17c0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    17c2:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    17c4:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17c6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    17ca:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    17ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    17d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    17d6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    17da:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    17de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    17e2:	2b00      	cmp	r3, #0
    17e4:	d1fb      	bne.n	17de <usb_isr+0x3d2>
    17e6:	e666      	b.n	14b6 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    17e8:	4b6f      	ldr	r3, [pc, #444]	; (19a8 <usb_isr+0x59c>)
    17ea:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    17ec:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    17ee:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17f0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    17f2:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    17f4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17f6:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    17fc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1800:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1808:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    180c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1810:	2b00      	cmp	r3, #0
    1812:	d1fb      	bne.n	180c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1814:	0c13      	lsrs	r3, r2, #16
    1816:	065b      	lsls	r3, r3, #25
    1818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    181c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    1820:	e649      	b.n	14b6 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    1822:	4b65      	ldr	r3, [pc, #404]	; (19b8 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1824:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    1826:	486a      	ldr	r0, [pc, #424]	; (19d0 <usb_isr+0x5c4>)
    1828:	781b      	ldrb	r3, [r3, #0]
    182a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    182c:	f7ff fd8c 	bl	1348 <endpoint0_transmit.constprop.0>
		return;
    1830:	e641      	b.n	14b6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1832:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    1834:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    1838:	f47f ae39 	bne.w	14ae <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    183c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1840:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    1844:	4a62      	ldr	r2, [pc, #392]	; (19d0 <usb_isr+0x5c4>)
    1846:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1848:	0618      	lsls	r0, r3, #24
    184a:	f100 809e 	bmi.w	198a <usb_isr+0x57e>
    184e:	07cb      	lsls	r3, r1, #31
    1850:	d501      	bpl.n	1856 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    1852:	2301      	movs	r3, #1
    1854:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1856:	2102      	movs	r1, #2
    1858:	485d      	ldr	r0, [pc, #372]	; (19d0 <usb_isr+0x5c4>)
    185a:	f7ff fd75 	bl	1348 <endpoint0_transmit.constprop.0>
		return;
    185e:	e62a      	b.n	14b6 <usb_isr+0xaa>
		if (endpoint > 7) break;
    1860:	f010 0f78 	tst.w	r0, #120	; 0x78
    1864:	b283      	uxth	r3, r0
    1866:	f47f ae22 	bne.w	14ae <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    186a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    186e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1872:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1876:	bf14      	ite	ne
    1878:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    187c:	f043 0301 	orreq.w	r3, r3, #1
    1880:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1884:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1886:	4b48      	ldr	r3, [pc, #288]	; (19a8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1888:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    188a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    188c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    188e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1890:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1892:	2280      	movs	r2, #128	; 0x80
    1894:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1896:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    189a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    189e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    18a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    18a6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    18aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    18ae:	2b00      	cmp	r3, #0
    18b0:	d1fb      	bne.n	18aa <usb_isr+0x49e>
    18b2:	e600      	b.n	14b6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    18b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    18b8:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    18bc:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    18c0:	bf14      	ite	ne
    18c2:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    18c6:	f023 0301 	biceq.w	r3, r3, #1
    18ca:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    18ce:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    18d0:	4b35      	ldr	r3, [pc, #212]	; (19a8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    18d2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    18d4:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    18d6:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    18d8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    18da:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    18dc:	2280      	movs	r2, #128	; 0x80
    18de:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    18e0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    18e4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    18e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    18ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    18f0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    18f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    18f8:	2b00      	cmp	r3, #0
    18fa:	d1fb      	bne.n	18f4 <usb_isr+0x4e8>
    18fc:	e5db      	b.n	14b6 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    18fe:	2000      	movs	r0, #0
    1900:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1902:	4926      	ldr	r1, [pc, #152]	; (199c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1904:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1906:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1908:	f242 0121 	movw	r1, #8225	; 0x2021
    190c:	428c      	cmp	r4, r1
    190e:	f47f ae25 	bne.w	155c <usb_isr+0x150>
    1912:	b280      	uxth	r0, r0
    1914:	2800      	cmp	r0, #0
    1916:	f47f ae21 	bne.w	155c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    191a:	492e      	ldr	r1, [pc, #184]	; (19d4 <usb_isr+0x5c8>)
    191c:	4c2e      	ldr	r4, [pc, #184]	; (19d8 <usb_isr+0x5cc>)
    191e:	c903      	ldmia	r1, {r0, r1}
    1920:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    1922:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1924:	ea4f 4111 	mov.w	r1, r1, lsr #16
    1928:	6020      	str	r0, [r4, #0]
    192a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    192c:	f47f ae16 	bne.w	155c <usb_isr+0x150>
	__disable_irq();
    1930:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1932:	482a      	ldr	r0, [pc, #168]	; (19dc <usb_isr+0x5d0>)
    1934:	7801      	ldrb	r1, [r0, #0]
    1936:	f041 0108 	orr.w	r1, r1, #8
    193a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    193c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1940:	060d      	lsls	r5, r1, #24
    1942:	d405      	bmi.n	1950 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1944:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1946:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1948:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    194c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    1950:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1952:	4a23      	ldr	r2, [pc, #140]	; (19e0 <usb_isr+0x5d4>)
    1954:	2150      	movs	r1, #80	; 0x50
    1956:	7011      	strb	r1, [r2, #0]
    1958:	e600      	b.n	155c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    195a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    195c:	782a      	ldrb	r2, [r5, #0]
    195e:	4282      	cmp	r2, r0
    1960:	bf28      	it	cs
    1962:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    1964:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    1968:	d144      	bne.n	19f4 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    196a:	4b1e      	ldr	r3, [pc, #120]	; (19e4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    196c:	4d1e      	ldr	r5, [pc, #120]	; (19e8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    196e:	7818      	ldrb	r0, [r3, #0]
    1970:	491e      	ldr	r1, [pc, #120]	; (19ec <usb_isr+0x5e0>)
    1972:	4b1f      	ldr	r3, [pc, #124]	; (19f0 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1974:	9201      	str	r2, [sp, #4]
    1976:	2800      	cmp	r0, #0
    1978:	bf18      	it	ne
    197a:	4619      	movne	r1, r3
    197c:	4628      	mov	r0, r5
    197e:	f000 fc27 	bl	21d0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1982:	2307      	movs	r3, #7
    1984:	706b      	strb	r3, [r5, #1]
    1986:	9a01      	ldr	r2, [sp, #4]
    1988:	e03b      	b.n	1a02 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    198a:	03c9      	lsls	r1, r1, #15
    198c:	f53f af61 	bmi.w	1852 <usb_isr+0x446>
    1990:	e761      	b.n	1856 <usb_isr+0x44a>
    1992:	bf00      	nop
    1994:	20000ee0 	.word	0x20000ee0
    1998:	20002bac 	.word	0x20002bac
    199c:	20001080 	.word	0x20001080
    19a0:	00070080 	.word	0x00070080
    19a4:	20003bac 	.word	0x20003bac
    19a8:	20000ec0 	.word	0x20000ec0
    19ac:	20002bc8 	.word	0x20002bc8
    19b0:	20002bd8 	.word	0x20002bd8
    19b4:	20002bf7 	.word	0x20002bf7
    19b8:	20002bf8 	.word	0x20002bf8
    19bc:	00cc0002 	.word	0x00cc0002
    19c0:	000200c8 	.word	0x000200c8
    19c4:	00c80002 	.word	0x00c80002
    19c8:	20000080 	.word	0x20000080
    19cc:	74d59319 	.word	0x74d59319
    19d0:	20002b78 	.word	0x20002b78
    19d4:	20001bac 	.word	0x20001bac
    19d8:	20002bd0 	.word	0x20002bd0
    19dc:	20002bf3 	.word	0x20002bf3
    19e0:	20002bfa 	.word	0x20002bfa
    19e4:	20002bf9 	.word	0x20002bf9
    19e8:	20200000 	.word	0x20200000
    19ec:	60001b90 	.word	0x60001b90
    19f0:	60001b2c 	.word	0x60001b2c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    19f4:	4629      	mov	r1, r5
    19f6:	4d10      	ldr	r5, [pc, #64]	; (1a38 <usb_isr+0x62c>)
    19f8:	9201      	str	r2, [sp, #4]
    19fa:	4628      	mov	r0, r5
    19fc:	f000 fbe8 	bl	21d0 <memcpy>
    1a00:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1a02:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1a06:	4415      	add	r5, r2
	asm("dsb");
    1a08:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1a0c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a10:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    1a14:	3320      	adds	r3, #32
	} while (location < end_addr);
    1a16:	429d      	cmp	r5, r3
    1a18:	d8fa      	bhi.n	1a10 <usb_isr+0x604>
	asm("dsb");
    1a1a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a1e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1a22:	4805      	ldr	r0, [pc, #20]	; (1a38 <usb_isr+0x62c>)
    1a24:	4611      	mov	r1, r2
    1a26:	f7ff fc8f 	bl	1348 <endpoint0_transmit.constprop.0>
				return;
    1a2a:	e544      	b.n	14b6 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    1a2c:	2003      	movs	r0, #3
    1a2e:	f7ff fcd7 	bl	13e0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    1a32:	f001 f9ad 	bl	2d90 <___reboot_Teensyduino__veneer>
    1a36:	bf00      	nop
    1a38:	20200000 	.word	0x20200000

00001a3c <usb_config_rx>:
{
    1a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a40:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a42:	1e83      	subs	r3, r0, #2
    1a44:	2b02      	cmp	r3, #2
    1a46:	d901      	bls.n	1a4c <usb_config_rx+0x10>
}
    1a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1a4c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1a9c <usb_config_rx+0x60>
    1a50:	4615      	mov	r5, r2
    1a52:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    1a54:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1a56:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    1a5a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1a5c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    1a60:	2100      	movs	r1, #0
    1a62:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a66:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    1a68:	f000 ff5a 	bl	2920 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a6c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    1a70:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a72:	0952      	lsrs	r2, r2, #5
    1a74:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    1a78:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    1a7c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1a80:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    1a84:	2f00      	cmp	r7, #0
    1a86:	d0df      	beq.n	1a48 <usb_config_rx+0xc>
    1a88:	4a03      	ldr	r2, [pc, #12]	; (1a98 <usb_config_rx+0x5c>)
    1a8a:	40b3      	lsls	r3, r6
    1a8c:	6811      	ldr	r1, [r2, #0]
    1a8e:	430b      	orrs	r3, r1
    1a90:	6013      	str	r3, [r2, #0]
}
    1a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a96:	bf00      	nop
    1a98:	20001bb8 	.word	0x20001bb8
    1a9c:	20000000 	.word	0x20000000

00001aa0 <usb_config_tx>:
{
    1aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1aa4:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1aa6:	1e81      	subs	r1, r0, #2
    1aa8:	2902      	cmp	r1, #2
    1aaa:	d901      	bls.n	1ab0 <usb_config_tx+0x10>
}
    1aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1ab0:	01c7      	lsls	r7, r0, #7
    1ab2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1b00 <usb_config_tx+0x60>
    1ab6:	4692      	mov	sl, r2
    1ab8:	4604      	mov	r4, r0
    1aba:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    1abc:	223c      	movs	r2, #60	; 0x3c
    1abe:	2100      	movs	r1, #0
    1ac0:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1ac2:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ac6:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1ac8:	f108 0004 	add.w	r0, r8, #4
    1acc:	f000 ff28 	bl	2920 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ad0:	faba f28a 	clz	r2, sl
    1ad4:	0952      	lsrs	r2, r2, #5
    1ad6:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    1ada:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    1ade:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1ae0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1ae4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1ae8:	2e00      	cmp	r6, #0
    1aea:	d0df      	beq.n	1aac <usb_config_tx+0xc>
    1aec:	4b03      	ldr	r3, [pc, #12]	; (1afc <usb_config_tx+0x5c>)
    1aee:	3410      	adds	r4, #16
    1af0:	6819      	ldr	r1, [r3, #0]
    1af2:	40a2      	lsls	r2, r4
    1af4:	430a      	orrs	r2, r1
    1af6:	601a      	str	r2, [r3, #0]
}
    1af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1afc:	20001bb8 	.word	0x20001bb8
    1b00:	20000000 	.word	0x20000000

00001b04 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    1b04:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    1b06:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1b08:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    1b0a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    1b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    1b12:	b410      	push	{r4}
	transfer->next = 1;
    1b14:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    1b16:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    1b18:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    1b1c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    1b1e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    1b22:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    1b26:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    1b28:	6181      	str	r1, [r0, #24]
}
    1b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    1b2e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    1b32:	4770      	bx	lr

00001b34 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b34:	1e83      	subs	r3, r0, #2
{
    1b36:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b38:	2b02      	cmp	r3, #2
    1b3a:	d900      	bls.n	1b3e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    1b3c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1b3e:	4b06      	ldr	r3, [pc, #24]	; (1b58 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    1b40:	f100 0110 	add.w	r1, r0, #16
    1b44:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1b48:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    1b4c:	fa0c f101 	lsl.w	r1, ip, r1
    1b50:	3040      	adds	r0, #64	; 0x40
    1b52:	f7ff bb99 	b.w	1288 <schedule_transfer>
    1b56:	bf00      	nop
    1b58:	20000000 	.word	0x20000000

00001b5c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b5c:	1e83      	subs	r3, r0, #2
{
    1b5e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b60:	2b02      	cmp	r3, #2
    1b62:	d900      	bls.n	1b66 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    1b64:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    1b66:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    1b68:	4b02      	ldr	r3, [pc, #8]	; (1b74 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    1b6a:	4081      	lsls	r1, r0
    1b6c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1b70:	f7ff bb8a 	b.w	1288 <schedule_transfer>
    1b74:	20000000 	.word	0x20000000

00001b78 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1b78:	6840      	ldr	r0, [r0, #4]
#endif
}
    1b7a:	4770      	bx	lr

00001b7c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1b7c:	4a12      	ldr	r2, [pc, #72]	; (1bc8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1b7e:	4b13      	ldr	r3, [pc, #76]	; (1bcc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1b80:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1b84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    1b88:	4298      	cmp	r0, r3
{
    1b8a:	b510      	push	{r4, lr}
    1b8c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    1b8e:	d202      	bcs.n	1b96 <usb_init_serialnumber+0x1a>
    1b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1b94:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    1b96:	4c0e      	ldr	r4, [pc, #56]	; (1bd0 <usb_init_serialnumber+0x54>)
    1b98:	a901      	add	r1, sp, #4
    1b9a:	220a      	movs	r2, #10
    1b9c:	f000 fbb2 	bl	2304 <ultoa>
	for (i=0; i<10; i++) {
    1ba0:	a901      	add	r1, sp, #4
    1ba2:	2300      	movs	r3, #0
    1ba4:	4620      	mov	r0, r4
		char c = buf[i];
    1ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    1baa:	3301      	adds	r3, #1
		if (!c) break;
    1bac:	b13a      	cbz	r2, 1bbe <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    1bae:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    1bb0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    1bb4:	d1f7      	bne.n	1ba6 <usb_init_serialnumber+0x2a>
    1bb6:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1bb8:	7023      	strb	r3, [r4, #0]
}
    1bba:	b004      	add	sp, #16
    1bbc:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1bbe:	005b      	lsls	r3, r3, #1
    1bc0:	b2db      	uxtb	r3, r3
    1bc2:	7023      	strb	r3, [r4, #0]
}
    1bc4:	b004      	add	sp, #16
    1bc6:	bd10      	pop	{r4, pc}
    1bc8:	401f4400 	.word	0x401f4400
    1bcc:	00989680 	.word	0x00989680
    1bd0:	200008d8 	.word	0x200008d8

00001bd4 <rx_queue_transfer>:
{
    1bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1bd6:	4c14      	ldr	r4, [pc, #80]	; (1c28 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1bd8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1bdc:	4e13      	ldr	r6, [pc, #76]	; (1c2c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1be2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1be6:	4f12      	ldr	r7, [pc, #72]	; (1c30 <rx_queue_transfer+0x5c>)
    1be8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    1bec:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1bee:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1bf2:	4621      	mov	r1, r4
    1bf4:	883a      	ldrh	r2, [r7, #0]
    1bf6:	4630      	mov	r0, r6
    1bf8:	f7ff ff84 	bl	1b04 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    1bfc:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    1bfe:	4423      	add	r3, r4
	asm("dsb");
    1c00:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    1c04:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    1c08:	3420      	adds	r4, #32
	} while (location < end_addr);
    1c0a:	42a3      	cmp	r3, r4
    1c0c:	d8fa      	bhi.n	1c04 <rx_queue_transfer+0x30>
	asm("dsb");
    1c0e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1c12:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1c16:	2003      	movs	r0, #3
    1c18:	4631      	mov	r1, r6
    1c1a:	f7ff ff9f 	bl	1b5c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1c22:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    1c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c28:	20200080 	.word	0x20200080
    1c2c:	20000f00 	.word	0x20000f00
    1c30:	20002be6 	.word	0x20002be6

00001c34 <rx_event>:
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1c34:	4b24      	ldr	r3, [pc, #144]	; (1cc8 <rx_event+0x94>)
{
    1c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1c3a:	881c      	ldrh	r4, [r3, #0]
    1c3c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    1c3e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1c40:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1c44:	1ae4      	subs	r4, r4, r3
	if (len > 0) {
    1c46:	2c00      	cmp	r4, #0
    1c48:	dd24      	ble.n	1c94 <rx_event+0x60>
		uint32_t head = rx_head;
    1c4a:	4920      	ldr	r1, [pc, #128]	; (1ccc <rx_event+0x98>)
		if (head != rx_tail) {
    1c4c:	4820      	ldr	r0, [pc, #128]	; (1cd0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    1c4e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    1c50:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    1c52:	b2d3      	uxtb	r3, r2
			uint32_t count = rx_count[ii];
    1c54:	4e1f      	ldr	r6, [pc, #124]	; (1cd4 <rx_event+0xa0>)
		if (head != rx_tail) {
    1c56:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    1c58:	481f      	ldr	r0, [pc, #124]	; (1cd8 <rx_event+0xa4>)
		if (head != rx_tail) {
    1c5a:	d007      	beq.n	1c6c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    1c5c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1c60:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1c64:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1c68:	4294      	cmp	r4, r2
    1c6a:	d918      	bls.n	1c9e <rx_event+0x6a>
		if (++head > RX_NUM) head = 0;
    1c6c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    1c6e:	2200      	movs	r2, #0
		rx_count[i] = len;
    1c70:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    1c74:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    1c76:	4e19      	ldr	r6, [pc, #100]	; (1cdc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1c78:	bf88      	it	hi
    1c7a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    1c7c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_head = head;
    1c80:	bf98      	it	ls
    1c82:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    1c84:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    1c86:	4b16      	ldr	r3, [pc, #88]	; (1ce0 <rx_event+0xac>)
		rx_head = head;
    1c88:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    1c8a:	681a      	ldr	r2, [r3, #0]
    1c8c:	4414      	add	r4, r2
    1c8e:	601c      	str	r4, [r3, #0]
}
    1c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    1c94:	4628      	mov	r0, r5
}
    1c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    1c9a:	f7ff bf9b 	b.w	1bd4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1c9e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1ca2:	4910      	ldr	r1, [pc, #64]	; (1ce4 <rx_event+0xb0>)
    1ca4:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    1ca6:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1ca8:	4408      	add	r0, r1
    1caa:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    1cae:	f000 fa8f 	bl	21d0 <memcpy>
				rx_available += len;
    1cb2:	4a0b      	ldr	r2, [pc, #44]	; (1ce0 <rx_event+0xac>)
				rx_queue_transfer(i);
    1cb4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    1cb6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1cba:	6813      	ldr	r3, [r2, #0]
    1cbc:	4423      	add	r3, r4
}
    1cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    1cc2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    1cc4:	f7ff bf86 	b.w	1bd4 <rx_queue_transfer>
    1cc8:	20002be6 	.word	0x20002be6
    1ccc:	20002bf1 	.word	0x20002bf1
    1cd0:	20002bf2 	.word	0x20002bf2
    1cd4:	20002b84 	.word	0x20002b84
    1cd8:	20002ba4 	.word	0x20002ba4
    1cdc:	20002b94 	.word	0x20002b94
    1ce0:	20002b80 	.word	0x20002b80
    1ce4:	20200080 	.word	0x20200080

00001ce8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1ce8:	4b1d      	ldr	r3, [pc, #116]	; (1d60 <usb_serial_flush_callback+0x78>)
    1cea:	781a      	ldrb	r2, [r3, #0]
    1cec:	2a00      	cmp	r2, #0
    1cee:	d136      	bne.n	1d5e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    1cf0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    1cf4:	4a1b      	ldr	r2, [pc, #108]	; (1d64 <usb_serial_flush_callback+0x7c>)
    1cf6:	7812      	ldrb	r2, [r2, #0]
    1cf8:	b38a      	cbz	r2, 1d5e <usb_serial_flush_callback+0x76>
{
    1cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    1cfe:	4d1a      	ldr	r5, [pc, #104]	; (1d68 <usb_serial_flush_callback+0x80>)
    1d00:	882a      	ldrh	r2, [r5, #0]
    1d02:	b352      	cbz	r2, 1d5a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1d04:	4e19      	ldr	r6, [pc, #100]	; (1d6c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1d06:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    1d0a:	4f19      	ldr	r7, [pc, #100]	; (1d70 <usb_serial_flush_callback+0x88>)
    1d0c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1d0e:	4c19      	ldr	r4, [pc, #100]	; (1d74 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    1d10:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1d14:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1d18:	4642      	mov	r2, r8
    1d1a:	4638      	mov	r0, r7
    1d1c:	4621      	mov	r1, r4
    1d1e:	f7ff fef1 	bl	1b04 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    1d22:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    1d26:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1d2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1d2e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    1d32:	3420      	adds	r4, #32
	} while (location < end_addr);
    1d34:	42a2      	cmp	r2, r4
    1d36:	d8fa      	bhi.n	1d2e <usb_serial_flush_callback+0x46>
	asm("dsb");
    1d38:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1d3c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1d40:	2004      	movs	r0, #4
    1d42:	4639      	mov	r1, r7
    1d44:	f7ff fef6 	bl	1b34 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1d48:	7833      	ldrb	r3, [r6, #0]
    1d4a:	3301      	adds	r3, #1
    1d4c:	b2db      	uxtb	r3, r3
    1d4e:	2b03      	cmp	r3, #3
    1d50:	bf88      	it	hi
    1d52:	2300      	movhi	r3, #0
    1d54:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1d56:	2300      	movs	r3, #0
    1d58:	802b      	strh	r3, [r5, #0]
}
    1d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d5e:	4770      	bx	lr
    1d60:	20002bf6 	.word	0x20002bf6
    1d64:	20002bf8 	.word	0x20002bf8
    1d68:	20002be8 	.word	0x20002be8
    1d6c:	20002bf5 	.word	0x20002bf5
    1d70:	20001000 	.word	0x20001000
    1d74:	20201080 	.word	0x20201080

00001d78 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    1d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d7c:	b085      	sub	sp, #20
	while (size > 0) {
    1d7e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    1d82:	2900      	cmp	r1, #0
    1d84:	f000 80bf 	beq.w	1f06 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    1d88:	2300      	movs	r3, #0
    1d8a:	4c60      	ldr	r4, [pc, #384]	; (1f0c <usb_serial_write.part.0+0x194>)
    1d8c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1f28 <usb_serial_write.part.0+0x1b0>
    1d90:	f8df a198 	ldr.w	sl, [pc, #408]	; 1f2c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    1d94:	4f5e      	ldr	r7, [pc, #376]	; (1f10 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    1d96:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    1d98:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    1d9a:	4a5e      	ldr	r2, [pc, #376]	; (1f14 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    1d9c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    1d9e:	4b5e      	ldr	r3, [pc, #376]	; (1f18 <usb_serial_write.part.0+0x1a0>)
    1da0:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    1da2:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    1da6:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    1daa:	2b00      	cmp	r3, #0
    1dac:	f040 80a7 	bne.w	1efe <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    1db0:	461e      	mov	r6, r3
		int waiting=0;
    1db2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    1db4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    1db6:	4648      	mov	r0, r9
    1db8:	f7ff fede 	bl	1b78 <usb_transfer_status>
			if (!(status & 0x80)) {
    1dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    1dc0:	f000 808c 	beq.w	1edc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    1dc4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    1dc8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    1dcc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    1dd0:	b905      	cbnz	r5, 1dd4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    1dd2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d17d      	bne.n	1ed4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1dd8:	683b      	ldr	r3, [r7, #0]
    1dda:	1b9b      	subs	r3, r3, r6
    1ddc:	2b78      	cmp	r3, #120	; 0x78
    1dde:	f200 8087 	bhi.w	1ef0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    1de2:	4b4e      	ldr	r3, [pc, #312]	; (1f1c <usb_serial_write.part.0+0x1a4>)
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	2b00      	cmp	r3, #0
    1de8:	d074      	beq.n	1ed4 <usb_serial_write.part.0+0x15c>
			yield();
    1dea:	f000 f951 	bl	2090 <yield>
			tx_noautoflush = 1;
    1dee:	2201      	movs	r2, #1
		while (!tx_available) {
    1df0:	f8b8 3000 	ldrh.w	r3, [r8]
    1df4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    1df6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d0dc      	beq.n	1db6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1dfc:	4a46      	ldr	r2, [pc, #280]	; (1f18 <usb_serial_write.part.0+0x1a0>)
    1dfe:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1e02:	7811      	ldrb	r1, [r2, #0]
    1e04:	461a      	mov	r2, r3
    1e06:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    1e0a:	4d45      	ldr	r5, [pc, #276]	; (1f20 <usb_serial_write.part.0+0x1a8>)
    1e0c:	02c9      	lsls	r1, r1, #11
    1e0e:	4428      	add	r0, r5
		if (size >= tx_available) {
    1e10:	9d01      	ldr	r5, [sp, #4]
    1e12:	4295      	cmp	r5, r2
    1e14:	d217      	bcs.n	1e46 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    1e16:	9303      	str	r3, [sp, #12]
    1e18:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    1e1c:	462a      	mov	r2, r5
    1e1e:	f000 f9d7 	bl	21d0 <memcpy>
			tx_available -= size;
    1e22:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1e24:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    1e28:	1b5b      	subs	r3, r3, r5
    1e2a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1e2e:	4b3d      	ldr	r3, [pc, #244]	; (1f24 <usb_serial_write.part.0+0x1ac>)
    1e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    1e34:	f3bf 8f4f 	dsb	sy
			sent += size;
    1e38:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    1e3a:	2300      	movs	r3, #0
			sent += size;
    1e3c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    1e3e:	7023      	strb	r3, [r4, #0]
}
    1e40:	b005      	add	sp, #20
    1e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1e46:	4b36      	ldr	r3, [pc, #216]	; (1f20 <usb_serial_write.part.0+0x1a8>)
    1e48:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    1e4a:	9902      	ldr	r1, [sp, #8]
    1e4c:	f000 f9c0 	bl	21d0 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1e50:	2300      	movs	r3, #0
    1e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1e56:	4629      	mov	r1, r5
    1e58:	4648      	mov	r0, r9
    1e5a:	f7ff fe53 	bl	1b04 <usb_prepare_transfer>
	asm("dsb");
    1e5e:	f3bf 8f4f 	dsb	sy
    1e62:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    1e66:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    1e6a:	4293      	cmp	r3, r2
    1e6c:	bf34      	ite	cc
    1e6e:	2301      	movcc	r3, #1
    1e70:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    1e72:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1e76:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    1e7a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    1e7e:	3520      	adds	r5, #32
	} while (location < end_addr);
    1e80:	42ab      	cmp	r3, r5
    1e82:	d1fa      	bne.n	1e7a <usb_serial_write.part.0+0x102>
	asm("dsb");
    1e84:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1e88:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1e8c:	2004      	movs	r0, #4
    1e8e:	4649      	mov	r1, r9
    1e90:	f7ff fe50 	bl	1b34 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1e94:	4a20      	ldr	r2, [pc, #128]	; (1f18 <usb_serial_write.part.0+0x1a0>)
    1e96:	7813      	ldrb	r3, [r2, #0]
    1e98:	3301      	adds	r3, #1
    1e9a:	b2db      	uxtb	r3, r3
    1e9c:	2b03      	cmp	r3, #3
    1e9e:	bf84      	itt	hi
    1ea0:	2300      	movhi	r3, #0
    1ea2:	4a1d      	ldrhi	r2, [pc, #116]	; (1f18 <usb_serial_write.part.0+0x1a0>)
    1ea4:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1ea6:	f8b8 3000 	ldrh.w	r3, [r8]
    1eaa:	9a01      	ldr	r2, [sp, #4]
    1eac:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    1eae:	9a00      	ldr	r2, [sp, #0]
    1eb0:	441a      	add	r2, r3
			size -= tx_available;
    1eb2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    1eb4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    1eb6:	9a02      	ldr	r2, [sp, #8]
    1eb8:	441a      	add	r2, r3
			tx_available = 0;
    1eba:	2300      	movs	r3, #0
			data += tx_available;
    1ebc:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    1ebe:	4a19      	ldr	r2, [pc, #100]	; (1f24 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    1ec0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    1ec4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    1ec8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    1ecc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    1ece:	2900      	cmp	r1, #0
    1ed0:	f47f af62 	bne.w	1d98 <usb_serial_write.part.0+0x20>
	return sent;
    1ed4:	9800      	ldr	r0, [sp, #0]
}
    1ed6:	b005      	add	sp, #20
    1ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    1edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1ee0:	4b0d      	ldr	r3, [pc, #52]	; (1f18 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    1ee2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1ee6:	7819      	ldrb	r1, [r3, #0]
				break;
    1ee8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    1eea:	f8a8 2000 	strh.w	r2, [r8]
				break;
    1eee:	e78a      	b.n	1e06 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    1ef0:	2301      	movs	r3, #1
				return sent;
    1ef2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    1ef4:	f88a 3000 	strb.w	r3, [sl]
}
    1ef8:	b005      	add	sp, #20
    1efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1efe:	461a      	mov	r2, r3
    1f00:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1f04:	e77f      	b.n	1e06 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    1f06:	9801      	ldr	r0, [sp, #4]
	return sent;
    1f08:	e7e5      	b.n	1ed6 <usb_serial_write.part.0+0x15e>
    1f0a:	bf00      	nop
    1f0c:	20002bf6 	.word	0x20002bf6
    1f10:	20002bc8 	.word	0x20002bc8
    1f14:	20001000 	.word	0x20001000
    1f18:	20002bf5 	.word	0x20002bf5
    1f1c:	20002bf8 	.word	0x20002bf8
    1f20:	20201080 	.word	0x20201080
    1f24:	402e0000 	.word	0x402e0000
    1f28:	20002be8 	.word	0x20002be8
    1f2c:	20002bf4 	.word	0x20002bf4

00001f30 <usb_serial_reset>:
}
    1f30:	4770      	bx	lr
    1f32:	bf00      	nop

00001f34 <usb_serial_configure>:
	if (usb_high_speed) {
    1f34:	4b2d      	ldr	r3, [pc, #180]	; (1fec <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1f36:	2100      	movs	r1, #0
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	482d      	ldr	r0, [pc, #180]	; (1ff0 <usb_serial_configure+0xbc>)
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    1f3e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    1f40:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    1f42:	4d2c      	ldr	r5, [pc, #176]	; (1ff4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    1f44:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    1f46:	4e2c      	ldr	r6, [pc, #176]	; (1ff8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    1f48:	bf0c      	ite	eq
    1f4a:	2340      	moveq	r3, #64	; 0x40
    1f4c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    1f50:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1f52:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1f54:	f000 fce4 	bl	2920 <memset>
	tx_head = 0;
    1f58:	4a28      	ldr	r2, [pc, #160]	; (1ffc <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f5a:	4621      	mov	r1, r4
	tx_available = 0;
    1f5c:	4b28      	ldr	r3, [pc, #160]	; (2000 <usb_serial_configure+0xcc>)
	tx_head = 0;
    1f5e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f60:	f44f 7280 	mov.w	r2, #256	; 0x100
    1f64:	4827      	ldr	r0, [pc, #156]	; (2004 <usb_serial_configure+0xd0>)
	tx_available = 0;
    1f66:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f68:	f000 fcda 	bl	2920 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1f6c:	4a26      	ldr	r2, [pc, #152]	; (2008 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f6e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    1f70:	4b26      	ldr	r3, [pc, #152]	; (200c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f72:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    1f74:	e9c2 4400 	strd	r4, r4, [r2]
    1f78:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1f7c:	4a24      	ldr	r2, [pc, #144]	; (2010 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    1f7e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    1f82:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1f84:	4a23      	ldr	r2, [pc, #140]	; (2014 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    1f86:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1f8a:	4b23      	ldr	r3, [pc, #140]	; (2018 <usb_serial_configure+0xe4>)
    1f8c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f8e:	4623      	mov	r3, r4
	rx_available = 0;
    1f90:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f92:	4622      	mov	r2, r4
    1f94:	f7ff fd84 	bl	1aa0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1f98:	4622      	mov	r2, r4
    1f9a:	8831      	ldrh	r1, [r6, #0]
    1f9c:	2003      	movs	r0, #3
    1f9e:	4b1f      	ldr	r3, [pc, #124]	; (201c <usb_serial_configure+0xe8>)
    1fa0:	f7ff fd4c 	bl	1a3c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1fa4:	4623      	mov	r3, r4
    1fa6:	2201      	movs	r2, #1
    1fa8:	8829      	ldrh	r1, [r5, #0]
    1faa:	2004      	movs	r0, #4
    1fac:	f7ff fd78 	bl	1aa0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1fb0:	4620      	mov	r0, r4
    1fb2:	3401      	adds	r4, #1
    1fb4:	f7ff fe0e 	bl	1bd4 <rx_queue_transfer>
    1fb8:	2c08      	cmp	r4, #8
    1fba:	d1f9      	bne.n	1fb0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    1fbc:	4b18      	ldr	r3, [pc, #96]	; (2020 <usb_serial_configure+0xec>)
    1fbe:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    1fc0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    1fc2:	4818      	ldr	r0, [pc, #96]	; (2024 <usb_serial_configure+0xf0>)
    1fc4:	4c18      	ldr	r4, [pc, #96]	; (2028 <usb_serial_configure+0xf4>)
    1fc6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1fc8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1fd0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1fd4:	4915      	ldr	r1, [pc, #84]	; (202c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1fd6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1fda:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1fde:	b121      	cbz	r1, 1fea <usb_serial_configure+0xb6>
    1fe0:	4a13      	ldr	r2, [pc, #76]	; (2030 <usb_serial_configure+0xfc>)
    1fe2:	7813      	ldrb	r3, [r2, #0]
    1fe4:	f043 0301 	orr.w	r3, r3, #1
    1fe8:	7013      	strb	r3, [r2, #0]
}
    1fea:	bd70      	pop	{r4, r5, r6, pc}
    1fec:	20002bf9 	.word	0x20002bf9
    1ff0:	20001000 	.word	0x20001000
    1ff4:	20002bea 	.word	0x20002bea
    1ff8:	20002be6 	.word	0x20002be6
    1ffc:	20002bf5 	.word	0x20002bf5
    2000:	20002be8 	.word	0x20002be8
    2004:	20000f00 	.word	0x20000f00
    2008:	20002b84 	.word	0x20002b84
    200c:	20002b94 	.word	0x20002b94
    2010:	20002bf1 	.word	0x20002bf1
    2014:	20002b80 	.word	0x20002b80
    2018:	20002bf2 	.word	0x20002bf2
    201c:	00001c35 	.word	0x00001c35
    2020:	402e0000 	.word	0x402e0000
    2024:	20002bdc 	.word	0x20002bdc
    2028:	00001ce9 	.word	0x00001ce9
    202c:	00000000 	.word	0x00000000
    2030:	20002bfb 	.word	0x20002bfb

00002034 <usb_serial_available>:
	uint32_t n = rx_available;
    2034:	4b04      	ldr	r3, [pc, #16]	; (2048 <usb_serial_available+0x14>)
{
    2036:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2038:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    203a:	b10c      	cbz	r4, 2040 <usb_serial_available+0xc>
}
    203c:	4620      	mov	r0, r4
    203e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    2040:	f000 f826 	bl	2090 <yield>
}
    2044:	4620      	mov	r0, r4
    2046:	bd10      	pop	{r4, pc}
    2048:	20002b80 	.word	0x20002b80

0000204c <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    204c:	4b09      	ldr	r3, [pc, #36]	; (2074 <usb_serial_putchar+0x28>)
{
    204e:	b500      	push	{lr}
    2050:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    2052:	781b      	ldrb	r3, [r3, #0]
{
    2054:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    2058:	b13b      	cbz	r3, 206a <usb_serial_putchar+0x1e>
    205a:	2101      	movs	r1, #1
    205c:	f10d 0007 	add.w	r0, sp, #7
    2060:	f7ff fe8a 	bl	1d78 <usb_serial_write.part.0>
}
    2064:	b003      	add	sp, #12
    2066:	f85d fb04 	ldr.w	pc, [sp], #4
    206a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    206e:	b003      	add	sp, #12
    2070:	f85d fb04 	ldr.w	pc, [sp], #4
    2074:	20002bf8 	.word	0x20002bf8

00002078 <usb_serial_write>:
	if (!usb_configuration) return 0;
    2078:	4b04      	ldr	r3, [pc, #16]	; (208c <usb_serial_write+0x14>)
    207a:	781b      	ldrb	r3, [r3, #0]
    207c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2080:	b10b      	cbz	r3, 2086 <usb_serial_write+0xe>
    2082:	f7ff be79 	b.w	1d78 <usb_serial_write.part.0>
}
    2086:	4610      	mov	r0, r2
    2088:	4770      	bx	lr
    208a:	bf00      	nop
    208c:	20002bf8 	.word	0x20002bf8

00002090 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    2090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    2094:	4b2d      	ldr	r3, [pc, #180]	; (214c <yield+0xbc>)
    2096:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    2098:	b166      	cbz	r6, 20b4 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    209a:	4f2d      	ldr	r7, [pc, #180]	; (2150 <yield+0xc0>)
    209c:	783b      	ldrb	r3, [r7, #0]
    209e:	b94b      	cbnz	r3, 20b4 <yield+0x24>
	running = 1;
    20a0:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    20a2:	07f1      	lsls	r1, r6, #31
	running = 1;
    20a4:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    20a6:	d443      	bmi.n	2130 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    20a8:	07b2      	lsls	r2, r6, #30
    20aa:	d426      	bmi.n	20fa <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    20ac:	2300      	movs	r3, #0
    20ae:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    20b0:	0773      	lsls	r3, r6, #29
    20b2:	d401      	bmi.n	20b8 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    20b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    20b8:	4b26      	ldr	r3, [pc, #152]	; (2154 <yield+0xc4>)
    20ba:	681a      	ldr	r2, [r3, #0]
    20bc:	2a00      	cmp	r2, #0
    20be:	d0f9      	beq.n	20b4 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    20c0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    20c4:	2a00      	cmp	r2, #0
    20c6:	d1f5      	bne.n	20b4 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    20c8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    20cc:	b672      	cpsid	i
		EventResponder *first = firstYield;
    20ce:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    20d0:	2800      	cmp	r0, #0
    20d2:	d034      	beq.n	213e <yield+0xae>
		if (runningFromYield) {
    20d4:	4c20      	ldr	r4, [pc, #128]	; (2158 <yield+0xc8>)
    20d6:	7821      	ldrb	r1, [r4, #0]
    20d8:	2900      	cmp	r1, #0
    20da:	d130      	bne.n	213e <yield+0xae>
		runningFromYield = true;
    20dc:	2201      	movs	r2, #1
    20de:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    20e0:	6942      	ldr	r2, [r0, #20]
    20e2:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    20e4:	2a00      	cmp	r2, #0
    20e6:	d02e      	beq.n	2146 <yield+0xb6>
			firstYield->_prev = nullptr;
    20e8:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    20ea:	b905      	cbnz	r5, 20ee <yield+0x5e>
    20ec:	b662      	cpsie	i
		first->_triggered = false;
    20ee:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    20f0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    20f2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    20f4:	4798      	blx	r3
		runningFromYield = false;
    20f6:	7025      	strb	r5, [r4, #0]
    20f8:	e7dc      	b.n	20b4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    20fa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2160 <yield+0xd0>
    20fe:	f898 3000 	ldrb.w	r3, [r8]
    2102:	2b00      	cmp	r3, #0
    2104:	d0d2      	beq.n	20ac <yield+0x1c>
    2106:	2500      	movs	r5, #0
    2108:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2164 <yield+0xd4>
    210c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    210e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2112:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2114:	6823      	ldr	r3, [r4, #0]
    2116:	4620      	mov	r0, r4
    2118:	691b      	ldr	r3, [r3, #16]
    211a:	4798      	blx	r3
    211c:	b110      	cbz	r0, 2124 <yield+0x94>
    211e:	6963      	ldr	r3, [r4, #20]
    2120:	689b      	ldr	r3, [r3, #8]
    2122:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2124:	f898 2000 	ldrb.w	r2, [r8]
    2128:	b2eb      	uxtb	r3, r5
    212a:	429a      	cmp	r2, r3
    212c:	d8ef      	bhi.n	210e <yield+0x7e>
    212e:	e7bd      	b.n	20ac <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2130:	f7ff ff80 	bl	2034 <usb_serial_available>
		if (Serial.available()) serialEvent();
    2134:	2800      	cmp	r0, #0
    2136:	d0b7      	beq.n	20a8 <yield+0x18>
    2138:	f3af 8000 	nop.w
    213c:	e7b4      	b.n	20a8 <yield+0x18>
		if (doit) __enable_irq();
    213e:	2d00      	cmp	r5, #0
    2140:	d1b8      	bne.n	20b4 <yield+0x24>
    2142:	b662      	cpsie	i
    2144:	e7b6      	b.n	20b4 <yield+0x24>
			lastYield = nullptr;
    2146:	4b05      	ldr	r3, [pc, #20]	; (215c <yield+0xcc>)
    2148:	601a      	str	r2, [r3, #0]
    214a:	e7ce      	b.n	20ea <yield+0x5a>
    214c:	20002bfb 	.word	0x20002bfb
    2150:	20002bee 	.word	0x20002bee
    2154:	20001088 	.word	0x20001088
    2158:	20002bec 	.word	0x20002bec
    215c:	20001094 	.word	0x20001094
    2160:	20002bed 	.word	0x20002bed
    2164:	20001098 	.word	0x20001098

00002168 <EventResponder::runFromInterrupt()>:
{
    2168:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    216a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    216e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2170:	4c0c      	ldr	r4, [pc, #48]	; (21a4 <EventResponder::runFromInterrupt()+0x3c>)
    2172:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2174:	b180      	cbz	r0, 2198 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    2176:	4e0c      	ldr	r6, [pc, #48]	; (21a8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2178:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    217a:	6943      	ldr	r3, [r0, #20]
    217c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    217e:	b173      	cbz	r3, 219e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2180:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    2182:	b902      	cbnz	r2, 2186 <EventResponder::runFromInterrupt()+0x1e>
    2184:	b662      	cpsie	i
			(*(first->_function))(*first);
    2186:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2188:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    218a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    218c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2190:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2192:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2194:	2800      	cmp	r0, #0
    2196:	d1f0      	bne.n	217a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2198:	b902      	cbnz	r2, 219c <EventResponder::runFromInterrupt()+0x34>
    219a:	b662      	cpsie	i
}
    219c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    219e:	6033      	str	r3, [r6, #0]
    21a0:	e7ef      	b.n	2182 <EventResponder::runFromInterrupt()+0x1a>
    21a2:	bf00      	nop
    21a4:	20001090 	.word	0x20001090
    21a8:	2000108c 	.word	0x2000108c

000021ac <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    21ac:	f7ff bfdc 	b.w	2168 <EventResponder::runFromInterrupt()>

000021b0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    21b0:	4904      	ldr	r1, [pc, #16]	; (21c4 <systick_isr+0x14>)
	systick_millis_count++;
    21b2:	4a05      	ldr	r2, [pc, #20]	; (21c8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    21b4:	6849      	ldr	r1, [r1, #4]
    21b6:	4b05      	ldr	r3, [pc, #20]	; (21cc <systick_isr+0x1c>)
    21b8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    21ba:	6813      	ldr	r3, [r2, #0]
    21bc:	3301      	adds	r3, #1
    21be:	6013      	str	r3, [r2, #0]
}
    21c0:	4770      	bx	lr
    21c2:	bf00      	nop
    21c4:	e0001000 	.word	0xe0001000
    21c8:	20002bc8 	.word	0x20002bc8
    21cc:	20002bc4 	.word	0x20002bc4

000021d0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    21d0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    21d2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    21d6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    21da:	d16d      	bne.n	22b8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    21dc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    21de:	d341      	bcc.n	2264 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    21e0:	f851 3b04 	ldr.w	r3, [r1], #4
    21e4:	f840 3b04 	str.w	r3, [r0], #4
    21e8:	f851 3b04 	ldr.w	r3, [r1], #4
    21ec:	f840 3b04 	str.w	r3, [r0], #4
    21f0:	f851 3b04 	ldr.w	r3, [r1], #4
    21f4:	f840 3b04 	str.w	r3, [r0], #4
    21f8:	f851 3b04 	ldr.w	r3, [r1], #4
    21fc:	f840 3b04 	str.w	r3, [r0], #4
    2200:	f851 3b04 	ldr.w	r3, [r1], #4
    2204:	f840 3b04 	str.w	r3, [r0], #4
    2208:	f851 3b04 	ldr.w	r3, [r1], #4
    220c:	f840 3b04 	str.w	r3, [r0], #4
    2210:	f851 3b04 	ldr.w	r3, [r1], #4
    2214:	f840 3b04 	str.w	r3, [r0], #4
    2218:	f851 3b04 	ldr.w	r3, [r1], #4
    221c:	f840 3b04 	str.w	r3, [r0], #4
    2220:	f851 3b04 	ldr.w	r3, [r1], #4
    2224:	f840 3b04 	str.w	r3, [r0], #4
    2228:	f851 3b04 	ldr.w	r3, [r1], #4
    222c:	f840 3b04 	str.w	r3, [r0], #4
    2230:	f851 3b04 	ldr.w	r3, [r1], #4
    2234:	f840 3b04 	str.w	r3, [r0], #4
    2238:	f851 3b04 	ldr.w	r3, [r1], #4
    223c:	f840 3b04 	str.w	r3, [r0], #4
    2240:	f851 3b04 	ldr.w	r3, [r1], #4
    2244:	f840 3b04 	str.w	r3, [r0], #4
    2248:	f851 3b04 	ldr.w	r3, [r1], #4
    224c:	f840 3b04 	str.w	r3, [r0], #4
    2250:	f851 3b04 	ldr.w	r3, [r1], #4
    2254:	f840 3b04 	str.w	r3, [r0], #4
    2258:	f851 3b04 	ldr.w	r3, [r1], #4
    225c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2260:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2262:	d2bd      	bcs.n	21e0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2264:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2266:	d311      	bcc.n	228c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2268:	f851 3b04 	ldr.w	r3, [r1], #4
    226c:	f840 3b04 	str.w	r3, [r0], #4
    2270:	f851 3b04 	ldr.w	r3, [r1], #4
    2274:	f840 3b04 	str.w	r3, [r0], #4
    2278:	f851 3b04 	ldr.w	r3, [r1], #4
    227c:	f840 3b04 	str.w	r3, [r0], #4
    2280:	f851 3b04 	ldr.w	r3, [r1], #4
    2284:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2288:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    228a:	d2ed      	bcs.n	2268 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    228c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    228e:	d305      	bcc.n	229c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2290:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2294:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2298:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    229a:	d2f9      	bcs.n	2290 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    229c:	3204      	adds	r2, #4
	beq	.Ldone
    229e:	d008      	beq.n	22b2 <memcpy+0xe2>

	lsls	r2, r2, #31
    22a0:	07d2      	lsls	r2, r2, #31
	itt ne
    22a2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    22a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    22a8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    22ac:	d301      	bcc.n	22b2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    22ae:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    22b0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    22b2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    22b4:	4770      	bx	lr
    22b6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    22b8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    22ba:	d313      	bcc.n	22e4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    22bc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    22be:	d08d      	beq.n	21dc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    22c0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    22c4:	d08a      	beq.n	21dc <memcpy+0xc>

	rsb	r3, #4
    22c6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    22ca:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    22cc:	07db      	lsls	r3, r3, #31
	itt ne
    22ce:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    22d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    22d4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    22d8:	d380      	bcc.n	21dc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    22da:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    22de:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    22e2:	e77b      	b.n	21dc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    22e4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    22e6:	d3d9      	bcc.n	229c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    22e8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    22ea:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    22ee:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    22f2:	d2f9      	bcs.n	22e8 <memcpy+0x118>

	ldrb	r3, [r1]
    22f4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    22f6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    22f8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    22fa:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    22fc:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    22fe:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2300:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2302:	4770      	bx	lr

00002304 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    2304:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    2308:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    230a:	4666      	mov	r6, ip
	int i=0, j;
    230c:	2400      	movs	r4, #0
    230e:	e000      	b.n	2312 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2310:	3401      	adds	r4, #1
		digit = val % radix;
    2312:	fbb0 f5f2 	udiv	r5, r0, r2
    2316:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    231a:	2b09      	cmp	r3, #9
    231c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2320:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2324:	fa5f fe8e 	uxtb.w	lr, lr
    2328:	bf98      	it	ls
    232a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    232e:	4290      	cmp	r0, r2
		val /= radix;
    2330:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2332:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    2336:	d2eb      	bcs.n	2310 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    2338:	1c63      	adds	r3, r4, #1
    233a:	2200      	movs	r2, #0
    233c:	18c8      	adds	r0, r1, r3
    233e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    2340:	b17c      	cbz	r4, 2362 <ultoa+0x5e>
		t = buf[j];
    2342:	4662      	mov	r2, ip
    2344:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    2348:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    234c:	eba1 030c 	sub.w	r3, r1, ip
    2350:	3202      	adds	r2, #2
		buf[j] = buf[i];
    2352:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    2356:	3b01      	subs	r3, #1
    2358:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    235a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    235c:	4423      	add	r3, r4
    235e:	429a      	cmp	r2, r3
    2360:	dbef      	blt.n	2342 <ultoa+0x3e>
	}
	return buf;
}
    2362:	4608      	mov	r0, r1
    2364:	bd70      	pop	{r4, r5, r6, pc}
    2366:	bf00      	nop

00002368 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    2368:	4a07      	ldr	r2, [pc, #28]	; (2388 <rtc_get+0x20>)
    236a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    236c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    236e:	4619      	mov	r1, r3
    2370:	4684      	mov	ip, r0
    2372:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    2374:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    2376:	4299      	cmp	r1, r3
    2378:	d1f9      	bne.n	236e <rtc_get+0x6>
    237a:	4584      	cmp	ip, r0
    237c:	d1f7      	bne.n	236e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    237e:	0bdb      	lsrs	r3, r3, #15
}
    2380:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    2384:	4770      	bx	lr
    2386:	bf00      	nop
    2388:	400d4000 	.word	0x400d4000

0000238c <__aeabi_atexit>:
    238c:	4603      	mov	r3, r0
    238e:	4608      	mov	r0, r1
    2390:	4619      	mov	r1, r3
    2392:	f000 bb17 	b.w	29c4 <__cxa_atexit>
    2396:	bf00      	nop

00002398 <malloc>:
    2398:	4b02      	ldr	r3, [pc, #8]	; (23a4 <malloc+0xc>)
    239a:	4601      	mov	r1, r0
    239c:	6818      	ldr	r0, [r3, #0]
    239e:	f000 b803 	b.w	23a8 <_malloc_r>
    23a2:	bf00      	nop
    23a4:	20000884 	.word	0x20000884

000023a8 <_malloc_r>:
    23a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23ac:	f101 060b 	add.w	r6, r1, #11
    23b0:	2e16      	cmp	r6, #22
    23b2:	b083      	sub	sp, #12
    23b4:	4604      	mov	r4, r0
    23b6:	d824      	bhi.n	2402 <_malloc_r+0x5a>
    23b8:	2910      	cmp	r1, #16
    23ba:	f200 80ba 	bhi.w	2532 <_malloc_r+0x18a>
    23be:	f000 faa3 	bl	2908 <__malloc_lock>
    23c2:	2610      	movs	r6, #16
    23c4:	2218      	movs	r2, #24
    23c6:	2002      	movs	r0, #2
    23c8:	4fb5      	ldr	r7, [pc, #724]	; (26a0 <_malloc_r+0x2f8>)
    23ca:	443a      	add	r2, r7
    23cc:	f1a2 0108 	sub.w	r1, r2, #8
    23d0:	6853      	ldr	r3, [r2, #4]
    23d2:	428b      	cmp	r3, r1
    23d4:	f000 80ba 	beq.w	254c <_malloc_r+0x1a4>
    23d8:	685a      	ldr	r2, [r3, #4]
    23da:	68d9      	ldr	r1, [r3, #12]
    23dc:	f022 0203 	bic.w	r2, r2, #3
    23e0:	441a      	add	r2, r3
    23e2:	689d      	ldr	r5, [r3, #8]
    23e4:	60e9      	str	r1, [r5, #12]
    23e6:	608d      	str	r5, [r1, #8]
    23e8:	6851      	ldr	r1, [r2, #4]
    23ea:	f041 0101 	orr.w	r1, r1, #1
    23ee:	4620      	mov	r0, r4
    23f0:	6051      	str	r1, [r2, #4]
    23f2:	f103 0508 	add.w	r5, r3, #8
    23f6:	f000 fa8d 	bl	2914 <__malloc_unlock>
    23fa:	4628      	mov	r0, r5
    23fc:	b003      	add	sp, #12
    23fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2402:	f036 0607 	bics.w	r6, r6, #7
    2406:	f100 8094 	bmi.w	2532 <_malloc_r+0x18a>
    240a:	42b1      	cmp	r1, r6
    240c:	f200 8091 	bhi.w	2532 <_malloc_r+0x18a>
    2410:	f000 fa7a 	bl	2908 <__malloc_lock>
    2414:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    2418:	f0c0 819a 	bcc.w	2750 <_malloc_r+0x3a8>
    241c:	0a73      	lsrs	r3, r6, #9
    241e:	f000 808f 	beq.w	2540 <_malloc_r+0x198>
    2422:	2b04      	cmp	r3, #4
    2424:	f200 816f 	bhi.w	2706 <_malloc_r+0x35e>
    2428:	09b3      	lsrs	r3, r6, #6
    242a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    242e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    2432:	00c3      	lsls	r3, r0, #3
    2434:	4f9a      	ldr	r7, [pc, #616]	; (26a0 <_malloc_r+0x2f8>)
    2436:	443b      	add	r3, r7
    2438:	f1a3 0508 	sub.w	r5, r3, #8
    243c:	685b      	ldr	r3, [r3, #4]
    243e:	429d      	cmp	r5, r3
    2440:	d106      	bne.n	2450 <_malloc_r+0xa8>
    2442:	e00c      	b.n	245e <_malloc_r+0xb6>
    2444:	2900      	cmp	r1, #0
    2446:	f280 8127 	bge.w	2698 <_malloc_r+0x2f0>
    244a:	68db      	ldr	r3, [r3, #12]
    244c:	429d      	cmp	r5, r3
    244e:	d006      	beq.n	245e <_malloc_r+0xb6>
    2450:	685a      	ldr	r2, [r3, #4]
    2452:	f022 0203 	bic.w	r2, r2, #3
    2456:	1b91      	subs	r1, r2, r6
    2458:	290f      	cmp	r1, #15
    245a:	ddf3      	ble.n	2444 <_malloc_r+0x9c>
    245c:	4660      	mov	r0, ip
    245e:	693d      	ldr	r5, [r7, #16]
    2460:	f8df c250 	ldr.w	ip, [pc, #592]	; 26b4 <_malloc_r+0x30c>
    2464:	4565      	cmp	r5, ip
    2466:	d07c      	beq.n	2562 <_malloc_r+0x1ba>
    2468:	686a      	ldr	r2, [r5, #4]
    246a:	f022 0203 	bic.w	r2, r2, #3
    246e:	1b93      	subs	r3, r2, r6
    2470:	2b0f      	cmp	r3, #15
    2472:	f300 817b 	bgt.w	276c <_malloc_r+0x3c4>
    2476:	2b00      	cmp	r3, #0
    2478:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    247c:	f280 816c 	bge.w	2758 <_malloc_r+0x3b0>
    2480:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2484:	f080 811a 	bcs.w	26bc <_malloc_r+0x314>
    2488:	08d3      	lsrs	r3, r2, #3
    248a:	6879      	ldr	r1, [r7, #4]
    248c:	3301      	adds	r3, #1
    248e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    2492:	2201      	movs	r2, #1
    2494:	fa02 f20e 	lsl.w	r2, r2, lr
    2498:	430a      	orrs	r2, r1
    249a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    249e:	f8c5 e008 	str.w	lr, [r5, #8]
    24a2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    24a6:	3908      	subs	r1, #8
    24a8:	60e9      	str	r1, [r5, #12]
    24aa:	607a      	str	r2, [r7, #4]
    24ac:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    24b0:	f8ce 500c 	str.w	r5, [lr, #12]
    24b4:	1083      	asrs	r3, r0, #2
    24b6:	2101      	movs	r1, #1
    24b8:	4099      	lsls	r1, r3
    24ba:	4291      	cmp	r1, r2
    24bc:	d857      	bhi.n	256e <_malloc_r+0x1c6>
    24be:	4211      	tst	r1, r2
    24c0:	d106      	bne.n	24d0 <_malloc_r+0x128>
    24c2:	f020 0003 	bic.w	r0, r0, #3
    24c6:	0049      	lsls	r1, r1, #1
    24c8:	4211      	tst	r1, r2
    24ca:	f100 0004 	add.w	r0, r0, #4
    24ce:	d0fa      	beq.n	24c6 <_malloc_r+0x11e>
    24d0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    24d4:	464d      	mov	r5, r9
    24d6:	4686      	mov	lr, r0
    24d8:	f8d5 800c 	ldr.w	r8, [r5, #12]
    24dc:	4545      	cmp	r5, r8
    24de:	d108      	bne.n	24f2 <_malloc_r+0x14a>
    24e0:	e11d      	b.n	271e <_malloc_r+0x376>
    24e2:	2b00      	cmp	r3, #0
    24e4:	f280 8124 	bge.w	2730 <_malloc_r+0x388>
    24e8:	f8d8 800c 	ldr.w	r8, [r8, #12]
    24ec:	4545      	cmp	r5, r8
    24ee:	f000 8116 	beq.w	271e <_malloc_r+0x376>
    24f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    24f6:	f022 0203 	bic.w	r2, r2, #3
    24fa:	1b93      	subs	r3, r2, r6
    24fc:	2b0f      	cmp	r3, #15
    24fe:	ddf0      	ble.n	24e2 <_malloc_r+0x13a>
    2500:	4620      	mov	r0, r4
    2502:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    2506:	eb08 0106 	add.w	r1, r8, r6
    250a:	f046 0601 	orr.w	r6, r6, #1
    250e:	f8c8 6004 	str.w	r6, [r8, #4]
    2512:	60ec      	str	r4, [r5, #12]
    2514:	60a5      	str	r5, [r4, #8]
    2516:	f043 0401 	orr.w	r4, r3, #1
    251a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    251e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    2522:	604c      	str	r4, [r1, #4]
    2524:	f848 3002 	str.w	r3, [r8, r2]
    2528:	f000 f9f4 	bl	2914 <__malloc_unlock>
    252c:	f108 0508 	add.w	r5, r8, #8
    2530:	e002      	b.n	2538 <_malloc_r+0x190>
    2532:	230c      	movs	r3, #12
    2534:	6023      	str	r3, [r4, #0]
    2536:	2500      	movs	r5, #0
    2538:	4628      	mov	r0, r5
    253a:	b003      	add	sp, #12
    253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2540:	f44f 7300 	mov.w	r3, #512	; 0x200
    2544:	2040      	movs	r0, #64	; 0x40
    2546:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    254a:	e773      	b.n	2434 <_malloc_r+0x8c>
    254c:	68d3      	ldr	r3, [r2, #12]
    254e:	429a      	cmp	r2, r3
    2550:	bf08      	it	eq
    2552:	3002      	addeq	r0, #2
    2554:	f47f af40 	bne.w	23d8 <_malloc_r+0x30>
    2558:	693d      	ldr	r5, [r7, #16]
    255a:	f8df c158 	ldr.w	ip, [pc, #344]	; 26b4 <_malloc_r+0x30c>
    255e:	4565      	cmp	r5, ip
    2560:	d182      	bne.n	2468 <_malloc_r+0xc0>
    2562:	687a      	ldr	r2, [r7, #4]
    2564:	1083      	asrs	r3, r0, #2
    2566:	2101      	movs	r1, #1
    2568:	4099      	lsls	r1, r3
    256a:	4291      	cmp	r1, r2
    256c:	d9a7      	bls.n	24be <_malloc_r+0x116>
    256e:	68bd      	ldr	r5, [r7, #8]
    2570:	686b      	ldr	r3, [r5, #4]
    2572:	f023 0903 	bic.w	r9, r3, #3
    2576:	454e      	cmp	r6, r9
    2578:	d803      	bhi.n	2582 <_malloc_r+0x1da>
    257a:	eba9 0306 	sub.w	r3, r9, r6
    257e:	2b0f      	cmp	r3, #15
    2580:	dc7a      	bgt.n	2678 <_malloc_r+0x2d0>
    2582:	f8df b134 	ldr.w	fp, [pc, #308]	; 26b8 <_malloc_r+0x310>
    2586:	4b47      	ldr	r3, [pc, #284]	; (26a4 <_malloc_r+0x2fc>)
    2588:	f8db 2000 	ldr.w	r2, [fp]
    258c:	681b      	ldr	r3, [r3, #0]
    258e:	3201      	adds	r2, #1
    2590:	4433      	add	r3, r6
    2592:	eb05 0a09 	add.w	sl, r5, r9
    2596:	f000 8133 	beq.w	2800 <_malloc_r+0x458>
    259a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    259e:	330f      	adds	r3, #15
    25a0:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    25a4:	f028 080f 	bic.w	r8, r8, #15
    25a8:	4641      	mov	r1, r8
    25aa:	4620      	mov	r0, r4
    25ac:	f000 fa10 	bl	29d0 <_sbrk_r>
    25b0:	1c41      	adds	r1, r0, #1
    25b2:	4602      	mov	r2, r0
    25b4:	f000 80f3 	beq.w	279e <_malloc_r+0x3f6>
    25b8:	4582      	cmp	sl, r0
    25ba:	f200 80ee 	bhi.w	279a <_malloc_r+0x3f2>
    25be:	4b3a      	ldr	r3, [pc, #232]	; (26a8 <_malloc_r+0x300>)
    25c0:	6819      	ldr	r1, [r3, #0]
    25c2:	4441      	add	r1, r8
    25c4:	6019      	str	r1, [r3, #0]
    25c6:	4608      	mov	r0, r1
    25c8:	f000 814e 	beq.w	2868 <_malloc_r+0x4c0>
    25cc:	f8db 1000 	ldr.w	r1, [fp]
    25d0:	9301      	str	r3, [sp, #4]
    25d2:	3101      	adds	r1, #1
    25d4:	bf1b      	ittet	ne
    25d6:	eba2 010a 	subne.w	r1, r2, sl
    25da:	1809      	addne	r1, r1, r0
    25dc:	f8cb 2000 	streq.w	r2, [fp]
    25e0:	6019      	strne	r1, [r3, #0]
    25e2:	f012 0b07 	ands.w	fp, r2, #7
    25e6:	f000 8117 	beq.w	2818 <_malloc_r+0x470>
    25ea:	f1cb 0108 	rsb	r1, fp, #8
    25ee:	440a      	add	r2, r1
    25f0:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    25f4:	4490      	add	r8, r2
    25f6:	3108      	adds	r1, #8
    25f8:	eba1 0108 	sub.w	r1, r1, r8
    25fc:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    2600:	4651      	mov	r1, sl
    2602:	4620      	mov	r0, r4
    2604:	9200      	str	r2, [sp, #0]
    2606:	f000 f9e3 	bl	29d0 <_sbrk_r>
    260a:	1c42      	adds	r2, r0, #1
    260c:	e9dd 2300 	ldrd	r2, r3, [sp]
    2610:	f000 814f 	beq.w	28b2 <_malloc_r+0x50a>
    2614:	1a80      	subs	r0, r0, r2
    2616:	eb00 080a 	add.w	r8, r0, sl
    261a:	6819      	ldr	r1, [r3, #0]
    261c:	60ba      	str	r2, [r7, #8]
    261e:	f048 0001 	orr.w	r0, r8, #1
    2622:	4451      	add	r1, sl
    2624:	42bd      	cmp	r5, r7
    2626:	6050      	str	r0, [r2, #4]
    2628:	6019      	str	r1, [r3, #0]
    262a:	f000 8129 	beq.w	2880 <_malloc_r+0x4d8>
    262e:	f1b9 0f0f 	cmp.w	r9, #15
    2632:	f240 8127 	bls.w	2884 <_malloc_r+0x4dc>
    2636:	6868      	ldr	r0, [r5, #4]
    2638:	f1a9 0c0c 	sub.w	ip, r9, #12
    263c:	f02c 0c07 	bic.w	ip, ip, #7
    2640:	f000 0001 	and.w	r0, r0, #1
    2644:	ea40 000c 	orr.w	r0, r0, ip
    2648:	6068      	str	r0, [r5, #4]
    264a:	f04f 0e05 	mov.w	lr, #5
    264e:	eb05 000c 	add.w	r0, r5, ip
    2652:	f1bc 0f0f 	cmp.w	ip, #15
    2656:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    265a:	f200 8132 	bhi.w	28c2 <_malloc_r+0x51a>
    265e:	6850      	ldr	r0, [r2, #4]
    2660:	4615      	mov	r5, r2
    2662:	4b12      	ldr	r3, [pc, #72]	; (26ac <_malloc_r+0x304>)
    2664:	681a      	ldr	r2, [r3, #0]
    2666:	428a      	cmp	r2, r1
    2668:	bf38      	it	cc
    266a:	6019      	strcc	r1, [r3, #0]
    266c:	4b10      	ldr	r3, [pc, #64]	; (26b0 <_malloc_r+0x308>)
    266e:	681a      	ldr	r2, [r3, #0]
    2670:	428a      	cmp	r2, r1
    2672:	bf38      	it	cc
    2674:	6019      	strcc	r1, [r3, #0]
    2676:	e094      	b.n	27a2 <_malloc_r+0x3fa>
    2678:	19aa      	adds	r2, r5, r6
    267a:	f043 0301 	orr.w	r3, r3, #1
    267e:	f046 0601 	orr.w	r6, r6, #1
    2682:	606e      	str	r6, [r5, #4]
    2684:	4620      	mov	r0, r4
    2686:	60ba      	str	r2, [r7, #8]
    2688:	6053      	str	r3, [r2, #4]
    268a:	f000 f943 	bl	2914 <__malloc_unlock>
    268e:	3508      	adds	r5, #8
    2690:	4628      	mov	r0, r5
    2692:	b003      	add	sp, #12
    2694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2698:	68d9      	ldr	r1, [r3, #12]
    269a:	441a      	add	r2, r3
    269c:	e6a1      	b.n	23e2 <_malloc_r+0x3a>
    269e:	bf00      	nop
    26a0:	20000474 	.word	0x20000474
    26a4:	20001280 	.word	0x20001280
    26a8:	20001250 	.word	0x20001250
    26ac:	20001278 	.word	0x20001278
    26b0:	2000127c 	.word	0x2000127c
    26b4:	2000047c 	.word	0x2000047c
    26b8:	2000087c 	.word	0x2000087c
    26bc:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    26c0:	ea4f 2352 	mov.w	r3, r2, lsr #9
    26c4:	d363      	bcc.n	278e <_malloc_r+0x3e6>
    26c6:	2b14      	cmp	r3, #20
    26c8:	f200 80b7 	bhi.w	283a <_malloc_r+0x492>
    26cc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    26d0:	00c9      	lsls	r1, r1, #3
    26d2:	335b      	adds	r3, #91	; 0x5b
    26d4:	eb07 0e01 	add.w	lr, r7, r1
    26d8:	5879      	ldr	r1, [r7, r1]
    26da:	f1ae 0e08 	sub.w	lr, lr, #8
    26de:	458e      	cmp	lr, r1
    26e0:	f000 8091 	beq.w	2806 <_malloc_r+0x45e>
    26e4:	684b      	ldr	r3, [r1, #4]
    26e6:	f023 0303 	bic.w	r3, r3, #3
    26ea:	4293      	cmp	r3, r2
    26ec:	d902      	bls.n	26f4 <_malloc_r+0x34c>
    26ee:	6889      	ldr	r1, [r1, #8]
    26f0:	458e      	cmp	lr, r1
    26f2:	d1f7      	bne.n	26e4 <_malloc_r+0x33c>
    26f4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    26f8:	687a      	ldr	r2, [r7, #4]
    26fa:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    26fe:	f8ce 5008 	str.w	r5, [lr, #8]
    2702:	60cd      	str	r5, [r1, #12]
    2704:	e6d6      	b.n	24b4 <_malloc_r+0x10c>
    2706:	2b14      	cmp	r3, #20
    2708:	d959      	bls.n	27be <_malloc_r+0x416>
    270a:	2b54      	cmp	r3, #84	; 0x54
    270c:	f200 809d 	bhi.w	284a <_malloc_r+0x4a2>
    2710:	0b33      	lsrs	r3, r6, #12
    2712:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    2716:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    271a:	00c3      	lsls	r3, r0, #3
    271c:	e68a      	b.n	2434 <_malloc_r+0x8c>
    271e:	f10e 0e01 	add.w	lr, lr, #1
    2722:	f01e 0f03 	tst.w	lr, #3
    2726:	f105 0508 	add.w	r5, r5, #8
    272a:	f47f aed5 	bne.w	24d8 <_malloc_r+0x130>
    272e:	e051      	b.n	27d4 <_malloc_r+0x42c>
    2730:	4442      	add	r2, r8
    2732:	4645      	mov	r5, r8
    2734:	6853      	ldr	r3, [r2, #4]
    2736:	f8d8 100c 	ldr.w	r1, [r8, #12]
    273a:	f043 0301 	orr.w	r3, r3, #1
    273e:	6053      	str	r3, [r2, #4]
    2740:	f855 3f08 	ldr.w	r3, [r5, #8]!
    2744:	4620      	mov	r0, r4
    2746:	60d9      	str	r1, [r3, #12]
    2748:	608b      	str	r3, [r1, #8]
    274a:	f000 f8e3 	bl	2914 <__malloc_unlock>
    274e:	e6f3      	b.n	2538 <_malloc_r+0x190>
    2750:	08f0      	lsrs	r0, r6, #3
    2752:	f106 0208 	add.w	r2, r6, #8
    2756:	e637      	b.n	23c8 <_malloc_r+0x20>
    2758:	442a      	add	r2, r5
    275a:	4620      	mov	r0, r4
    275c:	6853      	ldr	r3, [r2, #4]
    275e:	f043 0301 	orr.w	r3, r3, #1
    2762:	6053      	str	r3, [r2, #4]
    2764:	3508      	adds	r5, #8
    2766:	f000 f8d5 	bl	2914 <__malloc_unlock>
    276a:	e6e5      	b.n	2538 <_malloc_r+0x190>
    276c:	19a9      	adds	r1, r5, r6
    276e:	4620      	mov	r0, r4
    2770:	f046 0601 	orr.w	r6, r6, #1
    2774:	f043 0401 	orr.w	r4, r3, #1
    2778:	606e      	str	r6, [r5, #4]
    277a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    277e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    2782:	604c      	str	r4, [r1, #4]
    2784:	50ab      	str	r3, [r5, r2]
    2786:	f000 f8c5 	bl	2914 <__malloc_unlock>
    278a:	3508      	adds	r5, #8
    278c:	e6d4      	b.n	2538 <_malloc_r+0x190>
    278e:	0993      	lsrs	r3, r2, #6
    2790:	f103 0139 	add.w	r1, r3, #57	; 0x39
    2794:	00c9      	lsls	r1, r1, #3
    2796:	3338      	adds	r3, #56	; 0x38
    2798:	e79c      	b.n	26d4 <_malloc_r+0x32c>
    279a:	42bd      	cmp	r5, r7
    279c:	d05f      	beq.n	285e <_malloc_r+0x4b6>
    279e:	68bd      	ldr	r5, [r7, #8]
    27a0:	6868      	ldr	r0, [r5, #4]
    27a2:	f020 0803 	bic.w	r8, r0, #3
    27a6:	4546      	cmp	r6, r8
    27a8:	eba8 0306 	sub.w	r3, r8, r6
    27ac:	d802      	bhi.n	27b4 <_malloc_r+0x40c>
    27ae:	2b0f      	cmp	r3, #15
    27b0:	f73f af62 	bgt.w	2678 <_malloc_r+0x2d0>
    27b4:	4620      	mov	r0, r4
    27b6:	f000 f8ad 	bl	2914 <__malloc_unlock>
    27ba:	2500      	movs	r5, #0
    27bc:	e6bc      	b.n	2538 <_malloc_r+0x190>
    27be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    27c2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    27c6:	00c3      	lsls	r3, r0, #3
    27c8:	e634      	b.n	2434 <_malloc_r+0x8c>
    27ca:	f859 3908 	ldr.w	r3, [r9], #-8
    27ce:	454b      	cmp	r3, r9
    27d0:	f040 8096 	bne.w	2900 <_malloc_r+0x558>
    27d4:	f010 0f03 	tst.w	r0, #3
    27d8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    27dc:	d1f5      	bne.n	27ca <_malloc_r+0x422>
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	ea23 0301 	bic.w	r3, r3, r1
    27e4:	607b      	str	r3, [r7, #4]
    27e6:	0049      	lsls	r1, r1, #1
    27e8:	4299      	cmp	r1, r3
    27ea:	f63f aec0 	bhi.w	256e <_malloc_r+0x1c6>
    27ee:	b919      	cbnz	r1, 27f8 <_malloc_r+0x450>
    27f0:	e6bd      	b.n	256e <_malloc_r+0x1c6>
    27f2:	0049      	lsls	r1, r1, #1
    27f4:	f10e 0e04 	add.w	lr, lr, #4
    27f8:	4219      	tst	r1, r3
    27fa:	d0fa      	beq.n	27f2 <_malloc_r+0x44a>
    27fc:	4670      	mov	r0, lr
    27fe:	e667      	b.n	24d0 <_malloc_r+0x128>
    2800:	f103 0810 	add.w	r8, r3, #16
    2804:	e6d0      	b.n	25a8 <_malloc_r+0x200>
    2806:	109a      	asrs	r2, r3, #2
    2808:	f04f 0801 	mov.w	r8, #1
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	fa08 f202 	lsl.w	r2, r8, r2
    2812:	431a      	orrs	r2, r3
    2814:	607a      	str	r2, [r7, #4]
    2816:	e770      	b.n	26fa <_malloc_r+0x352>
    2818:	eb02 0108 	add.w	r1, r2, r8
    281c:	4249      	negs	r1, r1
    281e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    2822:	4651      	mov	r1, sl
    2824:	4620      	mov	r0, r4
    2826:	9200      	str	r2, [sp, #0]
    2828:	f000 f8d2 	bl	29d0 <_sbrk_r>
    282c:	1c43      	adds	r3, r0, #1
    282e:	e9dd 2300 	ldrd	r2, r3, [sp]
    2832:	f47f aeef 	bne.w	2614 <_malloc_r+0x26c>
    2836:	46da      	mov	sl, fp
    2838:	e6ef      	b.n	261a <_malloc_r+0x272>
    283a:	2b54      	cmp	r3, #84	; 0x54
    283c:	d825      	bhi.n	288a <_malloc_r+0x4e2>
    283e:	0b13      	lsrs	r3, r2, #12
    2840:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    2844:	00c9      	lsls	r1, r1, #3
    2846:	336e      	adds	r3, #110	; 0x6e
    2848:	e744      	b.n	26d4 <_malloc_r+0x32c>
    284a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    284e:	d825      	bhi.n	289c <_malloc_r+0x4f4>
    2850:	0bf3      	lsrs	r3, r6, #15
    2852:	f103 0078 	add.w	r0, r3, #120	; 0x78
    2856:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    285a:	00c3      	lsls	r3, r0, #3
    285c:	e5ea      	b.n	2434 <_malloc_r+0x8c>
    285e:	4b29      	ldr	r3, [pc, #164]	; (2904 <_malloc_r+0x55c>)
    2860:	6818      	ldr	r0, [r3, #0]
    2862:	4440      	add	r0, r8
    2864:	6018      	str	r0, [r3, #0]
    2866:	e6b1      	b.n	25cc <_malloc_r+0x224>
    2868:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    286c:	f1bc 0f00 	cmp.w	ip, #0
    2870:	f47f aeac 	bne.w	25cc <_malloc_r+0x224>
    2874:	68bd      	ldr	r5, [r7, #8]
    2876:	44c8      	add	r8, r9
    2878:	f048 0001 	orr.w	r0, r8, #1
    287c:	6068      	str	r0, [r5, #4]
    287e:	e6f0      	b.n	2662 <_malloc_r+0x2ba>
    2880:	4615      	mov	r5, r2
    2882:	e6ee      	b.n	2662 <_malloc_r+0x2ba>
    2884:	2301      	movs	r3, #1
    2886:	6053      	str	r3, [r2, #4]
    2888:	e794      	b.n	27b4 <_malloc_r+0x40c>
    288a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    288e:	d823      	bhi.n	28d8 <_malloc_r+0x530>
    2890:	0bd3      	lsrs	r3, r2, #15
    2892:	f103 0178 	add.w	r1, r3, #120	; 0x78
    2896:	00c9      	lsls	r1, r1, #3
    2898:	3377      	adds	r3, #119	; 0x77
    289a:	e71b      	b.n	26d4 <_malloc_r+0x32c>
    289c:	f240 5254 	movw	r2, #1364	; 0x554
    28a0:	4293      	cmp	r3, r2
    28a2:	d823      	bhi.n	28ec <_malloc_r+0x544>
    28a4:	0cb3      	lsrs	r3, r6, #18
    28a6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    28aa:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    28ae:	00c3      	lsls	r3, r0, #3
    28b0:	e5c0      	b.n	2434 <_malloc_r+0x8c>
    28b2:	f1ab 0b08 	sub.w	fp, fp, #8
    28b6:	44d8      	add	r8, fp
    28b8:	eba8 0802 	sub.w	r8, r8, r2
    28bc:	f04f 0a00 	mov.w	sl, #0
    28c0:	e6ab      	b.n	261a <_malloc_r+0x272>
    28c2:	f105 0108 	add.w	r1, r5, #8
    28c6:	4620      	mov	r0, r4
    28c8:	9300      	str	r3, [sp, #0]
    28ca:	f000 f955 	bl	2b78 <_free_r>
    28ce:	68bd      	ldr	r5, [r7, #8]
    28d0:	9b00      	ldr	r3, [sp, #0]
    28d2:	6868      	ldr	r0, [r5, #4]
    28d4:	6819      	ldr	r1, [r3, #0]
    28d6:	e6c4      	b.n	2662 <_malloc_r+0x2ba>
    28d8:	f240 5154 	movw	r1, #1364	; 0x554
    28dc:	428b      	cmp	r3, r1
    28de:	d80b      	bhi.n	28f8 <_malloc_r+0x550>
    28e0:	0c93      	lsrs	r3, r2, #18
    28e2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    28e6:	00c9      	lsls	r1, r1, #3
    28e8:	337c      	adds	r3, #124	; 0x7c
    28ea:	e6f3      	b.n	26d4 <_malloc_r+0x32c>
    28ec:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    28f0:	207f      	movs	r0, #127	; 0x7f
    28f2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    28f6:	e59d      	b.n	2434 <_malloc_r+0x8c>
    28f8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    28fc:	237e      	movs	r3, #126	; 0x7e
    28fe:	e6e9      	b.n	26d4 <_malloc_r+0x32c>
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	e770      	b.n	27e6 <_malloc_r+0x43e>
    2904:	20001250 	.word	0x20001250

00002908 <__malloc_lock>:
    2908:	4801      	ldr	r0, [pc, #4]	; (2910 <__malloc_lock+0x8>)
    290a:	f000 b89d 	b.w	2a48 <__retarget_lock_acquire_recursive>
    290e:	bf00      	nop
    2910:	2000124c 	.word	0x2000124c

00002914 <__malloc_unlock>:
    2914:	4801      	ldr	r0, [pc, #4]	; (291c <__malloc_unlock+0x8>)
    2916:	f000 b899 	b.w	2a4c <__retarget_lock_release_recursive>
    291a:	bf00      	nop
    291c:	2000124c 	.word	0x2000124c

00002920 <memset>:
    2920:	0783      	lsls	r3, r0, #30
    2922:	b530      	push	{r4, r5, lr}
    2924:	d048      	beq.n	29b8 <memset+0x98>
    2926:	1e54      	subs	r4, r2, #1
    2928:	2a00      	cmp	r2, #0
    292a:	d03f      	beq.n	29ac <memset+0x8c>
    292c:	b2ca      	uxtb	r2, r1
    292e:	4603      	mov	r3, r0
    2930:	e001      	b.n	2936 <memset+0x16>
    2932:	3c01      	subs	r4, #1
    2934:	d33a      	bcc.n	29ac <memset+0x8c>
    2936:	f803 2b01 	strb.w	r2, [r3], #1
    293a:	079d      	lsls	r5, r3, #30
    293c:	d1f9      	bne.n	2932 <memset+0x12>
    293e:	2c03      	cmp	r4, #3
    2940:	d92d      	bls.n	299e <memset+0x7e>
    2942:	b2cd      	uxtb	r5, r1
    2944:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2948:	2c0f      	cmp	r4, #15
    294a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    294e:	d936      	bls.n	29be <memset+0x9e>
    2950:	f1a4 0210 	sub.w	r2, r4, #16
    2954:	f022 0c0f 	bic.w	ip, r2, #15
    2958:	f103 0e20 	add.w	lr, r3, #32
    295c:	44e6      	add	lr, ip
    295e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    2962:	f103 0210 	add.w	r2, r3, #16
    2966:	e942 5504 	strd	r5, r5, [r2, #-16]
    296a:	e942 5502 	strd	r5, r5, [r2, #-8]
    296e:	3210      	adds	r2, #16
    2970:	4572      	cmp	r2, lr
    2972:	d1f8      	bne.n	2966 <memset+0x46>
    2974:	f10c 0201 	add.w	r2, ip, #1
    2978:	f014 0f0c 	tst.w	r4, #12
    297c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2980:	f004 0c0f 	and.w	ip, r4, #15
    2984:	d013      	beq.n	29ae <memset+0x8e>
    2986:	f1ac 0304 	sub.w	r3, ip, #4
    298a:	f023 0303 	bic.w	r3, r3, #3
    298e:	3304      	adds	r3, #4
    2990:	4413      	add	r3, r2
    2992:	f842 5b04 	str.w	r5, [r2], #4
    2996:	4293      	cmp	r3, r2
    2998:	d1fb      	bne.n	2992 <memset+0x72>
    299a:	f00c 0403 	and.w	r4, ip, #3
    299e:	b12c      	cbz	r4, 29ac <memset+0x8c>
    29a0:	b2c9      	uxtb	r1, r1
    29a2:	441c      	add	r4, r3
    29a4:	f803 1b01 	strb.w	r1, [r3], #1
    29a8:	429c      	cmp	r4, r3
    29aa:	d1fb      	bne.n	29a4 <memset+0x84>
    29ac:	bd30      	pop	{r4, r5, pc}
    29ae:	4664      	mov	r4, ip
    29b0:	4613      	mov	r3, r2
    29b2:	2c00      	cmp	r4, #0
    29b4:	d1f4      	bne.n	29a0 <memset+0x80>
    29b6:	e7f9      	b.n	29ac <memset+0x8c>
    29b8:	4603      	mov	r3, r0
    29ba:	4614      	mov	r4, r2
    29bc:	e7bf      	b.n	293e <memset+0x1e>
    29be:	461a      	mov	r2, r3
    29c0:	46a4      	mov	ip, r4
    29c2:	e7e0      	b.n	2986 <memset+0x66>

000029c4 <__cxa_atexit>:
    29c4:	4613      	mov	r3, r2
    29c6:	460a      	mov	r2, r1
    29c8:	4601      	mov	r1, r0
    29ca:	2002      	movs	r0, #2
    29cc:	f000 b840 	b.w	2a50 <__register_exitproc>

000029d0 <_sbrk_r>:
    29d0:	b538      	push	{r3, r4, r5, lr}
    29d2:	4d07      	ldr	r5, [pc, #28]	; (29f0 <_sbrk_r+0x20>)
    29d4:	2200      	movs	r2, #0
    29d6:	4604      	mov	r4, r0
    29d8:	4608      	mov	r0, r1
    29da:	602a      	str	r2, [r5, #0]
    29dc:	f7fe fc08 	bl	11f0 <_sbrk>
    29e0:	1c43      	adds	r3, r0, #1
    29e2:	d000      	beq.n	29e6 <_sbrk_r+0x16>
    29e4:	bd38      	pop	{r3, r4, r5, pc}
    29e6:	682b      	ldr	r3, [r5, #0]
    29e8:	2b00      	cmp	r3, #0
    29ea:	d0fb      	beq.n	29e4 <_sbrk_r+0x14>
    29ec:	6023      	str	r3, [r4, #0]
    29ee:	bd38      	pop	{r3, r4, r5, pc}
    29f0:	20001bbc 	.word	0x20001bbc

000029f4 <__errno>:
    29f4:	4b01      	ldr	r3, [pc, #4]	; (29fc <__errno+0x8>)
    29f6:	6818      	ldr	r0, [r3, #0]
    29f8:	4770      	bx	lr
    29fa:	bf00      	nop
    29fc:	20000884 	.word	0x20000884

00002a00 <__libc_init_array>:
    2a00:	b570      	push	{r4, r5, r6, lr}
    2a02:	4e0d      	ldr	r6, [pc, #52]	; (2a38 <__libc_init_array+0x38>)
    2a04:	4d0d      	ldr	r5, [pc, #52]	; (2a3c <__libc_init_array+0x3c>)
    2a06:	1b76      	subs	r6, r6, r5
    2a08:	10b6      	asrs	r6, r6, #2
    2a0a:	d006      	beq.n	2a1a <__libc_init_array+0x1a>
    2a0c:	2400      	movs	r4, #0
    2a0e:	f855 3b04 	ldr.w	r3, [r5], #4
    2a12:	3401      	adds	r4, #1
    2a14:	4798      	blx	r3
    2a16:	42a6      	cmp	r6, r4
    2a18:	d1f9      	bne.n	2a0e <__libc_init_array+0xe>
    2a1a:	4e09      	ldr	r6, [pc, #36]	; (2a40 <__libc_init_array+0x40>)
    2a1c:	4d09      	ldr	r5, [pc, #36]	; (2a44 <__libc_init_array+0x44>)
    2a1e:	1b76      	subs	r6, r6, r5
    2a20:	f000 f9b2 	bl	2d88 <___init_veneer>
    2a24:	10b6      	asrs	r6, r6, #2
    2a26:	d006      	beq.n	2a36 <__libc_init_array+0x36>
    2a28:	2400      	movs	r4, #0
    2a2a:	f855 3b04 	ldr.w	r3, [r5], #4
    2a2e:	3401      	adds	r4, #1
    2a30:	4798      	blx	r3
    2a32:	42a6      	cmp	r6, r4
    2a34:	d1f9      	bne.n	2a2a <__libc_init_array+0x2a>
    2a36:	bd70      	pop	{r4, r5, r6, pc}
    2a38:	60001af0 	.word	0x60001af0
    2a3c:	60001af0 	.word	0x60001af0
    2a40:	60001af8 	.word	0x60001af8
    2a44:	60001af0 	.word	0x60001af0

00002a48 <__retarget_lock_acquire_recursive>:
    2a48:	4770      	bx	lr
    2a4a:	bf00      	nop

00002a4c <__retarget_lock_release_recursive>:
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop

00002a50 <__register_exitproc>:
    2a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a54:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2ad4 <__register_exitproc+0x84>
    2a58:	4606      	mov	r6, r0
    2a5a:	f8da 0000 	ldr.w	r0, [sl]
    2a5e:	4698      	mov	r8, r3
    2a60:	460f      	mov	r7, r1
    2a62:	4691      	mov	r9, r2
    2a64:	f7ff fff0 	bl	2a48 <__retarget_lock_acquire_recursive>
    2a68:	4b18      	ldr	r3, [pc, #96]	; (2acc <__register_exitproc+0x7c>)
    2a6a:	681c      	ldr	r4, [r3, #0]
    2a6c:	b324      	cbz	r4, 2ab8 <__register_exitproc+0x68>
    2a6e:	6865      	ldr	r5, [r4, #4]
    2a70:	2d1f      	cmp	r5, #31
    2a72:	dc24      	bgt.n	2abe <__register_exitproc+0x6e>
    2a74:	b95e      	cbnz	r6, 2a8e <__register_exitproc+0x3e>
    2a76:	1c6b      	adds	r3, r5, #1
    2a78:	3502      	adds	r5, #2
    2a7a:	f8da 0000 	ldr.w	r0, [sl]
    2a7e:	6063      	str	r3, [r4, #4]
    2a80:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    2a84:	f7ff ffe2 	bl	2a4c <__retarget_lock_release_recursive>
    2a88:	2000      	movs	r0, #0
    2a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a8e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    2a92:	2301      	movs	r3, #1
    2a94:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    2a98:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    2a9c:	40ab      	lsls	r3, r5
    2a9e:	431a      	orrs	r2, r3
    2aa0:	2e02      	cmp	r6, #2
    2aa2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    2aa6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    2aaa:	d1e4      	bne.n	2a76 <__register_exitproc+0x26>
    2aac:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2ab0:	431a      	orrs	r2, r3
    2ab2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    2ab6:	e7de      	b.n	2a76 <__register_exitproc+0x26>
    2ab8:	4c05      	ldr	r4, [pc, #20]	; (2ad0 <__register_exitproc+0x80>)
    2aba:	601c      	str	r4, [r3, #0]
    2abc:	e7d7      	b.n	2a6e <__register_exitproc+0x1e>
    2abe:	f8da 0000 	ldr.w	r0, [sl]
    2ac2:	f7ff ffc3 	bl	2a4c <__retarget_lock_release_recursive>
    2ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2aca:	e7de      	b.n	2a8a <__register_exitproc+0x3a>
    2acc:	200010b4 	.word	0x200010b4
    2ad0:	200010b8 	.word	0x200010b8
    2ad4:	20000468 	.word	0x20000468

00002ad8 <_malloc_trim_r>:
    2ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ada:	4f24      	ldr	r7, [pc, #144]	; (2b6c <_malloc_trim_r+0x94>)
    2adc:	460c      	mov	r4, r1
    2ade:	4606      	mov	r6, r0
    2ae0:	f7ff ff12 	bl	2908 <__malloc_lock>
    2ae4:	68bb      	ldr	r3, [r7, #8]
    2ae6:	685d      	ldr	r5, [r3, #4]
    2ae8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    2aec:	310f      	adds	r1, #15
    2aee:	f025 0503 	bic.w	r5, r5, #3
    2af2:	194b      	adds	r3, r1, r5
    2af4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    2af8:	f023 030f 	bic.w	r3, r3, #15
    2afc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    2b00:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    2b04:	db07      	blt.n	2b16 <_malloc_trim_r+0x3e>
    2b06:	2100      	movs	r1, #0
    2b08:	4630      	mov	r0, r6
    2b0a:	f7ff ff61 	bl	29d0 <_sbrk_r>
    2b0e:	68bb      	ldr	r3, [r7, #8]
    2b10:	442b      	add	r3, r5
    2b12:	4298      	cmp	r0, r3
    2b14:	d004      	beq.n	2b20 <_malloc_trim_r+0x48>
    2b16:	4630      	mov	r0, r6
    2b18:	f7ff fefc 	bl	2914 <__malloc_unlock>
    2b1c:	2000      	movs	r0, #0
    2b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b20:	4261      	negs	r1, r4
    2b22:	4630      	mov	r0, r6
    2b24:	f7ff ff54 	bl	29d0 <_sbrk_r>
    2b28:	3001      	adds	r0, #1
    2b2a:	d00d      	beq.n	2b48 <_malloc_trim_r+0x70>
    2b2c:	4a10      	ldr	r2, [pc, #64]	; (2b70 <_malloc_trim_r+0x98>)
    2b2e:	68bb      	ldr	r3, [r7, #8]
    2b30:	1b2d      	subs	r5, r5, r4
    2b32:	f045 0501 	orr.w	r5, r5, #1
    2b36:	605d      	str	r5, [r3, #4]
    2b38:	6813      	ldr	r3, [r2, #0]
    2b3a:	4630      	mov	r0, r6
    2b3c:	1b1b      	subs	r3, r3, r4
    2b3e:	6013      	str	r3, [r2, #0]
    2b40:	f7ff fee8 	bl	2914 <__malloc_unlock>
    2b44:	2001      	movs	r0, #1
    2b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b48:	2100      	movs	r1, #0
    2b4a:	4630      	mov	r0, r6
    2b4c:	f7ff ff40 	bl	29d0 <_sbrk_r>
    2b50:	68ba      	ldr	r2, [r7, #8]
    2b52:	1a83      	subs	r3, r0, r2
    2b54:	2b0f      	cmp	r3, #15
    2b56:	ddde      	ble.n	2b16 <_malloc_trim_r+0x3e>
    2b58:	f043 0301 	orr.w	r3, r3, #1
    2b5c:	6053      	str	r3, [r2, #4]
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <_malloc_trim_r+0x9c>)
    2b60:	4903      	ldr	r1, [pc, #12]	; (2b70 <_malloc_trim_r+0x98>)
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	1ac0      	subs	r0, r0, r3
    2b66:	6008      	str	r0, [r1, #0]
    2b68:	e7d5      	b.n	2b16 <_malloc_trim_r+0x3e>
    2b6a:	bf00      	nop
    2b6c:	20000474 	.word	0x20000474
    2b70:	20001250 	.word	0x20001250
    2b74:	2000087c 	.word	0x2000087c

00002b78 <_free_r>:
    2b78:	2900      	cmp	r1, #0
    2b7a:	d061      	beq.n	2c40 <_free_r+0xc8>
    2b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b7e:	460c      	mov	r4, r1
    2b80:	4606      	mov	r6, r0
    2b82:	f7ff fec1 	bl	2908 <__malloc_lock>
    2b86:	f854 2c04 	ldr.w	r2, [r4, #-4]
    2b8a:	4f7b      	ldr	r7, [pc, #492]	; (2d78 <_free_r+0x200>)
    2b8c:	f1a4 0508 	sub.w	r5, r4, #8
    2b90:	f022 0101 	bic.w	r1, r2, #1
    2b94:	eb05 0c01 	add.w	ip, r5, r1
    2b98:	68b8      	ldr	r0, [r7, #8]
    2b9a:	f8dc 3004 	ldr.w	r3, [ip, #4]
    2b9e:	4560      	cmp	r0, ip
    2ba0:	f023 0303 	bic.w	r3, r3, #3
    2ba4:	f000 808b 	beq.w	2cbe <_free_r+0x146>
    2ba8:	07d2      	lsls	r2, r2, #31
    2baa:	f8cc 3004 	str.w	r3, [ip, #4]
    2bae:	d432      	bmi.n	2c16 <_free_r+0x9e>
    2bb0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    2bb4:	1aad      	subs	r5, r5, r2
    2bb6:	4411      	add	r1, r2
    2bb8:	68aa      	ldr	r2, [r5, #8]
    2bba:	f107 0008 	add.w	r0, r7, #8
    2bbe:	4282      	cmp	r2, r0
    2bc0:	d06a      	beq.n	2c98 <_free_r+0x120>
    2bc2:	eb0c 0403 	add.w	r4, ip, r3
    2bc6:	f8d4 e004 	ldr.w	lr, [r4, #4]
    2bca:	68ec      	ldr	r4, [r5, #12]
    2bcc:	60d4      	str	r4, [r2, #12]
    2bce:	f01e 0f01 	tst.w	lr, #1
    2bd2:	60a2      	str	r2, [r4, #8]
    2bd4:	f000 8097 	beq.w	2d06 <_free_r+0x18e>
    2bd8:	f041 0301 	orr.w	r3, r1, #1
    2bdc:	606b      	str	r3, [r5, #4]
    2bde:	f8cc 1000 	str.w	r1, [ip]
    2be2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2be6:	d235      	bcs.n	2c54 <_free_r+0xdc>
    2be8:	6878      	ldr	r0, [r7, #4]
    2bea:	08cb      	lsrs	r3, r1, #3
    2bec:	2201      	movs	r2, #1
    2bee:	0949      	lsrs	r1, r1, #5
    2bf0:	3301      	adds	r3, #1
    2bf2:	408a      	lsls	r2, r1
    2bf4:	4302      	orrs	r2, r0
    2bf6:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2bfa:	607a      	str	r2, [r7, #4]
    2bfc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2c00:	3a08      	subs	r2, #8
    2c02:	e9c5 1202 	strd	r1, r2, [r5, #8]
    2c06:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    2c0a:	60cd      	str	r5, [r1, #12]
    2c0c:	4630      	mov	r0, r6
    2c0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2c12:	f7ff be7f 	b.w	2914 <__malloc_unlock>
    2c16:	eb0c 0203 	add.w	r2, ip, r3
    2c1a:	6852      	ldr	r2, [r2, #4]
    2c1c:	07d0      	lsls	r0, r2, #31
    2c1e:	d410      	bmi.n	2c42 <_free_r+0xca>
    2c20:	4419      	add	r1, r3
    2c22:	f107 0008 	add.w	r0, r7, #8
    2c26:	f8dc 3008 	ldr.w	r3, [ip, #8]
    2c2a:	4283      	cmp	r3, r0
    2c2c:	d073      	beq.n	2d16 <_free_r+0x19e>
    2c2e:	f8dc 200c 	ldr.w	r2, [ip, #12]
    2c32:	60da      	str	r2, [r3, #12]
    2c34:	6093      	str	r3, [r2, #8]
    2c36:	f041 0301 	orr.w	r3, r1, #1
    2c3a:	606b      	str	r3, [r5, #4]
    2c3c:	5069      	str	r1, [r5, r1]
    2c3e:	e7d0      	b.n	2be2 <_free_r+0x6a>
    2c40:	4770      	bx	lr
    2c42:	f041 0301 	orr.w	r3, r1, #1
    2c46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2c4a:	f844 3c04 	str.w	r3, [r4, #-4]
    2c4e:	f8cc 1000 	str.w	r1, [ip]
    2c52:	d3c9      	bcc.n	2be8 <_free_r+0x70>
    2c54:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    2c58:	ea4f 2351 	mov.w	r3, r1, lsr #9
    2c5c:	d248      	bcs.n	2cf0 <_free_r+0x178>
    2c5e:	098b      	lsrs	r3, r1, #6
    2c60:	f103 0039 	add.w	r0, r3, #57	; 0x39
    2c64:	f103 0238 	add.w	r2, r3, #56	; 0x38
    2c68:	00c3      	lsls	r3, r0, #3
    2c6a:	18f8      	adds	r0, r7, r3
    2c6c:	58fb      	ldr	r3, [r7, r3]
    2c6e:	3808      	subs	r0, #8
    2c70:	4298      	cmp	r0, r3
    2c72:	d059      	beq.n	2d28 <_free_r+0x1b0>
    2c74:	685a      	ldr	r2, [r3, #4]
    2c76:	f022 0203 	bic.w	r2, r2, #3
    2c7a:	428a      	cmp	r2, r1
    2c7c:	d902      	bls.n	2c84 <_free_r+0x10c>
    2c7e:	689b      	ldr	r3, [r3, #8]
    2c80:	4298      	cmp	r0, r3
    2c82:	d1f7      	bne.n	2c74 <_free_r+0xfc>
    2c84:	68d8      	ldr	r0, [r3, #12]
    2c86:	e9c5 3002 	strd	r3, r0, [r5, #8]
    2c8a:	6085      	str	r5, [r0, #8]
    2c8c:	60dd      	str	r5, [r3, #12]
    2c8e:	4630      	mov	r0, r6
    2c90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2c94:	f7ff be3e 	b.w	2914 <__malloc_unlock>
    2c98:	eb0c 0203 	add.w	r2, ip, r3
    2c9c:	6852      	ldr	r2, [r2, #4]
    2c9e:	07d2      	lsls	r2, r2, #31
    2ca0:	d463      	bmi.n	2d6a <_free_r+0x1f2>
    2ca2:	440b      	add	r3, r1
    2ca4:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    2ca8:	60ca      	str	r2, [r1, #12]
    2caa:	6091      	str	r1, [r2, #8]
    2cac:	f043 0201 	orr.w	r2, r3, #1
    2cb0:	606a      	str	r2, [r5, #4]
    2cb2:	4630      	mov	r0, r6
    2cb4:	50eb      	str	r3, [r5, r3]
    2cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2cba:	f7ff be2b 	b.w	2914 <__malloc_unlock>
    2cbe:	440b      	add	r3, r1
    2cc0:	07d1      	lsls	r1, r2, #31
    2cc2:	d407      	bmi.n	2cd4 <_free_r+0x15c>
    2cc4:	f854 2c08 	ldr.w	r2, [r4, #-8]
    2cc8:	1aad      	subs	r5, r5, r2
    2cca:	4413      	add	r3, r2
    2ccc:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    2cd0:	60ca      	str	r2, [r1, #12]
    2cd2:	6091      	str	r1, [r2, #8]
    2cd4:	f043 0201 	orr.w	r2, r3, #1
    2cd8:	606a      	str	r2, [r5, #4]
    2cda:	4a28      	ldr	r2, [pc, #160]	; (2d7c <_free_r+0x204>)
    2cdc:	60bd      	str	r5, [r7, #8]
    2cde:	6812      	ldr	r2, [r2, #0]
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d893      	bhi.n	2c0c <_free_r+0x94>
    2ce4:	4b26      	ldr	r3, [pc, #152]	; (2d80 <_free_r+0x208>)
    2ce6:	4630      	mov	r0, r6
    2ce8:	6819      	ldr	r1, [r3, #0]
    2cea:	f7ff fef5 	bl	2ad8 <_malloc_trim_r>
    2cee:	e78d      	b.n	2c0c <_free_r+0x94>
    2cf0:	2b14      	cmp	r3, #20
    2cf2:	d90a      	bls.n	2d0a <_free_r+0x192>
    2cf4:	2b54      	cmp	r3, #84	; 0x54
    2cf6:	d81f      	bhi.n	2d38 <_free_r+0x1c0>
    2cf8:	0b0b      	lsrs	r3, r1, #12
    2cfa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    2cfe:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    2d02:	00c3      	lsls	r3, r0, #3
    2d04:	e7b1      	b.n	2c6a <_free_r+0xf2>
    2d06:	4419      	add	r1, r3
    2d08:	e78d      	b.n	2c26 <_free_r+0xae>
    2d0a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    2d0e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    2d12:	00c3      	lsls	r3, r0, #3
    2d14:	e7a9      	b.n	2c6a <_free_r+0xf2>
    2d16:	f041 0301 	orr.w	r3, r1, #1
    2d1a:	e9c7 5504 	strd	r5, r5, [r7, #16]
    2d1e:	e9c5 0002 	strd	r0, r0, [r5, #8]
    2d22:	606b      	str	r3, [r5, #4]
    2d24:	5069      	str	r1, [r5, r1]
    2d26:	e771      	b.n	2c0c <_free_r+0x94>
    2d28:	6879      	ldr	r1, [r7, #4]
    2d2a:	1092      	asrs	r2, r2, #2
    2d2c:	2401      	movs	r4, #1
    2d2e:	fa04 f202 	lsl.w	r2, r4, r2
    2d32:	430a      	orrs	r2, r1
    2d34:	607a      	str	r2, [r7, #4]
    2d36:	e7a6      	b.n	2c86 <_free_r+0x10e>
    2d38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2d3c:	d806      	bhi.n	2d4c <_free_r+0x1d4>
    2d3e:	0bcb      	lsrs	r3, r1, #15
    2d40:	f103 0078 	add.w	r0, r3, #120	; 0x78
    2d44:	f103 0277 	add.w	r2, r3, #119	; 0x77
    2d48:	00c3      	lsls	r3, r0, #3
    2d4a:	e78e      	b.n	2c6a <_free_r+0xf2>
    2d4c:	f240 5254 	movw	r2, #1364	; 0x554
    2d50:	4293      	cmp	r3, r2
    2d52:	d806      	bhi.n	2d62 <_free_r+0x1ea>
    2d54:	0c8b      	lsrs	r3, r1, #18
    2d56:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    2d5a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    2d5e:	00c3      	lsls	r3, r0, #3
    2d60:	e783      	b.n	2c6a <_free_r+0xf2>
    2d62:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    2d66:	227e      	movs	r2, #126	; 0x7e
    2d68:	e77f      	b.n	2c6a <_free_r+0xf2>
    2d6a:	f041 0301 	orr.w	r3, r1, #1
    2d6e:	606b      	str	r3, [r5, #4]
    2d70:	f8cc 1000 	str.w	r1, [ip]
    2d74:	e74a      	b.n	2c0c <_free_r+0x94>
    2d76:	bf00      	nop
    2d78:	20000474 	.word	0x20000474
    2d7c:	20000880 	.word	0x20000880
    2d80:	20001280 	.word	0x20001280
    2d84:	00000000 	.word	0x00000000

00002d88 <___init_veneer>:
    2d88:	f85f f000 	ldr.w	pc, [pc]	; 2d8c <___init_veneer+0x4>
    2d8c:	60001aad 	.word	0x60001aad

00002d90 <___reboot_Teensyduino__veneer>:
    2d90:	f85f f000 	ldr.w	pc, [pc]	; 2d94 <___reboot_Teensyduino__veneer+0x4>
    2d94:	60001a05 	.word	0x60001a05
	...

Disassembly of section .fini:

00002da0 <_fini>:
    2da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2da2:	bf00      	nop
