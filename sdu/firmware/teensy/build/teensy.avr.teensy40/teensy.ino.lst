
/Users/kojihirai/Library/Caches/arduino/sketches/F6C9830418E9C76FEF2389F507DD9F10/teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ac0 	.word	0x20000ac0
6000142c:	20000d80 	.word	0x20000d80

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f940 	bl	600016c4 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8de 	bl	600016d4 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f94a 	bl	600017e4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fac1 	bl	60001ae8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 f860 	bl	60001670 <analog_init>
	pwm_init();
600015b0:	f000 fa82 	bl	60001ab8 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f944 	bl	60001840 <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f886 	bl	600016c8 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9d5 	bl	60001970 <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f87f 	bl	600016d0 <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f87b 	bl	600016cc <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa83 	bl	60001ae0 <____libc_init_array_veneer>
	main();
600015da:	f000 fa75 	bl	60001ac8 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00001bb0 	.word	0x00001bb0
600015ec:	60001bfc 	.word	0x60001bfc
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ac0 	.word	0x20000ac0
600015f8:	600037b0 	.word	0x600037b0
600015fc:	20000000 	.word	0x20000000
60001600:	20000800 	.word	0x20000800
60001604:	00000385 	.word	0x00000385
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	0000146d 	.word	0x0000146d
60001618:	20000d28 	.word	0x20000d28
6000161c:	00001471 	.word	0x00001471
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20000d2c 	.word	0x20000d2c
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001670:	4b10      	ldr	r3, [pc, #64]	; (600016b4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001672:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001674:	4a10      	ldr	r2, [pc, #64]	; (600016b8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001676:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001678:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
6000167c:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001680:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001684:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001686:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000168a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000168c:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000168e:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001690:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001692:	061b      	lsls	r3, r3, #24
60001694:	d4fc      	bmi.n	60001690 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001696:	4a09      	ldr	r2, [pc, #36]	; (600016bc <analog_init+0x4c>)
60001698:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000169c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000169e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a0:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600016a2:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016a4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016a8:	d1fb      	bne.n	600016a2 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600016aa:	4a05      	ldr	r2, [pc, #20]	; (600016c0 <analog_init+0x50>)
600016ac:	7013      	strb	r3, [r2, #0]
}
600016ae:	f85d 4b04 	ldr.w	r4, [sp], #4
600016b2:	4770      	bx	lr
600016b4:	400fc000 	.word	0x400fc000
600016b8:	400c4000 	.word	0x400c4000
600016bc:	400c8000 	.word	0x400c8000
600016c0:	20000d51 	.word	0x20000d51

600016c4 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016c4:	4770      	bx	lr
600016c6:	bf00      	nop

600016c8 <startup_default_middle_hook>:
600016c8:	4770      	bx	lr
600016ca:	bf00      	nop

600016cc <startup_default_late_hook>:
600016cc:	4770      	bx	lr
600016ce:	bf00      	nop

600016d0 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016d0:	bf00      	nop
600016d2:	4770      	bx	lr

600016d4 <configure_cache>:
{
600016d4:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016da:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016dc:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016de:	4831      	ldr	r0, [pc, #196]	; (600017a4 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016e0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016e8:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ea:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016ee:	482e      	ldr	r0, [pc, #184]	; (600017a8 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016f0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016f4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016f6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016fa:	482c      	ldr	r0, [pc, #176]	; (600017ac <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016fc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001700:	4a2b      	ldr	r2, [pc, #172]	; (600017b0 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001702:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001706:	4c2b      	ldr	r4, [pc, #172]	; (600017b4 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001708:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000170c:	482a      	ldr	r0, [pc, #168]	; (600017b8 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000170e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001712:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001716:	4c29      	ldr	r4, [pc, #164]	; (600017bc <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001718:	4829      	ldr	r0, [pc, #164]	; (600017c0 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000171e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001722:	4c28      	ldr	r4, [pc, #160]	; (600017c4 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001724:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001728:	4827      	ldr	r0, [pc, #156]	; (600017c8 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000172a:	4a28      	ldr	r2, [pc, #160]	; (600017cc <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000172c:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001730:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001734:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001738:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000173c:	4c24      	ldr	r4, [pc, #144]	; (600017d0 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000173e:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001740:	4824      	ldr	r0, [pc, #144]	; (600017d4 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001742:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001746:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000174a:	4a23      	ldr	r2, [pc, #140]	; (600017d8 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000174c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001750:	4c22      	ldr	r4, [pc, #136]	; (600017dc <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001752:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001756:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000175a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000175e:	4820      	ldr	r0, [pc, #128]	; (600017e0 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001760:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001764:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001766:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000176a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000176e:	bf00      	nop
	asm("nop");
60001770:	bf00      	nop
	asm("nop");
60001772:	bf00      	nop
	asm("nop");
60001774:	bf00      	nop
	asm("nop");
60001776:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001778:	2201      	movs	r2, #1
6000177a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000177e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001782:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001786:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000178a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000178e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001792:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001796:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000179a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000179e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600017a2:	4770      	bx	lr
600017a4:	1000003f 	.word	0x1000003f
600017a8:	07080025 	.word	0x07080025
600017ac:	00100009 	.word	0x00100009
600017b0:	20000d80 	.word	0x20000d80
600017b4:	00200013 	.word	0x00200013
600017b8:	07020021 	.word	0x07020021
600017bc:	20000014 	.word	0x20000014
600017c0:	13080025 	.word	0x13080025
600017c4:	10000009 	.word	0x10000009
600017c8:	20200016 	.word	0x20200016
600017cc:	130b0027 	.word	0x130b0027
600017d0:	40000017 	.word	0x40000017
600017d4:	60000018 	.word	0x60000018
600017d8:	070b002f 	.word	0x070b002f
600017dc:	70000019 	.word	0x70000019
600017e0:	8000001a 	.word	0x8000001a

600017e4 <usb_pll_start>:
{
600017e4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017e6:	4a15      	ldr	r2, [pc, #84]	; (6000183c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017ee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017f2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017f6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017fa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017fe:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001800:	f013 0f02 	tst.w	r3, #2
60001804:	d10e      	bne.n	60001824 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001806:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000180a:	d00f      	beq.n	6000182c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000180c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001810:	d00e      	beq.n	60001830 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001812:	2b00      	cmp	r3, #0
60001814:	daf3      	bge.n	600017fe <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001816:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000181a:	d10b      	bne.n	60001834 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000181c:	065b      	lsls	r3, r3, #25
6000181e:	d50b      	bpl.n	60001838 <usb_pll_start+0x54>
}
60001820:	bcf0      	pop	{r4, r5, r6, r7}
60001822:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001824:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001826:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001828:	6190      	str	r0, [r2, #24]
			continue;
6000182a:	e7e8      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000182c:	6155      	str	r5, [r2, #20]
			continue;
6000182e:	e7e6      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001830:	6156      	str	r6, [r2, #20]
			continue;
60001832:	e7e4      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001834:	6191      	str	r1, [r2, #24]
			continue;
60001836:	e7e2      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001838:	6157      	str	r7, [r2, #20]
			continue;
6000183a:	e7e0      	b.n	600017fe <usb_pll_start+0x1a>
6000183c:	400d8000 	.word	0x400d8000

60001840 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001840:	4a3f      	ldr	r2, [pc, #252]	; (60001940 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001842:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001844:	493f      	ldr	r1, [pc, #252]	; (60001944 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001846:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000184a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000184e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001852:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001948 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001856:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000194c <tempmon_init+0x10c>
{
6000185e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001864:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001868:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000186c:	4d38      	ldr	r5, [pc, #224]	; (60001950 <tempmon_init+0x110>)
6000186e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001870:	4c38      	ldr	r4, [pc, #224]	; (60001954 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001872:	4839      	ldr	r0, [pc, #228]	; (60001958 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001874:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001876:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000187a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000187c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001884:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001888:	ee07 1a10 	vmov	s14, r1
6000188c:	4b33      	ldr	r3, [pc, #204]	; (6000195c <tempmon_init+0x11c>)
6000188e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001892:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001894:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001898:	4931      	ldr	r1, [pc, #196]	; (60001960 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000189a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000189e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600018a2:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600018a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018aa:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600018ae:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018b2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ba:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600018be:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018c2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018c6:	4827      	ldr	r0, [pc, #156]	; (60001964 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018c8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018cc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018d0:	ee75 5a87 	vadd.f32	s11, s11, s14
600018d4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018d8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018dc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018e4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018f0:	ee16 3a10 	vmov	r3, s12
600018f4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018fc:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001900:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001902:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001906:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000190a:	f3c3 030b 	ubfx	r3, r3, #0, #12
6000190e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001912:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001914:	4914      	ldr	r1, [pc, #80]	; (60001968 <tempmon_init+0x128>)
60001916:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000191a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000191e:	f043 0302 	orr.w	r3, r3, #2
60001922:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001926:	4b11      	ldr	r3, [pc, #68]	; (6000196c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001928:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000192c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001930:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001934:	2201      	movs	r2, #1
}
60001936:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001938:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000193c:	4770      	bx	lr
6000193e:	bf00      	nop
60001940:	400d8100 	.word	0x400d8100
60001944:	401f4400 	.word	0x401f4400
60001948:	42aa0000 	.word	0x42aa0000
6000194c:	42b40000 	.word	0x42b40000
60001950:	20000d18 	.word	0x20000d18
60001954:	20000d14 	.word	0x20000d14
60001958:	20000d1c 	.word	0x20000d1c
6000195c:	20000d20 	.word	0x20000d20
60001960:	0fff0000 	.word	0x0fff0000
60001964:	e000e400 	.word	0xe000e400
60001968:	20000800 	.word	0x20000800
6000196c:	00000511 	.word	0x00000511

60001970 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001970:	4b31      	ldr	r3, [pc, #196]	; (60001a38 <usb_init+0xc8>)
60001972:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001976:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001978:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000197c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001980:	f000 f89e 	bl	60001ac0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001984:	4a2d      	ldr	r2, [pc, #180]	; (60001a3c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001986:	492e      	ldr	r1, [pc, #184]	; (60001a40 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001988:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000198c:	482d      	ldr	r0, [pc, #180]	; (60001a44 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000198e:	f043 0303 	orr.w	r3, r3, #3
60001992:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001996:	4b2c      	ldr	r3, [pc, #176]	; (60001a48 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001998:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000199c:	6802      	ldr	r2, [r0, #0]
6000199e:	421a      	tst	r2, r3
600019a0:	d103      	bne.n	600019aa <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600019a2:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
600019a6:	079a      	lsls	r2, r3, #30
600019a8:	d01b      	beq.n	600019e2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600019aa:	4a25      	ldr	r2, [pc, #148]	; (60001a40 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600019ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600019b0:	4b24      	ldr	r3, [pc, #144]	; (60001a44 <usb_init+0xd4>)
600019b2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600019b4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600019b8:	f043 0302 	orr.w	r3, r3, #2
600019bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600019c0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600019c4:	079b      	lsls	r3, r3, #30
600019c6:	d4fb      	bmi.n	600019c0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600019c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600019cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600019d0:	4b1c      	ldr	r3, [pc, #112]	; (60001a44 <usb_init+0xd4>)
600019d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600019d6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600019da:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600019dc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600019de:	f000 f877 	bl	60001ad0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600019e2:	4a18      	ldr	r2, [pc, #96]	; (60001a44 <usb_init+0xd4>)
600019e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019e8:	4c15      	ldr	r4, [pc, #84]	; (60001a40 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600019ea:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600019ec:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019ee:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019f0:	4b16      	ldr	r3, [pc, #88]	; (60001a4c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600019f2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019f4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019f8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019fc:	4618      	mov	r0, r3
600019fe:	f000 f86b 	bl	60001ad8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001a02:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001a06:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001a08:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001a0c:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001a10:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001a12:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001a16:	641a      	str	r2, [r3, #64]	; 0x40
60001a18:	4b0d      	ldr	r3, [pc, #52]	; (60001a50 <usb_init+0xe0>)
60001a1a:	4a0e      	ldr	r2, [pc, #56]	; (60001a54 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001a1c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001a20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001a24:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001a28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001a2c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001a2e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001a32:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001a36:	bd10      	pop	{r4, pc}
60001a38:	400d8000 	.word	0x400d8000
60001a3c:	400fc000 	.word	0x400fc000
60001a40:	402e0000 	.word	0x402e0000
60001a44:	400d9000 	.word	0x400d9000
60001a48:	001e1c00 	.word	0x001e1c00
60001a4c:	20000000 	.word	0x20000000
60001a50:	20000800 	.word	0x20000800
60001a54:	000006f9 	.word	0x000006f9

60001a58 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a58:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a5a:	4b0e      	ldr	r3, [pc, #56]	; (60001a94 <_reboot_Teensyduino_+0x3c>)
60001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a5e:	079b      	lsls	r3, r3, #30
60001a60:	d400      	bmi.n	60001a64 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a62:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a64:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a66:	4b0c      	ldr	r3, [pc, #48]	; (60001a98 <_reboot_Teensyduino_+0x40>)
60001a68:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a6a:	4a0c      	ldr	r2, [pc, #48]	; (60001a9c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a6c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a70:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a74:	490a      	ldr	r1, [pc, #40]	; (60001aa0 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a76:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a7a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a7c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a7e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a86:	4807      	ldr	r0, [pc, #28]	; (60001aa4 <_reboot_Teensyduino_+0x4c>)
60001a88:	4a07      	ldr	r2, [pc, #28]	; (60001aa8 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a8a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a8c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a8e:	689b      	ldr	r3, [r3, #8]
60001a90:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a92:	bf00      	nop
60001a94:	401f4400 	.word	0x401f4400
60001a98:	402e0000 	.word	0x402e0000
60001a9c:	400ac000 	.word	0x400ac000
60001aa0:	00200003 	.word	0x00200003
60001aa4:	20208000 	.word	0x20208000
60001aa8:	eb120000 	.word	0xeb120000

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <__pwm_init_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__pwm_init_veneer+0x4>
60001abc:	00001995 	.word	0x00001995

60001ac0 <__usb_init_serialnumber_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__usb_init_serialnumber_veneer+0x4>
60001ac4:	00000e69 	.word	0x00000e69

60001ac8 <__main_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__main_veneer+0x4>
60001acc:	00000375 	.word	0x00000375

60001ad0 <__delay_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__delay_veneer+0x4>
60001ad4:	000002cd 	.word	0x000002cd

60001ad8 <__memset_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__memset_veneer+0x4>
60001adc:	00001aad 	.word	0x00001aad

60001ae0 <____libc_init_array_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <____libc_init_array_veneer+0x4>
60001ae4:	00001b51 	.word	0x00001b51

60001ae8 <__set_arm_clock_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__set_arm_clock_veneer+0x4>
60001aec:	00001491 	.word	0x00001491

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000045                                E...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
                        return (void *)-1;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
                        errno = ENOMEM;
      24:	1a1b      	subs	r3, r3, r0
                }
                __brkval = prev + incr;
        }
        return prev;
}
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ac0 	.word	0x20000ac0
      3c:	20000ac0 	.word	0x20000ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20000cc4 	.word	0x20000cc4
      64:	60005000 	.word	0x60005000

00000068 <setup>:
      68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
      6c:	200c      	movs	r0, #12
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
      6e:	4d1b      	ldr	r5, [pc, #108]	; (dc <setup+0x74>)
      70:	f000 f8b8 	bl	1e4 <analogReadRes>
const int32_t SCALE_POWER  = (int32_t)VREF_uV * AMP_SCALE / (ADC_MAX * SENS_POWER_uV);
const int32_t SCALE_LINEAR = (int32_t)VREF_uV * AMP_SCALE / (ADC_MAX * SENS_LINEAR_uV);

void setup() {
  analogReadResolution(12);
  analogReadAveraging(0);
      74:	2000      	movs	r0, #0
      76:	f000 f8e5 	bl	244 <analogReadAveraging>
      7a:	4c19      	ldr	r4, [pc, #100]	; (e0 <setup+0x78>)
      7c:	682e      	ldr	r6, [r5, #0]
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
      7e:	f240 28ee 	movw	r8, #750	; 0x2ee
      82:	4f18      	ldr	r7, [pc, #96]	; (e4 <setup+0x7c>)
      84:	f8df 9060 	ldr.w	r9, [pc, #96]	; e8 <setup+0x80>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
      88:	f001 f962 	bl	1350 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      8c:	7823      	ldrb	r3, [r4, #0]
      8e:	b1c3      	cbz	r3, c2 <setup+0x5a>
      90:	783b      	ldrb	r3, [r7, #0]
      92:	07da      	lsls	r2, r3, #31
      94:	d515      	bpl.n	c2 <setup+0x5a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      96:	682b      	ldr	r3, [r5, #0]
      98:	f8d9 2000 	ldr.w	r2, [r9]
      9c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      9e:	2b0e      	cmp	r3, #14
      a0:	d90f      	bls.n	c2 <setup+0x5a>
		yield();
      a2:	f001 f955 	bl	1350 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      a6:	7823      	ldrb	r3, [r4, #0]
      a8:	2b00      	cmp	r3, #0
      aa:	d0fa      	beq.n	a2 <setup+0x3a>
      ac:	783b      	ldrb	r3, [r7, #0]
      ae:	07db      	lsls	r3, r3, #31
      b0:	d5f7      	bpl.n	a2 <setup+0x3a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      b2:	682b      	ldr	r3, [r5, #0]
      b4:	f8d9 2000 	ldr.w	r2, [r9]
      b8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      ba:	2b0e      	cmp	r3, #14
      bc:	d9f1      	bls.n	a2 <setup+0x3a>
  Serial.begin(2000000);
  while (!Serial);
}
      be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
      c2:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
      c4:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
      c6:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
      c8:	b12a      	cbz	r2, d6 <setup+0x6e>
				if (elapsed > 2000) break;
      ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
      ce:	d8e8      	bhi.n	a2 <setup+0x3a>
			yield();
      d0:	f001 f93e 	bl	1350 <yield>
      d4:	e7d8      	b.n	88 <setup+0x20>
				if (elapsed > 750) break;
      d6:	4543      	cmp	r3, r8
      d8:	d9fa      	bls.n	d0 <setup+0x68>
      da:	e7e2      	b.n	a2 <setup+0x3a>
      dc:	20000d2c 	.word	0x20000d2c
      e0:	20000d59 	.word	0x20000d59
      e4:	20000d58 	.word	0x20000d58
      e8:	20000d3c 	.word	0x20000d3c

000000ec <loop>:

void loop() {
      ec:	b500      	push	{lr}
  uint16_t raw_drill  = analogRead(DRILL_CURRENT_PIN);
      ee:	2014      	movs	r0, #20
void loop() {
      f0:	b083      	sub	sp, #12
  uint16_t raw_drill  = analogRead(DRILL_CURRENT_PIN);
      f2:	f000 f81f 	bl	134 <analogRead>
  uint16_t raw_power  = analogRead(POWER_CURRENT_PIN);
      f6:	2015      	movs	r0, #21
      f8:	f000 f81c 	bl	134 <analogRead>
  uint16_t raw_linear = analogRead(LINEAR_CURRENT_PIN);
      fc:	2016      	movs	r0, #22
      fe:	f000 f819 	bl	134 <analogRead>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     102:	2102      	movs	r1, #2

  int16_t drill_amp  = raw_drill  * SCALE_DRILL;
     104:	2300      	movs	r3, #0
     106:	eb0d 0001 	add.w	r0, sp, r1
     10a:	f8ad 3002 	strh.w	r3, [sp, #2]
  int16_t power_amp  = raw_power  * SCALE_POWER;
     10e:	f8ad 3004 	strh.w	r3, [sp, #4]
  int16_t linear_amp = raw_linear * SCALE_LINEAR;
     112:	f8ad 3006 	strh.w	r3, [sp, #6]
     116:	f001 f90f 	bl	1338 <usb_serial_write>
     11a:	2102      	movs	r1, #2
     11c:	a801      	add	r0, sp, #4
     11e:	f001 f90b 	bl	1338 <usb_serial_write>
     122:	2102      	movs	r1, #2
     124:	f10d 0006 	add.w	r0, sp, #6
     128:	f001 f906 	bl	1338 <usb_serial_write>

  Serial.write((uint8_t*)&drill_amp, sizeof(int16_t));
  Serial.write((uint8_t*)&power_amp, sizeof(int16_t));
  Serial.write((uint8_t*)&linear_amp, sizeof(int16_t));
}
     12c:	b003      	add	sp, #12
     12e:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     132:	bf00      	nop

00000134 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
     134:	281c      	cmp	r0, #28
     136:	d849      	bhi.n	1cc <analogRead+0x98>
{
     138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
     13a:	4f25      	ldr	r7, [pc, #148]	; (1d0 <analogRead+0x9c>)
     13c:	4604      	mov	r4, r0
     13e:	783b      	ldrb	r3, [r7, #0]
     140:	b9e3      	cbnz	r3, 17c <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
     142:	4b24      	ldr	r3, [pc, #144]	; (1d4 <analogRead+0xa0>)
     144:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
     146:	2bff      	cmp	r3, #255	; 0xff
     148:	d029      	beq.n	19e <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
     14a:	4a23      	ldr	r2, [pc, #140]	; (1d8 <analogRead+0xa4>)
     14c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
     150:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
     152:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
     154:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
     158:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
     15c:	d030      	beq.n	1c0 <analogRead+0x8c>
	if(!(ch & 0x80)) {
     15e:	061c      	lsls	r4, r3, #24
     160:	d41f      	bmi.n	1a2 <analogRead+0x6e>
		ADC1_HC0 = ch;
     162:	4c1e      	ldr	r4, [pc, #120]	; (1dc <analogRead+0xa8>)
     164:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
     166:	6a23      	ldr	r3, [r4, #32]
     168:	07d8      	lsls	r0, r3, #31
     16a:	d404      	bmi.n	176 <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
     16c:	f001 f8f0 	bl	1350 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
     170:	6a23      	ldr	r3, [r4, #32]
     172:	07d9      	lsls	r1, r3, #31
     174:	d5fa      	bpl.n	16c <analogRead+0x38>
		return ADC1_R0;
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <analogRead+0xa8>)
     178:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
     17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
     17c:	4d17      	ldr	r5, [pc, #92]	; (1dc <analogRead+0xa8>)
     17e:	4e18      	ldr	r6, [pc, #96]	; (1e0 <analogRead+0xac>)
     180:	e001      	b.n	186 <analogRead+0x52>
		yield();
     182:	f001 f8e5 	bl	1350 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
     186:	6cab      	ldr	r3, [r5, #72]	; 0x48
     188:	061b      	lsls	r3, r3, #24
     18a:	d4fa      	bmi.n	182 <analogRead+0x4e>
     18c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
     18e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     192:	d1f6      	bne.n	182 <analogRead+0x4e>
	calibrating = 0;
     194:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
     196:	4b0f      	ldr	r3, [pc, #60]	; (1d4 <analogRead+0xa0>)
     198:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
     19a:	2bff      	cmp	r3, #255	; 0xff
     19c:	d1d5      	bne.n	14a <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
     19e:	2000      	movs	r0, #0
}
     1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
     1a2:	4c0f      	ldr	r4, [pc, #60]	; (1e0 <analogRead+0xac>)
     1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     1a8:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
     1aa:	6a23      	ldr	r3, [r4, #32]
     1ac:	07da      	lsls	r2, r3, #31
     1ae:	d404      	bmi.n	1ba <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
     1b0:	f001 f8ce 	bl	1350 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
     1b4:	6a23      	ldr	r3, [r4, #32]
     1b6:	07db      	lsls	r3, r3, #31
     1b8:	d5fa      	bpl.n	1b0 <analogRead+0x7c>
		return ADC2_R0;
     1ba:	4b09      	ldr	r3, [pc, #36]	; (1e0 <analogRead+0xac>)
     1bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
     1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
     1c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
     1c4:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
     1c6:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
     1c8:	d4eb      	bmi.n	1a2 <analogRead+0x6e>
     1ca:	e7ca      	b.n	162 <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
     1cc:	2000      	movs	r0, #0
}
     1ce:	4770      	bx	lr
     1d0:	20000d51 	.word	0x20000d51
     1d4:	20000500 	.word	0x20000500
     1d8:	20000280 	.word	0x20000280
     1dc:	400c4000 	.word	0x400c4000
     1e0:	400c8000 	.word	0x400c8000

000001e4 <analogReadRes>:
   if (bits == 8) {
     1e4:	2808      	cmp	r0, #8
{
     1e6:	b430      	push	{r4, r5}
   if (bits == 8) {
     1e8:	d022      	beq.n	230 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
     1ea:	280a      	cmp	r0, #10
     1ec:	bf0c      	ite	eq
     1ee:	f44f 7105 	moveq.w	r1, #532	; 0x214
     1f2:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
     1f6:	4c10      	ldr	r4, [pc, #64]	; (238 <analogReadRes+0x54>)
     1f8:	4d10      	ldr	r5, [pc, #64]	; (23c <analogReadRes+0x58>)
     1fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
     1fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
     1fe:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
     200:	480f      	ldr	r0, [pc, #60]	; (240 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
     202:	f002 0203 	and.w	r2, r2, #3
     206:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
     208:	6c63      	ldr	r3, [r4, #68]	; 0x44
     20a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     20e:	4313      	orrs	r3, r2
  tmp32 |= mode; 
     210:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
     212:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
     214:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
     216:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
     218:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
     21a:	f002 0203 	and.w	r2, r2, #3
     21e:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
     220:	6c43      	ldr	r3, [r0, #68]	; 0x44
     222:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     226:	4313      	orrs	r3, r2
  tmp32 |= mode; 
     228:	4319      	orrs	r1, r3
}
     22a:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
     22c:	6441      	str	r1, [r0, #68]	; 0x44
}
     22e:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
     230:	f44f 7140 	mov.w	r1, #768	; 0x300
     234:	e7df      	b.n	1f6 <analogReadRes+0x12>
     236:	bf00      	nop
     238:	400c4000 	.word	0x400c4000
     23c:	fffffc00 	.word	0xfffffc00
     240:	400c8000 	.word	0x400c8000

00000244 <analogReadAveraging>:
{
     244:	b410      	push	{r4}
  ADC1_GC &= ~0x20;
     246:	4c1f      	ldr	r4, [pc, #124]	; (2c4 <analogReadAveraging+0x80>)
    if (num >= 32) {
     248:	281f      	cmp	r0, #31
  ADC2_GC &= ~0x20;
     24a:	491f      	ldr	r1, [pc, #124]	; (2c8 <analogReadAveraging+0x84>)
  ADC1_GC &= ~0x20;
     24c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     24e:	f023 0320 	bic.w	r3, r3, #32
     252:	64a3      	str	r3, [r4, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
     254:	6c62      	ldr	r2, [r4, #68]	; 0x44
  ADC2_GC &= ~0x20;
     256:	6c8b      	ldr	r3, [r1, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
     258:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  ADC2_GC &= ~0x20;
     25c:	f023 0320 	bic.w	r3, r3, #32
     260:	648b      	str	r3, [r1, #72]	; 0x48
  mode1 = ADC2_CFG & ~0xC000;
     262:	6c4b      	ldr	r3, [r1, #68]	; 0x44
     264:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (num >= 32) {
     268:	d912      	bls.n	290 <analogReadAveraging+0x4c>
      mode |= ADC_CFG_AVGS(3);
     26a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
      mode1 |= ADC_CFG_AVGS(3);
     26e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  ADC1_CFG = mode;
     272:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
     274:	644b      	str	r3, [r1, #68]	; 0x44
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
     276:	4913      	ldr	r1, [pc, #76]	; (2c4 <analogReadAveraging+0x80>)
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
     278:	4a13      	ldr	r2, [pc, #76]	; (2c8 <analogReadAveraging+0x84>)
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
     27a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
}
     27c:	f85d 4b04 	ldr.w	r4, [sp], #4
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
     280:	f043 0320 	orr.w	r3, r3, #32
     284:	648b      	str	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
     286:	6c93      	ldr	r3, [r2, #72]	; 0x48
     288:	f043 0320 	orr.w	r3, r3, #32
     28c:	6493      	str	r3, [r2, #72]	; 0x48
}
     28e:	4770      	bx	lr
    } else if (num >= 16) {
     290:	280f      	cmp	r0, #15
     292:	d908      	bls.n	2a6 <analogReadAveraging+0x62>
      mode |= ADC_CFG_AVGS(2);
     294:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
      mode1 |= ADC_CFG_AVGS(2);
     298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  ADC1_CFG = mode;
     29c:	4809      	ldr	r0, [pc, #36]	; (2c4 <analogReadAveraging+0x80>)
  ADC2_CFG = mode1;
     29e:	490a      	ldr	r1, [pc, #40]	; (2c8 <analogReadAveraging+0x84>)
  ADC1_CFG = mode;
     2a0:	6442      	str	r2, [r0, #68]	; 0x44
  ADC2_CFG = mode1;
     2a2:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
     2a4:	e7e7      	b.n	276 <analogReadAveraging+0x32>
    } else if (num >= 8) {
     2a6:	2807      	cmp	r0, #7
     2a8:	d904      	bls.n	2b4 <analogReadAveraging+0x70>
      mode |= ADC_CFG_AVGS(1);
     2aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      mode1 |= ADC_CFG_AVGS(1);
     2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     2b2:	e7f3      	b.n	29c <analogReadAveraging+0x58>
  if(num >= 4){
     2b4:	2803      	cmp	r0, #3
  ADC1_CFG = mode;
     2b6:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
     2b8:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
     2ba:	d8dc      	bhi.n	276 <analogReadAveraging+0x32>
}
     2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
     2c0:	4770      	bx	lr
     2c2:	bf00      	nop
     2c4:	400c4000 	.word	0x400c4000
     2c8:	400c8000 	.word	0x400c8000

000002cc <delay>:
	if (msec == 0) return;
     2cc:	b900      	cbnz	r0, 2d0 <delay+0x4>
     2ce:	4770      	bx	lr
{
     2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     2d4:	2101      	movs	r1, #1
     2d6:	4681      	mov	r9, r0
     2d8:	4c21      	ldr	r4, [pc, #132]	; (360 <delay+0x94>)
     2da:	4d22      	ldr	r5, [pc, #136]	; (364 <delay+0x98>)
     2dc:	4e22      	ldr	r6, [pc, #136]	; (368 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2de:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     2e2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     2e4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     2e6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     2ea:	2b00      	cmp	r3, #0
     2ec:	d1f7      	bne.n	2de <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     2ee:	491f      	ldr	r1, [pc, #124]	; (36c <delay+0xa0>)
     2f0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
     2f2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     2f6:	f8df a078 	ldr.w	sl, [pc, #120]	; 370 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     2fa:	1a1b      	subs	r3, r3, r0
     2fc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     2fe:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     302:	f8da 2000 	ldr.w	r2, [sl]
     306:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     30a:	455a      	cmp	r2, fp
     30c:	bf94      	ite	ls
     30e:	4490      	addls	r8, r2
     310:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     312:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     316:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     318:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     31a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     31e:	2b00      	cmp	r3, #0
     320:	d1f7      	bne.n	312 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     322:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     324:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     328:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     32a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     32e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     332:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     336:	bf94      	ite	ls
     338:	4462      	addls	r2, ip
     33a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     33e:	eba2 0208 	sub.w	r2, r2, r8
     342:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     346:	d306      	bcc.n	356 <delay+0x8a>
			if (--msec == 0) return;
     348:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     34c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     350:	d1df      	bne.n	312 <delay+0x46>
}
     352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     356:	f000 fffb 	bl	1350 <yield>
		while ((micros() - start) >= 1000) {
     35a:	4904      	ldr	r1, [pc, #16]	; (36c <delay+0xa0>)
     35c:	e7d9      	b.n	312 <delay+0x46>
     35e:	bf00      	nop
     360:	20000d30 	.word	0x20000d30
     364:	20000d2c 	.word	0x20000d2c
     368:	20000d28 	.word	0x20000d28
     36c:	e0001000 	.word	0xe0001000
     370:	20000d24 	.word	0x20000d24

00000374 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     374:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     376:	f7ff fe77 	bl	68 <setup>
	while (1) {
		loop();
     37a:	f7ff feb7 	bl	ec <loop>
		yield();
     37e:	f000 ffe7 	bl	1350 <yield>
	while (1) {
     382:	e7fa      	b.n	37a <main+0x6>

00000384 <unused_interrupt_vector>:
	__disable_irq();
     384:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     386:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
     38a:	4c52      	ldr	r4, [pc, #328]	; (4d4 <unused_interrupt_vector+0x150>)
     38c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
     390:	f01e 0f04 	tst.w	lr, #4
     394:	bf0c      	ite	eq
     396:	f3ef 8208 	mrseq	r2, MSP
     39a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
     39e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
     3a2:	4e4d      	ldr	r6, [pc, #308]	; (4d8 <unused_interrupt_vector+0x154>)
	while (p < end) {
     3a4:	4d4d      	ldr	r5, [pc, #308]	; (4dc <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
     3a6:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
     3aa:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
     3ae:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
     3b2:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
     3b6:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
     3ba:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
     3be:	6993      	ldr	r3, [r2, #24]
     3c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
     3c4:	69d3      	ldr	r3, [r2, #28]
     3c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
     3ca:	f000 f8a3 	bl	514 <tempmonGetTemp>
     3ce:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
     3d2:	f001 fb59 	bl	1a88 <rtc_get>
	info->len = sizeof(*info) / 4;
     3d6:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
     3d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
     3dc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
     3e0:	460b      	mov	r3, r1
     3e2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     3e6:	493e      	ldr	r1, [pc, #248]	; (4e0 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
     3e8:	1d30      	adds	r0, r6, #4
     3ea:	405a      	eors	r2, r3
     3ec:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     3ee:	f002 0301 	and.w	r3, r2, #1
     3f2:	3c01      	subs	r4, #1
     3f4:	fb01 f303 	mul.w	r3, r1, r3
     3f8:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     3fc:	d1f7      	bne.n	3ee <unused_interrupt_vector+0x6a>
	while (p < end) {
     3fe:	42a8      	cmp	r0, r5
     400:	d002      	beq.n	408 <unused_interrupt_vector+0x84>
		crc ^= *p++;
     402:	6873      	ldr	r3, [r6, #4]
     404:	4606      	mov	r6, r0
     406:	e7ef      	b.n	3e8 <unused_interrupt_vector+0x64>
	info->crc = crc;
     408:	4b32      	ldr	r3, [pc, #200]	; (4d4 <unused_interrupt_vector+0x150>)
     40a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     40e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     412:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     416:	4930      	ldr	r1, [pc, #192]	; (4d8 <unused_interrupt_vector+0x154>)
     418:	4a32      	ldr	r2, [pc, #200]	; (4e4 <unused_interrupt_vector+0x160>)
     41a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
     41e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     422:	f3bf 8f4f 	dsb	sy
	asm("isb");
     426:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     42a:	4a2f      	ldr	r2, [pc, #188]	; (4e8 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
     42c:	2502      	movs	r5, #2
     42e:	482f      	ldr	r0, [pc, #188]	; (4ec <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     430:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     432:	492f      	ldr	r1, [pc, #188]	; (4f0 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     434:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     438:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     43a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     43c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     43e:	482d      	ldr	r0, [pc, #180]	; (4f4 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     440:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     448:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     44a:	680b      	ldr	r3, [r1, #0]
     44c:	4283      	cmp	r3, r0
     44e:	d83d      	bhi.n	4cc <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
     450:	4d26      	ldr	r5, [pc, #152]	; (4ec <unused_interrupt_vector+0x168>)
     452:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
     454:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
     45c:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     45e:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
     460:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     464:	4924      	ldr	r1, [pc, #144]	; (4f8 <unused_interrupt_vector+0x174>)
     466:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     46a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
     46e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
     472:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
     476:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
     47a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
     47e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
     482:	e001      	b.n	488 <unused_interrupt_vector+0x104>
		usb_isr();
     484:	f000 f938 	bl	6f8 <usb_isr>
		if (PIT_TFLG0) {
     488:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     48c:	2b00      	cmp	r3, #0
     48e:	d0f9      	beq.n	484 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
     490:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
     492:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     496:	2c4f      	cmp	r4, #79	; 0x4f
     498:	d9f4      	bls.n	484 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     49a:	4b18      	ldr	r3, [pc, #96]	; (4fc <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
     49c:	2002      	movs	r0, #2
     49e:	4918      	ldr	r1, [pc, #96]	; (500 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     4a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
     4a4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     4a8:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     4aa:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     4ae:	b93b      	cbnz	r3, 4c0 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
     4b0:	4814      	ldr	r0, [pc, #80]	; (504 <unused_interrupt_vector+0x180>)
     4b2:	4915      	ldr	r1, [pc, #84]	; (508 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     4b4:	4a0d      	ldr	r2, [pc, #52]	; (4ec <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
     4b6:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     4b8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
     4bc:	2b00      	cmp	r3, #0
     4be:	d0fa      	beq.n	4b6 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
     4c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4c4:	4a11      	ldr	r2, [pc, #68]	; (50c <unused_interrupt_vector+0x188>)
     4c6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
     4ca:	e7fe      	b.n	4ca <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     4cc:	f000 ffe0 	bl	1490 <set_arm_clock>
     4d0:	e7be      	b.n	450 <unused_interrupt_vector+0xcc>
     4d2:	bf00      	nop
     4d4:	2027ff00 	.word	0x2027ff00
     4d8:	2027ff80 	.word	0x2027ff80
     4dc:	2027ffa8 	.word	0x2027ffa8
     4e0:	edb88320 	.word	0xedb88320
     4e4:	2027ffa0 	.word	0x2027ffa0
     4e8:	400fc000 	.word	0x400fc000
     4ec:	40084000 	.word	0x40084000
     4f0:	200005a4 	.word	0x200005a4
     4f4:	0bcd3d80 	.word	0x0bcd3d80
     4f8:	00249f00 	.word	0x00249f00
     4fc:	400d9000 	.word	0x400d9000
     500:	402e0000 	.word	0x402e0000
     504:	400f8000 	.word	0x400f8000
     508:	0bad00f1 	.word	0x0bad00f1
     50c:	05fa0004 	.word	0x05fa0004

00000510 <Panic_Temp_isr>:
  unused_interrupt_vector();
     510:	f7ff bf38 	b.w	384 <unused_interrupt_vector>

00000514 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     514:	4a12      	ldr	r2, [pc, #72]	; (560 <tempmonGetTemp+0x4c>)
     516:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
     51a:	075b      	lsls	r3, r3, #29
     51c:	d5fb      	bpl.n	516 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     51e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     522:	4810      	ldr	r0, [pc, #64]	; (564 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     524:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     528:	490f      	ldr	r1, [pc, #60]	; (568 <tempmonGetTemp+0x54>)
     52a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     52e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     532:	ed91 6a00 	vldr	s12, [r1]
     536:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     53a:	4a0c      	ldr	r2, [pc, #48]	; (56c <tempmonGetTemp+0x58>)
     53c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     540:	4b0b      	ldr	r3, [pc, #44]	; (570 <tempmonGetTemp+0x5c>)
     542:	edd2 6a00 	vldr	s13, [r2]
     546:	ee77 7ac7 	vsub.f32	s15, s15, s14
     54a:	ed93 7a00 	vldr	s14, [r3]
     54e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     552:	ee67 7a86 	vmul.f32	s15, s15, s12
     556:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
     55a:	ee37 0a40 	vsub.f32	s0, s14, s0
     55e:	4770      	bx	lr
     560:	400d8100 	.word	0x400d8100
     564:	20000d14 	.word	0x20000d14
     568:	20000d1c 	.word	0x20000d1c
     56c:	20000d20 	.word	0x20000d20
     570:	20000d18 	.word	0x20000d18

00000574 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     574:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
     576:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
     578:	b11b      	cbz	r3, 582 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     57a:	6853      	ldr	r3, [r2, #4]
     57c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     580:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     582:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     584:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     586:	b33c      	cbz	r4, 5d8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     588:	4b1a      	ldr	r3, [pc, #104]	; (5f4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
     58a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     58c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     590:	420c      	tst	r4, r1
     592:	d11d      	bne.n	5d0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     594:	4e18      	ldr	r6, [pc, #96]	; (5f8 <schedule_transfer+0x84>)
     596:	6877      	ldr	r7, [r6, #4]
     598:	e004      	b.n	5a4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     59a:	6874      	ldr	r4, [r6, #4]
     59c:	1be4      	subs	r4, r4, r7
     59e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     5a2:	d20b      	bcs.n	5bc <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     5a4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     5a8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     5ac:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     5b0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     5b4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     5b8:	0464      	lsls	r4, r4, #17
     5ba:	d5ee      	bpl.n	59a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     5bc:	400d      	ands	r5, r1
     5be:	d107      	bne.n	5d0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
     5c0:	4c0c      	ldr	r4, [pc, #48]	; (5f4 <schedule_transfer+0x80>)
		endpoint->status = 0;
     5c2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
     5c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     5ca:	430b      	orrs	r3, r1
     5cc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
     5d0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     5d2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     5d4:	bcf0      	pop	{r4, r5, r6, r7}
     5d6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
     5d8:	4d06      	ldr	r5, [pc, #24]	; (5f4 <schedule_transfer+0x80>)
	endpoint->status = 0;
     5da:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
     5de:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
     5e2:	430b      	orrs	r3, r1
     5e4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     5e8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
     5ea:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     5ec:	b662      	cpsie	i
}
     5ee:	bcf0      	pop	{r4, r5, r6, r7}
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop
     5f4:	402e0000 	.word	0x402e0000
     5f8:	e0001000 	.word	0xe0001000

000005fc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     5fc:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     5fe:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
     600:	b19d      	cbz	r5, 62a <run_callbacks+0x2e>
     602:	4606      	mov	r6, r0
     604:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
     606:	2400      	movs	r4, #0
     608:	e003      	b.n	612 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     60a:	6812      	ldr	r2, [r2, #0]
		count++;
     60c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
     60e:	2a01      	cmp	r2, #1
     610:	d00c      	beq.n	62c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
     612:	6853      	ldr	r3, [r2, #4]
     614:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     618:	d0f7      	beq.n	60a <run_callbacks+0xe>
			ep->first_transfer = t;
     61a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     61c:	b12c      	cbz	r4, 62a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
     61e:	4628      	mov	r0, r5
		ep->callback_function(first);
     620:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
     622:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
     624:	4798      	blx	r3
	while (count) {
     626:	3c01      	subs	r4, #1
     628:	d1f9      	bne.n	61e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
     62a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
     62c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
     630:	e7f4      	b.n	61c <run_callbacks+0x20>
     632:	bf00      	nop

00000634 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     634:	b430      	push	{r4, r5}
	if (len > 0) {
     636:	b9d9      	cbnz	r1, 670 <endpoint0_transmit.constprop.0+0x3c>
     638:	4c1f      	ldr	r4, [pc, #124]	; (6b8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
     63a:	4b20      	ldr	r3, [pc, #128]	; (6bc <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
     63c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     63e:	4a20      	ldr	r2, [pc, #128]	; (6c0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
     640:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     642:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
     646:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     648:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
     64a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     64e:	2480      	movs	r4, #128	; 0x80
     650:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     652:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     656:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     65a:	481a      	ldr	r0, [pc, #104]	; (6c4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
     65c:	432b      	orrs	r3, r5
     65e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     662:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
     664:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     668:	2b00      	cmp	r3, #0
     66a:	d1fb      	bne.n	664 <endpoint0_transmit.constprop.0+0x30>
}
     66c:	bc30      	pop	{r4, r5}
     66e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     670:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
     672:	4b15      	ldr	r3, [pc, #84]	; (6c8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     674:	4c10      	ldr	r4, [pc, #64]	; (6b8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
     676:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     678:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     67c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
     67e:	4a10      	ldr	r2, [pc, #64]	; (6c0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     680:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     682:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
     686:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     688:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     68a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     68e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
     690:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     692:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     696:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     69a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
     69c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
     69e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
     6a0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
     6a2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     6a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     6aa:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     6ae:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     6b2:	2b00      	cmp	r3, #0
     6b4:	d1fb      	bne.n	6ae <endpoint0_transmit.constprop.0+0x7a>
     6b6:	e7c0      	b.n	63a <endpoint0_transmit.constprop.0+0x6>
     6b8:	20000000 	.word	0x20000000
     6bc:	20000ac0 	.word	0x20000ac0
     6c0:	402e0000 	.word	0x402e0000
     6c4:	20000cbc 	.word	0x20000cbc
     6c8:	20000ae0 	.word	0x20000ae0

000006cc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
     6cc:	4908      	ldr	r1, [pc, #32]	; (6f0 <usb_stop_sof_interrupts+0x24>)
     6ce:	2201      	movs	r2, #1
     6d0:	780b      	ldrb	r3, [r1, #0]
     6d2:	fa02 f000 	lsl.w	r0, r2, r0
     6d6:	ea23 0000 	bic.w	r0, r3, r0
     6da:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
     6dc:	b930      	cbnz	r0, 6ec <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
     6de:	4a05      	ldr	r2, [pc, #20]	; (6f4 <usb_stop_sof_interrupts+0x28>)
     6e0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
     6e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     6e8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
     6ec:	4770      	bx	lr
     6ee:	bf00      	nop
     6f0:	20000d54 	.word	0x20000d54
     6f4:	402e0000 	.word	0x402e0000

000006f8 <usb_isr>:
{
     6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
     6fc:	4c97      	ldr	r4, [pc, #604]	; (95c <usb_isr+0x264>)
{
     6fe:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
     700:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     704:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
     706:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     70a:	d553      	bpl.n	7b4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     70c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     710:	2a00      	cmp	r2, #0
     712:	d04a      	beq.n	7aa <usb_isr+0xb2>
     714:	4e92      	ldr	r6, [pc, #584]	; (960 <usb_isr+0x268>)
     716:	f8df a260 	ldr.w	sl, [pc, #608]	; 978 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
     71a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 990 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     71e:	f8df b274 	ldr.w	fp, [pc, #628]	; 994 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     722:	f8df 8274 	ldr.w	r8, [pc, #628]	; 998 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
     726:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
     72a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
     72e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     736:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     73a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     73e:	049d      	lsls	r5, r3, #18
     740:	d5f5      	bpl.n	72e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     742:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     74a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     74e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     752:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     756:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
     75a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
     75e:	d1fa      	bne.n	756 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
     760:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
     762:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
     764:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
     768:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
     76c:	f000 81cf 	beq.w	b0e <usb_isr+0x416>
     770:	f200 80db 	bhi.w	92a <usb_isr+0x232>
     774:	f240 3102 	movw	r1, #770	; 0x302
     778:	428b      	cmp	r3, r1
     77a:	f000 81e7 	beq.w	b4c <usb_isr+0x454>
     77e:	f200 809a 	bhi.w	8b6 <usb_isr+0x1be>
     782:	2b82      	cmp	r3, #130	; 0x82
     784:	f000 81cb 	beq.w	b1e <usb_isr+0x426>
     788:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     78c:	f040 808a 	bne.w	8a4 <usb_isr+0x1ac>
		if (endpoint > 7) break;
     790:	f010 0f78 	tst.w	r0, #120	; 0x78
     794:	b283      	uxth	r3, r0
     796:	f000 8203 	beq.w	ba0 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     79a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     79e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     7a2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     7a6:	2a00      	cmp	r2, #0
     7a8:	d1bd      	bne.n	726 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     7aa:	4a6c      	ldr	r2, [pc, #432]	; (95c <usb_isr+0x264>)
     7ac:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     7b0:	2b00      	cmp	r3, #0
     7b2:	d142      	bne.n	83a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
     7b4:	067e      	lsls	r6, r7, #25
     7b6:	d516      	bpl.n	7e6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     7b8:	4b68      	ldr	r3, [pc, #416]	; (95c <usb_isr+0x264>)
     7ba:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
     7be:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     7c2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
     7c6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     7ca:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     7ce:	2c00      	cmp	r4, #0
     7d0:	d1fb      	bne.n	7ca <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     7d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     7d6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     7da:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
     7de:	f000 fd1d 	bl	121c <usb_serial_reset>
		endpointN_notify_mask = 0;
     7e2:	4b60      	ldr	r3, [pc, #384]	; (964 <usb_isr+0x26c>)
     7e4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
     7e6:	01fc      	lsls	r4, r7, #7
     7e8:	d503      	bpl.n	7f2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     7ea:	4b5f      	ldr	r3, [pc, #380]	; (968 <usb_isr+0x270>)
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	b103      	cbz	r3, 7f2 <usb_isr+0xfa>
     7f0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
     7f2:	01b8      	lsls	r0, r7, #6
     7f4:	d503      	bpl.n	7fe <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     7f6:	4b5d      	ldr	r3, [pc, #372]	; (96c <usb_isr+0x274>)
     7f8:	681b      	ldr	r3, [r3, #0]
     7fa:	b103      	cbz	r3, 7fe <usb_isr+0x106>
     7fc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
     7fe:	0779      	lsls	r1, r7, #29
     800:	d508      	bpl.n	814 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     802:	4b56      	ldr	r3, [pc, #344]	; (95c <usb_isr+0x264>)
     804:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     808:	f413 7300 	ands.w	r3, r3, #512	; 0x200
     80c:	d047      	beq.n	89e <usb_isr+0x1a6>
			usb_high_speed = 1;
     80e:	4b58      	ldr	r3, [pc, #352]	; (970 <usb_isr+0x278>)
     810:	2201      	movs	r2, #1
     812:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     814:	4b51      	ldr	r3, [pc, #324]	; (95c <usb_isr+0x264>)
     816:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
     81a:	061a      	lsls	r2, r3, #24
     81c:	d50a      	bpl.n	834 <usb_isr+0x13c>
     81e:	063b      	lsls	r3, r7, #24
     820:	d508      	bpl.n	834 <usb_isr+0x13c>
		if (usb_reboot_timer) {
     822:	4a54      	ldr	r2, [pc, #336]	; (974 <usb_isr+0x27c>)
     824:	7813      	ldrb	r3, [r2, #0]
     826:	b12b      	cbz	r3, 834 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
     828:	3b01      	subs	r3, #1
     82a:	b2db      	uxtb	r3, r3
     82c:	7013      	strb	r3, [r2, #0]
     82e:	2b00      	cmp	r3, #0
     830:	f000 8272 	beq.w	d18 <usb_isr+0x620>
}
     834:	b003      	add	sp, #12
     836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
     83a:	494f      	ldr	r1, [pc, #316]	; (978 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
     83c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
     840:	6808      	ldr	r0, [r1, #0]
     842:	4203      	tst	r3, r0
     844:	f040 81d1 	bne.w	bea <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
     848:	4a46      	ldr	r2, [pc, #280]	; (964 <usb_isr+0x26c>)
     84a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
     84c:	401c      	ands	r4, r3
     84e:	d0b1      	beq.n	7b4 <usb_isr+0xbc>
				while (tx) {
     850:	ea5f 4814 	movs.w	r8, r4, lsr #16
     854:	d010      	beq.n	878 <usb_isr+0x180>
     856:	4e42      	ldr	r6, [pc, #264]	; (960 <usb_isr+0x268>)
					tx &= ~(1<<p);
     858:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
     85c:	fa98 f5a8 	rbit	r5, r8
     860:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     864:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
     868:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     86c:	3040      	adds	r0, #64	; 0x40
     86e:	f7ff fec5 	bl	5fc <run_callbacks>
				while (tx) {
     872:	ea38 0805 	bics.w	r8, r8, r5
     876:	d1f1      	bne.n	85c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
     878:	b2a4      	uxth	r4, r4
				while(rx) {
     87a:	2c00      	cmp	r4, #0
     87c:	d09a      	beq.n	7b4 <usb_isr+0xbc>
     87e:	4e38      	ldr	r6, [pc, #224]	; (960 <usb_isr+0x268>)
					rx &= ~(1<<p);
     880:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
     884:	fa94 f5a4 	rbit	r5, r4
     888:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
     88c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
     890:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
     894:	f7ff feb2 	bl	5fc <run_callbacks>
				while(rx) {
     898:	43ac      	bics	r4, r5
     89a:	d1f3      	bne.n	884 <usb_isr+0x18c>
     89c:	e78a      	b.n	7b4 <usb_isr+0xbc>
			usb_high_speed = 0;
     89e:	4a34      	ldr	r2, [pc, #208]	; (970 <usb_isr+0x278>)
     8a0:	7013      	strb	r3, [r2, #0]
     8a2:	e7b7      	b.n	814 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
     8a4:	2b80      	cmp	r3, #128	; 0x80
     8a6:	f47f af78 	bne.w	79a <usb_isr+0xa2>
		reply_buffer[0] = 0;
     8aa:	4834      	ldr	r0, [pc, #208]	; (97c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
     8ac:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
     8ae:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     8b0:	f7ff fec0 	bl	634 <endpoint0_transmit.constprop.0>
		return;
     8b4:	e775      	b.n	7a2 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
     8b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     8ba:	f000 810b 	beq.w	ad4 <usb_isr+0x3dc>
     8be:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
     8c2:	2b01      	cmp	r3, #1
     8c4:	f63f af69 	bhi.w	79a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     8c8:	4b2d      	ldr	r3, [pc, #180]	; (980 <usb_isr+0x288>)
     8ca:	685d      	ldr	r5, [r3, #4]
     8cc:	2d00      	cmp	r5, #0
     8ce:	f43f af64 	beq.w	79a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     8d2:	fa1f fc8c 	uxth.w	ip, ip
     8d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     8da:	e004      	b.n	8e6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     8dc:	691d      	ldr	r5, [r3, #16]
     8de:	330c      	adds	r3, #12
     8e0:	2d00      	cmp	r5, #0
     8e2:	f43f af5a 	beq.w	79a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     8e6:	881a      	ldrh	r2, [r3, #0]
     8e8:	4572      	cmp	r2, lr
     8ea:	d1f7      	bne.n	8dc <usb_isr+0x1e4>
     8ec:	885a      	ldrh	r2, [r3, #2]
     8ee:	4562      	cmp	r2, ip
     8f0:	d1f4      	bne.n	8dc <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
     8f2:	ea4f 221e 	mov.w	r2, lr, lsr #8
     8f6:	2a03      	cmp	r2, #3
     8f8:	f000 81a5 	beq.w	c46 <usb_isr+0x54e>
					datalen = list->length;
     8fc:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
     8fe:	0c00      	lsrs	r0, r0, #16
     900:	4282      	cmp	r2, r0
     902:	bf28      	it	cs
     904:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
     906:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     90a:	f040 81a1 	bne.w	c50 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
     90e:	4b18      	ldr	r3, [pc, #96]	; (970 <usb_isr+0x278>)
     910:	491c      	ldr	r1, [pc, #112]	; (984 <usb_isr+0x28c>)
     912:	7818      	ldrb	r0, [r3, #0]
     914:	4b1c      	ldr	r3, [pc, #112]	; (988 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
     916:	9201      	str	r2, [sp, #4]
     918:	2800      	cmp	r0, #0
     91a:	bf18      	it	ne
     91c:	4619      	movne	r1, r3
     91e:	481b      	ldr	r0, [pc, #108]	; (98c <usb_isr+0x294>)
     920:	f000 ff2e 	bl	1780 <memcpy>
     924:	4d19      	ldr	r5, [pc, #100]	; (98c <usb_isr+0x294>)
     926:	9a01      	ldr	r2, [sp, #4]
     928:	e1e1      	b.n	cee <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
     92a:	f242 2121 	movw	r1, #8737	; 0x2221
     92e:	428b      	cmp	r3, r1
     930:	d07c      	beq.n	a2c <usb_isr+0x334>
     932:	d933      	bls.n	99c <usb_isr+0x2a4>
     934:	f242 3121 	movw	r1, #8993	; 0x2321
     938:	428b      	cmp	r3, r1
     93a:	f000 8081 	beq.w	a40 <usb_isr+0x348>
     93e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
     942:	428b      	cmp	r3, r1
     944:	f47f af29 	bne.w	79a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
     948:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
     94c:	b283      	uxth	r3, r0
     94e:	f47f af24 	bne.w	79a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
     952:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
     956:	f363 0c0f 	bfi	ip, r3, #0, #16
     95a:	e7b5      	b.n	8c8 <usb_isr+0x1d0>
     95c:	402e0000 	.word	0x402e0000
     960:	20000000 	.word	0x20000000
     964:	20000cc0 	.word	0x20000cc0
     968:	20000d40 	.word	0x20000d40
     96c:	20000d44 	.word	0x20000d44
     970:	20000d5a 	.word	0x20000d5a
     974:	20000d5b 	.word	0x20000d5b
     978:	20000cbc 	.word	0x20000cbc
     97c:	20000cdc 	.word	0x20000cdc
     980:	2000051c 	.word	0x2000051c
     984:	60001b28 	.word	0x60001b28
     988:	60001b8c 	.word	0x60001b8c
     98c:	20200000 	.word	0x20200000
     990:	20000cb4 	.word	0x20000cb4
     994:	b8c6cf5d 	.word	0xb8c6cf5d
     998:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
     99c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     9a0:	d066      	beq.n	a70 <usb_isr+0x378>
     9a2:	f242 0121 	movw	r1, #8225	; 0x2021
     9a6:	428b      	cmp	r3, r1
     9a8:	f47f aef7 	bne.w	79a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
     9ac:	0c03      	lsrs	r3, r0, #16
     9ae:	2b07      	cmp	r3, #7
     9b0:	f47f aef3 	bne.w	79a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
     9b4:	4bb2      	ldr	r3, [pc, #712]	; (c80 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
     9b6:	49b3      	ldr	r1, [pc, #716]	; (c84 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
     9b8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     9ba:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
     9bc:	49b2      	ldr	r1, [pc, #712]	; (c88 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     9be:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     9c0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
     9c4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
     9c8:	2201      	movs	r2, #1
     9ca:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     9cc:	4aaf      	ldr	r2, [pc, #700]	; (c8c <usb_isr+0x594>)
     9ce:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     9d0:	4aaf      	ldr	r2, [pc, #700]	; (c90 <usb_isr+0x598>)
     9d2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
     9d4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
     9d8:	f041 0101 	orr.w	r1, r1, #1
     9dc:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
     9e0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     9e4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     9e8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     9ea:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
     9ec:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     9f0:	2b00      	cmp	r3, #0
     9f2:	d1fb      	bne.n	9ec <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
     9f4:	4aa7      	ldr	r2, [pc, #668]	; (c94 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     9f6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     9f8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
     9fa:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     9fc:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     9fe:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a00:	f248 0380 	movw	r3, #32896	; 0x8080
     a04:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     a06:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     a0a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     a0e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     a16:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     a1e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
     a22:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a26:	2b00      	cmp	r3, #0
     a28:	d1fb      	bne.n	a22 <usb_isr+0x32a>
     a2a:	e6ba      	b.n	7a2 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
     a2c:	b280      	uxth	r0, r0
     a2e:	b938      	cbnz	r0, a40 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     a30:	4b99      	ldr	r3, [pc, #612]	; (c98 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
     a32:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     a36:	6819      	ldr	r1, [r3, #0]
     a38:	4b98      	ldr	r3, [pc, #608]	; (c9c <usb_isr+0x5a4>)
     a3a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     a3c:	4b98      	ldr	r3, [pc, #608]	; (ca0 <usb_isr+0x5a8>)
     a3e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
     a40:	4b94      	ldr	r3, [pc, #592]	; (c94 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
     a42:	2200      	movs	r2, #0
     a44:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
     a46:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
     a48:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     a4a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     a4c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a4e:	2280      	movs	r2, #128	; 0x80
     a50:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     a52:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     a56:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     a5a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     a62:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     a66:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a6a:	2b00      	cmp	r3, #0
     a6c:	d1fb      	bne.n	a66 <usb_isr+0x36e>
     a6e:	e698      	b.n	7a2 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
     a70:	f3c2 4207 	ubfx	r2, r2, #16, #8
     a74:	4b8b      	ldr	r3, [pc, #556]	; (ca4 <usb_isr+0x5ac>)
     a76:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     a78:	4b8b      	ldr	r3, [pc, #556]	; (ca8 <usb_isr+0x5b0>)
     a7a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     a7e:	4b8b      	ldr	r3, [pc, #556]	; (cac <usb_isr+0x5b4>)
     a80:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     a84:	4b8a      	ldr	r3, [pc, #552]	; (cb0 <usb_isr+0x5b8>)
     a86:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
     a8a:	f000 fbc9 	bl	1220 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
     a8e:	2280      	movs	r2, #128	; 0x80
     a90:	4629      	mov	r1, r5
     a92:	4888      	ldr	r0, [pc, #544]	; (cb4 <usb_isr+0x5bc>)
     a94:	f001 f80a 	bl	1aac <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
     a98:	4b87      	ldr	r3, [pc, #540]	; (cb8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a9a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     a9c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
     aa0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
     aa4:	4b7b      	ldr	r3, [pc, #492]	; (c94 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     aa6:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     aa8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
     aaa:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     aac:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
     aae:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     ab0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ab2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     ab6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     aba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     ac2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     ac6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
     aca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     ace:	2b00      	cmp	r3, #0
     ad0:	d1fb      	bne.n	aca <usb_isr+0x3d2>
     ad2:	e666      	b.n	7a2 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
     ad4:	4b6f      	ldr	r3, [pc, #444]	; (c94 <usb_isr+0x59c>)
     ad6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
     ad8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
     ada:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     adc:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
     ade:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     ae0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ae2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ae4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     ae8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     aec:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     af4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     af8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     afc:	2b00      	cmp	r3, #0
     afe:	d1fb      	bne.n	af8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     b00:	0c13      	lsrs	r3, r2, #16
     b02:	065b      	lsls	r3, r3, #25
     b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     b08:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
     b0c:	e649      	b.n	7a2 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
     b0e:	4b65      	ldr	r3, [pc, #404]	; (ca4 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
     b10:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
     b12:	486a      	ldr	r0, [pc, #424]	; (cbc <usb_isr+0x5c4>)
     b14:	781b      	ldrb	r3, [r3, #0]
     b16:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     b18:	f7ff fd8c 	bl	634 <endpoint0_transmit.constprop.0>
		return;
     b1c:	e641      	b.n	7a2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
     b1e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
     b20:	f010 0078 	ands.w	r0, r0, #120	; 0x78
     b24:	f47f ae39 	bne.w	79a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
     b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     b2c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
     b30:	4a62      	ldr	r2, [pc, #392]	; (cbc <usb_isr+0x5c4>)
     b32:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     b34:	0618      	lsls	r0, r3, #24
     b36:	f100 809e 	bmi.w	c76 <usb_isr+0x57e>
     b3a:	07cb      	lsls	r3, r1, #31
     b3c:	d501      	bpl.n	b42 <usb_isr+0x44a>
			reply_buffer[0] = 1;
     b3e:	2301      	movs	r3, #1
     b40:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     b42:	2102      	movs	r1, #2
     b44:	485d      	ldr	r0, [pc, #372]	; (cbc <usb_isr+0x5c4>)
     b46:	f7ff fd75 	bl	634 <endpoint0_transmit.constprop.0>
		return;
     b4a:	e62a      	b.n	7a2 <usb_isr+0xaa>
		if (endpoint > 7) break;
     b4c:	f010 0f78 	tst.w	r0, #120	; 0x78
     b50:	b283      	uxth	r3, r0
     b52:	f47f ae22 	bne.w	79a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
     b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     b5a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     b5e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
     b62:	bf14      	ite	ne
     b64:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     b68:	f043 0301 	orreq.w	r3, r3, #1
     b6c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     b70:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     b72:	4b48      	ldr	r3, [pc, #288]	; (c94 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     b74:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     b76:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     b78:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     b7a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     b7c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     b7e:	2280      	movs	r2, #128	; 0x80
     b80:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     b82:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     b86:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     b8a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     b92:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     b96:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     b9a:	2b00      	cmp	r3, #0
     b9c:	d1fb      	bne.n	b96 <usb_isr+0x49e>
     b9e:	e600      	b.n	7a2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
     ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     ba4:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     ba8:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
     bac:	bf14      	ite	ne
     bae:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     bb2:	f023 0301 	biceq.w	r3, r3, #1
     bb6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     bba:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     bbc:	4b35      	ldr	r3, [pc, #212]	; (c94 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     bbe:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     bc0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     bc2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     bc4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     bc6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     bc8:	2280      	movs	r2, #128	; 0x80
     bca:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     bcc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     bd0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     bd4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     bdc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     be0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     be4:	2b00      	cmp	r3, #0
     be6:	d1fb      	bne.n	be0 <usb_isr+0x4e8>
     be8:	e5db      	b.n	7a2 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
     bea:	2000      	movs	r0, #0
     bec:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     bee:	4926      	ldr	r1, [pc, #152]	; (c88 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     bf0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     bf2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     bf4:	f242 0121 	movw	r1, #8225	; 0x2021
     bf8:	428c      	cmp	r4, r1
     bfa:	f47f ae25 	bne.w	848 <usb_isr+0x150>
     bfe:	b280      	uxth	r0, r0
     c00:	2800      	cmp	r0, #0
     c02:	f47f ae21 	bne.w	848 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     c06:	492e      	ldr	r1, [pc, #184]	; (cc0 <usb_isr+0x5c8>)
     c08:	4c2e      	ldr	r4, [pc, #184]	; (cc4 <usb_isr+0x5cc>)
     c0a:	c903      	ldmia	r1, {r0, r1}
     c0c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
     c0e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     c10:	ea4f 4111 	mov.w	r1, r1, lsr #16
     c14:	6020      	str	r0, [r4, #0]
     c16:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
     c18:	f47f ae16 	bne.w	848 <usb_isr+0x150>
	__disable_irq();
     c1c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
     c1e:	482a      	ldr	r0, [pc, #168]	; (cc8 <usb_isr+0x5d0>)
     c20:	7801      	ldrb	r1, [r0, #0]
     c22:	f041 0108 	orr.w	r1, r1, #8
     c26:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
     c28:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
     c2c:	060d      	lsls	r5, r1, #24
     c2e:	d405      	bmi.n	c3c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     c30:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     c32:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     c34:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     c38:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
     c3c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
     c3e:	4a23      	ldr	r2, [pc, #140]	; (ccc <usb_isr+0x5d4>)
     c40:	2150      	movs	r1, #80	; 0x50
     c42:	7011      	strb	r1, [r2, #0]
     c44:	e600      	b.n	848 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
     c46:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
     c48:	782a      	ldrb	r2, [r5, #0]
     c4a:	4282      	cmp	r2, r0
     c4c:	bf28      	it	cs
     c4e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
     c50:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
     c54:	d144      	bne.n	ce0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
     c56:	4b1e      	ldr	r3, [pc, #120]	; (cd0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
     c58:	4d1e      	ldr	r5, [pc, #120]	; (cd4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
     c5a:	7818      	ldrb	r0, [r3, #0]
     c5c:	491e      	ldr	r1, [pc, #120]	; (cd8 <usb_isr+0x5e0>)
     c5e:	4b1f      	ldr	r3, [pc, #124]	; (cdc <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
     c60:	9201      	str	r2, [sp, #4]
     c62:	2800      	cmp	r0, #0
     c64:	bf18      	it	ne
     c66:	4619      	movne	r1, r3
     c68:	4628      	mov	r0, r5
     c6a:	f000 fd89 	bl	1780 <memcpy>
					usb_descriptor_buffer[1] = 7;
     c6e:	2307      	movs	r3, #7
     c70:	706b      	strb	r3, [r5, #1]
     c72:	9a01      	ldr	r2, [sp, #4]
     c74:	e03b      	b.n	cee <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     c76:	03c9      	lsls	r1, r1, #15
     c78:	f53f af61 	bmi.w	b3e <usb_isr+0x446>
     c7c:	e761      	b.n	b42 <usb_isr+0x44a>
     c7e:	bf00      	nop
     c80:	20000ae0 	.word	0x20000ae0
     c84:	20001cb4 	.word	0x20001cb4
     c88:	20000c80 	.word	0x20000c80
     c8c:	00070080 	.word	0x00070080
     c90:	20002cb4 	.word	0x20002cb4
     c94:	20000ac0 	.word	0x20000ac0
     c98:	20000d2c 	.word	0x20000d2c
     c9c:	20000d3c 	.word	0x20000d3c
     ca0:	20000d58 	.word	0x20000d58
     ca4:	20000d59 	.word	0x20000d59
     ca8:	00cc0002 	.word	0x00cc0002
     cac:	000200c8 	.word	0x000200c8
     cb0:	00c80002 	.word	0x00c80002
     cb4:	20000080 	.word	0x20000080
     cb8:	74d59319 	.word	0x74d59319
     cbc:	20000cdc 	.word	0x20000cdc
     cc0:	20000cb4 	.word	0x20000cb4
     cc4:	20000d34 	.word	0x20000d34
     cc8:	20000d54 	.word	0x20000d54
     ccc:	20000d5b 	.word	0x20000d5b
     cd0:	20000d5a 	.word	0x20000d5a
     cd4:	20200000 	.word	0x20200000
     cd8:	60001b8c 	.word	0x60001b8c
     cdc:	60001b28 	.word	0x60001b28
					memcpy(usb_descriptor_buffer, list->addr, datalen);
     ce0:	4629      	mov	r1, r5
     ce2:	4d10      	ldr	r5, [pc, #64]	; (d24 <usb_isr+0x62c>)
     ce4:	9201      	str	r2, [sp, #4]
     ce6:	4628      	mov	r0, r5
     ce8:	f000 fd4a 	bl	1780 <memcpy>
     cec:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     cee:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
     cf2:	4415      	add	r5, r2
	asm("dsb");
     cf4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
     cf8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     cfc:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
     d00:	3320      	adds	r3, #32
	} while (location < end_addr);
     d02:	429d      	cmp	r5, r3
     d04:	d8fa      	bhi.n	cfc <usb_isr+0x604>
	asm("dsb");
     d06:	f3bf 8f4f 	dsb	sy
	asm("isb");
     d0a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     d0e:	4805      	ldr	r0, [pc, #20]	; (d24 <usb_isr+0x62c>)
     d10:	4611      	mov	r1, r2
     d12:	f7ff fc8f 	bl	634 <endpoint0_transmit.constprop.0>
				return;
     d16:	e544      	b.n	7a2 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
     d18:	2003      	movs	r0, #3
     d1a:	f7ff fcd7 	bl	6cc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
     d1e:	f000 ff3b 	bl	1b98 <___reboot_Teensyduino__veneer>
     d22:	bf00      	nop
     d24:	20200000 	.word	0x20200000

00000d28 <usb_config_rx>:
{
     d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d2c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     d2e:	1e83      	subs	r3, r0, #2
     d30:	2b02      	cmp	r3, #2
     d32:	d901      	bls.n	d38 <usb_config_rx+0x10>
}
     d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     d38:	f8df 904c 	ldr.w	r9, [pc, #76]	; d88 <usb_config_rx+0x60>
     d3c:	4615      	mov	r5, r2
     d3e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
     d40:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     d42:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
     d46:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     d48:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
     d4c:	2100      	movs	r1, #0
     d4e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     d52:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
     d54:	f000 feaa 	bl	1aac <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     d58:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
     d5c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     d5e:	0952      	lsrs	r2, r2, #5
     d60:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
     d64:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
     d68:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     d6c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
     d70:	2f00      	cmp	r7, #0
     d72:	d0df      	beq.n	d34 <usb_config_rx+0xc>
     d74:	4a03      	ldr	r2, [pc, #12]	; (d84 <usb_config_rx+0x5c>)
     d76:	40b3      	lsls	r3, r6
     d78:	6811      	ldr	r1, [r2, #0]
     d7a:	430b      	orrs	r3, r1
     d7c:	6013      	str	r3, [r2, #0]
}
     d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d82:	bf00      	nop
     d84:	20000cc0 	.word	0x20000cc0
     d88:	20000000 	.word	0x20000000

00000d8c <usb_config_tx>:
{
     d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d90:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     d92:	1e81      	subs	r1, r0, #2
     d94:	2902      	cmp	r1, #2
     d96:	d901      	bls.n	d9c <usb_config_tx+0x10>
}
     d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     d9c:	01c7      	lsls	r7, r0, #7
     d9e:	f8df 904c 	ldr.w	r9, [pc, #76]	; dec <usb_config_tx+0x60>
     da2:	4692      	mov	sl, r2
     da4:	4604      	mov	r4, r0
     da6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
     da8:	223c      	movs	r2, #60	; 0x3c
     daa:	2100      	movs	r1, #0
     dac:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     dae:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     db2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
     db4:	f108 0004 	add.w	r0, r8, #4
     db8:	f000 fe78 	bl	1aac <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     dbc:	faba f28a 	clz	r2, sl
     dc0:	0952      	lsrs	r2, r2, #5
     dc2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
     dc6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
     dca:	2201      	movs	r2, #1
	qh->callback_function = callback;
     dcc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     dd0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
     dd4:	2e00      	cmp	r6, #0
     dd6:	d0df      	beq.n	d98 <usb_config_tx+0xc>
     dd8:	4b03      	ldr	r3, [pc, #12]	; (de8 <usb_config_tx+0x5c>)
     dda:	3410      	adds	r4, #16
     ddc:	6819      	ldr	r1, [r3, #0]
     dde:	40a2      	lsls	r2, r4
     de0:	430a      	orrs	r2, r1
     de2:	601a      	str	r2, [r3, #0]
}
     de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     de8:	20000cc0 	.word	0x20000cc0
     dec:	20000000 	.word	0x20000000

00000df0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
     df0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
     df2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
     df4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
     df6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
     dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
     dfe:	b410      	push	{r4}
	transfer->next = 1;
     e00:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
     e02:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
     e04:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
     e08:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
     e0a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
     e0e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
     e12:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
     e14:	6181      	str	r1, [r0, #24]
}
     e16:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
     e1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
     e1e:	4770      	bx	lr

00000e20 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     e20:	1e83      	subs	r3, r0, #2
{
     e22:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     e24:	2b02      	cmp	r3, #2
     e26:	d900      	bls.n	e2a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
     e28:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
     e2a:	4b06      	ldr	r3, [pc, #24]	; (e44 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
     e2c:	f100 0110 	add.w	r1, r0, #16
     e30:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
     e34:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
     e38:	fa0c f101 	lsl.w	r1, ip, r1
     e3c:	3040      	adds	r0, #64	; 0x40
     e3e:	f7ff bb99 	b.w	574 <schedule_transfer>
     e42:	bf00      	nop
     e44:	20000000 	.word	0x20000000

00000e48 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     e48:	1e83      	subs	r3, r0, #2
{
     e4a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     e4c:	2b02      	cmp	r3, #2
     e4e:	d900      	bls.n	e52 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
     e50:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
     e52:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
     e54:	4b02      	ldr	r3, [pc, #8]	; (e60 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
     e56:	4081      	lsls	r1, r0
     e58:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
     e5c:	f7ff bb8a 	b.w	574 <schedule_transfer>
     e60:	20000000 	.word	0x20000000

00000e64 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
     e64:	6840      	ldr	r0, [r0, #4]
#endif
}
     e66:	4770      	bx	lr

00000e68 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
     e68:	4a12      	ldr	r2, [pc, #72]	; (eb4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
     e6a:	4b13      	ldr	r3, [pc, #76]	; (eb8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
     e6c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
     e70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
     e74:	4298      	cmp	r0, r3
{
     e76:	b510      	push	{r4, lr}
     e78:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
     e7a:	d202      	bcs.n	e82 <usb_init_serialnumber+0x1a>
     e7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     e80:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
     e82:	4c0e      	ldr	r4, [pc, #56]	; (ebc <usb_init_serialnumber+0x54>)
     e84:	a901      	add	r1, sp, #4
     e86:	220a      	movs	r2, #10
     e88:	f000 fd14 	bl	18b4 <ultoa>
	for (i=0; i<10; i++) {
     e8c:	a901      	add	r1, sp, #4
     e8e:	2300      	movs	r3, #0
     e90:	4620      	mov	r0, r4
		char c = buf[i];
     e92:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
     e96:	3301      	adds	r3, #1
		if (!c) break;
     e98:	b13a      	cbz	r2, eaa <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
     e9a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
     e9c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
     ea0:	d1f7      	bne.n	e92 <usb_init_serialnumber+0x2a>
     ea2:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
     ea4:	7023      	strb	r3, [r4, #0]
}
     ea6:	b004      	add	sp, #16
     ea8:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
     eaa:	005b      	lsls	r3, r3, #1
     eac:	b2db      	uxtb	r3, r3
     eae:	7023      	strb	r3, [r4, #0]
}
     eb0:	b004      	add	sp, #16
     eb2:	bd10      	pop	{r4, pc}
     eb4:	401f4400 	.word	0x401f4400
     eb8:	00989680 	.word	0x00989680
     ebc:	200005f8 	.word	0x200005f8

00000ec0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     ec2:	4c14      	ldr	r4, [pc, #80]	; (f14 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
     ec4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     ec8:	4e13      	ldr	r6, [pc, #76]	; (f18 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
     eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     ece:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     ed2:	4f12      	ldr	r7, [pc, #72]	; (f1c <rx_queue_transfer+0x5c>)
     ed4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
     ed8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
     eda:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     ede:	4621      	mov	r1, r4
     ee0:	883a      	ldrh	r2, [r7, #0]
     ee2:	4630      	mov	r0, r6
     ee4:	f7ff ff84 	bl	df0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
     ee8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
     eea:	4423      	add	r3, r4
	asm("dsb");
     eec:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
     ef0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
     ef4:	3420      	adds	r4, #32
	} while (location < end_addr);
     ef6:	42a3      	cmp	r3, r4
     ef8:	d8fa      	bhi.n	ef0 <rx_queue_transfer+0x30>
	asm("dsb");
     efa:	f3bf 8f4f 	dsb	sy
	asm("isb");
     efe:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     f02:	2003      	movs	r0, #3
     f04:	4631      	mov	r1, r6
     f06:	f7ff ff9f 	bl	e48 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     f0e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
     f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f14:	20200080 	.word	0x20200080
     f18:	20000b00 	.word	0x20000b00
     f1c:	20000d48 	.word	0x20000d48

00000f20 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     f20:	4b24      	ldr	r3, [pc, #144]	; (fb4 <rx_event+0x94>)
{
     f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     f26:	881c      	ldrh	r4, [r3, #0]
     f28:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
     f2a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     f2c:	f3c3 430e 	ubfx	r3, r3, #16, #15
     f30:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     f32:	2c00      	cmp	r4, #0
     f34:	dd24      	ble.n	f80 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
     f36:	4920      	ldr	r1, [pc, #128]	; (fb8 <rx_event+0x98>)
		if (head != rx_tail) {
     f38:	4820      	ldr	r0, [pc, #128]	; (fbc <rx_event+0x9c>)
		uint32_t head = rx_head;
     f3a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
     f3c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
     f3e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
     f40:	4e1f      	ldr	r6, [pc, #124]	; (fc0 <rx_event+0xa0>)
		if (head != rx_tail) {
     f42:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
     f44:	481f      	ldr	r0, [pc, #124]	; (fc4 <rx_event+0xa4>)
		if (head != rx_tail) {
     f46:	d007      	beq.n	f58 <rx_event+0x38>
			uint32_t ii = rx_list[head];
     f48:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     f4c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     f50:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
     f54:	4294      	cmp	r4, r2
     f56:	d918      	bls.n	f8a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     f58:	3301      	adds	r3, #1
		rx_index[i] = 0;
     f5a:	2200      	movs	r2, #0
		rx_count[i] = len;
     f5c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
     f60:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
     f62:	4e19      	ldr	r6, [pc, #100]	; (fc8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     f64:	bf88      	it	hi
     f66:	4613      	movhi	r3, r2
		rx_index[i] = 0;
     f68:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
     f6c:	bf98      	it	ls
     f6e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
     f70:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
     f72:	4b16      	ldr	r3, [pc, #88]	; (fcc <rx_event+0xac>)
		rx_head = head;
     f74:	700a      	strb	r2, [r1, #0]
		rx_available += len;
     f76:	681a      	ldr	r2, [r3, #0]
     f78:	4414      	add	r4, r2
     f7a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
     f80:	4628      	mov	r0, r5
}
     f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
     f86:	f7ff bf9b 	b.w	ec0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     f8a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
     f8e:	4910      	ldr	r1, [pc, #64]	; (fd0 <rx_event+0xb0>)
     f90:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
     f92:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     f94:	4408      	add	r0, r1
     f96:	eb01 2145 	add.w	r1, r1, r5, lsl #9
     f9a:	f000 fbf1 	bl	1780 <memcpy>
				rx_available += len;
     f9e:	4a0b      	ldr	r2, [pc, #44]	; (fcc <rx_event+0xac>)
				rx_queue_transfer(i);
     fa0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
     fa2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     fa6:	6813      	ldr	r3, [r2, #0]
     fa8:	4423      	add	r3, r4
}
     faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
     fae:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
     fb0:	f7ff bf86 	b.w	ec0 <rx_queue_transfer>
     fb4:	20000d48 	.word	0x20000d48
     fb8:	20000d52 	.word	0x20000d52
     fbc:	20000d53 	.word	0x20000d53
     fc0:	20000ce8 	.word	0x20000ce8
     fc4:	20000d08 	.word	0x20000d08
     fc8:	20000cf8 	.word	0x20000cf8
     fcc:	20000ce4 	.word	0x20000ce4
     fd0:	20200080 	.word	0x20200080

00000fd4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     fd4:	4b1d      	ldr	r3, [pc, #116]	; (104c <usb_serial_flush_callback+0x78>)
     fd6:	781a      	ldrb	r2, [r3, #0]
     fd8:	2a00      	cmp	r2, #0
     fda:	d136      	bne.n	104a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
     fdc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     fe0:	4a1b      	ldr	r2, [pc, #108]	; (1050 <usb_serial_flush_callback+0x7c>)
     fe2:	7812      	ldrb	r2, [r2, #0]
     fe4:	b38a      	cbz	r2, 104a <usb_serial_flush_callback+0x76>
{
     fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
     fea:	4d1a      	ldr	r5, [pc, #104]	; (1054 <usb_serial_flush_callback+0x80>)
     fec:	882a      	ldrh	r2, [r5, #0]
     fee:	b352      	cbz	r2, 1046 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     ff0:	4e19      	ldr	r6, [pc, #100]	; (1058 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     ff2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
     ff6:	4f19      	ldr	r7, [pc, #100]	; (105c <usb_serial_flush_callback+0x88>)
     ff8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     ffa:	4c19      	ldr	r4, [pc, #100]	; (1060 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
     ffc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1000:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1004:	4642      	mov	r2, r8
    1006:	4638      	mov	r0, r7
    1008:	4621      	mov	r1, r4
    100a:	f7ff fef1 	bl	df0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    100e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    1012:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1016:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    101a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    101e:	3420      	adds	r4, #32
	} while (location < end_addr);
    1020:	42a2      	cmp	r2, r4
    1022:	d8fa      	bhi.n	101a <usb_serial_flush_callback+0x46>
	asm("dsb");
    1024:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1028:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    102c:	2004      	movs	r0, #4
    102e:	4639      	mov	r1, r7
    1030:	f7ff fef6 	bl	e20 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1034:	7833      	ldrb	r3, [r6, #0]
    1036:	3301      	adds	r3, #1
    1038:	b2db      	uxtb	r3, r3
    103a:	2b03      	cmp	r3, #3
    103c:	bf88      	it	hi
    103e:	2300      	movhi	r3, #0
    1040:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1042:	2300      	movs	r3, #0
    1044:	802b      	strh	r3, [r5, #0]
}
    1046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    104a:	4770      	bx	lr
    104c:	20000d57 	.word	0x20000d57
    1050:	20000d59 	.word	0x20000d59
    1054:	20000d4a 	.word	0x20000d4a
    1058:	20000d56 	.word	0x20000d56
    105c:	20000c00 	.word	0x20000c00
    1060:	20201080 	.word	0x20201080

00001064 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    1064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1068:	b085      	sub	sp, #20
	while (size > 0) {
    106a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    106e:	2900      	cmp	r1, #0
    1070:	f000 80bf 	beq.w	11f2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    1074:	2300      	movs	r3, #0
    1076:	4c60      	ldr	r4, [pc, #384]	; (11f8 <usb_serial_write.part.0+0x194>)
    1078:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1214 <usb_serial_write.part.0+0x1b0>
    107c:	f8df a198 	ldr.w	sl, [pc, #408]	; 1218 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    1080:	4f5e      	ldr	r7, [pc, #376]	; (11fc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    1082:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    1084:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    1086:	4a5e      	ldr	r2, [pc, #376]	; (1200 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    1088:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    108a:	4b5e      	ldr	r3, [pc, #376]	; (1204 <usb_serial_write.part.0+0x1a0>)
    108c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    108e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    1092:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    1096:	2b00      	cmp	r3, #0
    1098:	f040 80a7 	bne.w	11ea <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    109c:	461e      	mov	r6, r3
		int waiting=0;
    109e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    10a0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    10a2:	4648      	mov	r0, r9
    10a4:	f7ff fede 	bl	e64 <usb_transfer_status>
			if (!(status & 0x80)) {
    10a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    10ac:	f000 808c 	beq.w	11c8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    10b0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    10b4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    10b8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    10bc:	b905      	cbnz	r5, 10c0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    10be:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    10c0:	2b00      	cmp	r3, #0
    10c2:	d17d      	bne.n	11c0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    10c4:	683b      	ldr	r3, [r7, #0]
    10c6:	1b9b      	subs	r3, r3, r6
    10c8:	2b78      	cmp	r3, #120	; 0x78
    10ca:	f200 8087 	bhi.w	11dc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    10ce:	4b4e      	ldr	r3, [pc, #312]	; (1208 <usb_serial_write.part.0+0x1a4>)
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d074      	beq.n	11c0 <usb_serial_write.part.0+0x15c>
			yield();
    10d6:	f000 f93b 	bl	1350 <yield>
			tx_noautoflush = 1;
    10da:	2201      	movs	r2, #1
		while (!tx_available) {
    10dc:	f8b8 3000 	ldrh.w	r3, [r8]
    10e0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    10e2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    10e4:	2b00      	cmp	r3, #0
    10e6:	d0dc      	beq.n	10a2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    10e8:	4a46      	ldr	r2, [pc, #280]	; (1204 <usb_serial_write.part.0+0x1a0>)
    10ea:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    10ee:	7811      	ldrb	r1, [r2, #0]
    10f0:	461a      	mov	r2, r3
    10f2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    10f6:	4d45      	ldr	r5, [pc, #276]	; (120c <usb_serial_write.part.0+0x1a8>)
    10f8:	02c9      	lsls	r1, r1, #11
    10fa:	4428      	add	r0, r5
		if (size >= tx_available) {
    10fc:	9d01      	ldr	r5, [sp, #4]
    10fe:	4295      	cmp	r5, r2
    1100:	d217      	bcs.n	1132 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    1102:	9303      	str	r3, [sp, #12]
    1104:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    1108:	462a      	mov	r2, r5
    110a:	f000 fb39 	bl	1780 <memcpy>
			tx_available -= size;
    110e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1110:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    1114:	1b5b      	subs	r3, r3, r5
    1116:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    111a:	4b3d      	ldr	r3, [pc, #244]	; (1210 <usb_serial_write.part.0+0x1ac>)
    111c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    1120:	f3bf 8f4f 	dsb	sy
			sent += size;
    1124:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    1126:	2300      	movs	r3, #0
			sent += size;
    1128:	4428      	add	r0, r5
		tx_noautoflush = 0;
    112a:	7023      	strb	r3, [r4, #0]
}
    112c:	b005      	add	sp, #20
    112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1132:	4b36      	ldr	r3, [pc, #216]	; (120c <usb_serial_write.part.0+0x1a8>)
    1134:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    1136:	9902      	ldr	r1, [sp, #8]
    1138:	f000 fb22 	bl	1780 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    113c:	2300      	movs	r3, #0
    113e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1142:	4629      	mov	r1, r5
    1144:	4648      	mov	r0, r9
    1146:	f7ff fe53 	bl	df0 <usb_prepare_transfer>
	asm("dsb");
    114a:	f3bf 8f4f 	dsb	sy
    114e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    1152:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    1156:	4293      	cmp	r3, r2
    1158:	bf34      	ite	cc
    115a:	2301      	movcc	r3, #1
    115c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    115e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1162:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    1166:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    116a:	3520      	adds	r5, #32
	} while (location < end_addr);
    116c:	42ab      	cmp	r3, r5
    116e:	d1fa      	bne.n	1166 <usb_serial_write.part.0+0x102>
	asm("dsb");
    1170:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1174:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1178:	2004      	movs	r0, #4
    117a:	4649      	mov	r1, r9
    117c:	f7ff fe50 	bl	e20 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1180:	4a20      	ldr	r2, [pc, #128]	; (1204 <usb_serial_write.part.0+0x1a0>)
    1182:	7813      	ldrb	r3, [r2, #0]
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	2b03      	cmp	r3, #3
    118a:	bf84      	itt	hi
    118c:	2300      	movhi	r3, #0
    118e:	4a1d      	ldrhi	r2, [pc, #116]	; (1204 <usb_serial_write.part.0+0x1a0>)
    1190:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1192:	f8b8 3000 	ldrh.w	r3, [r8]
    1196:	9a01      	ldr	r2, [sp, #4]
    1198:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    119a:	9a00      	ldr	r2, [sp, #0]
    119c:	441a      	add	r2, r3
			size -= tx_available;
    119e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    11a0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    11a2:	9a02      	ldr	r2, [sp, #8]
    11a4:	441a      	add	r2, r3
			tx_available = 0;
    11a6:	2300      	movs	r3, #0
			data += tx_available;
    11a8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    11aa:	4a19      	ldr	r2, [pc, #100]	; (1210 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    11ac:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    11b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    11b4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    11b8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    11ba:	2900      	cmp	r1, #0
    11bc:	f47f af62 	bne.w	1084 <usb_serial_write.part.0+0x20>
	return sent;
    11c0:	9800      	ldr	r0, [sp, #0]
}
    11c2:	b005      	add	sp, #20
    11c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    11c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    11cc:	4b0d      	ldr	r3, [pc, #52]	; (1204 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    11ce:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    11d2:	7819      	ldrb	r1, [r3, #0]
				break;
    11d4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    11d6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    11da:	e78a      	b.n	10f2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    11dc:	2301      	movs	r3, #1
				return sent;
    11de:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    11e0:	f88a 3000 	strb.w	r3, [sl]
}
    11e4:	b005      	add	sp, #20
    11e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    11ea:	461a      	mov	r2, r3
    11ec:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    11f0:	e77f      	b.n	10f2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    11f2:	9801      	ldr	r0, [sp, #4]
	return sent;
    11f4:	e7e5      	b.n	11c2 <usb_serial_write.part.0+0x15e>
    11f6:	bf00      	nop
    11f8:	20000d57 	.word	0x20000d57
    11fc:	20000d2c 	.word	0x20000d2c
    1200:	20000c00 	.word	0x20000c00
    1204:	20000d56 	.word	0x20000d56
    1208:	20000d59 	.word	0x20000d59
    120c:	20201080 	.word	0x20201080
    1210:	402e0000 	.word	0x402e0000
    1214:	20000d4a 	.word	0x20000d4a
    1218:	20000d55 	.word	0x20000d55

0000121c <usb_serial_reset>:
}
    121c:	4770      	bx	lr
    121e:	bf00      	nop

00001220 <usb_serial_configure>:
	if (usb_high_speed) {
    1220:	4b2d      	ldr	r3, [pc, #180]	; (12d8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1222:	2100      	movs	r1, #0
    1224:	2280      	movs	r2, #128	; 0x80
    1226:	482d      	ldr	r0, [pc, #180]	; (12dc <usb_serial_configure+0xbc>)
{
    1228:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    122a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    122c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    122e:	4d2c      	ldr	r5, [pc, #176]	; (12e0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    1230:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    1232:	4e2c      	ldr	r6, [pc, #176]	; (12e4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    1234:	bf0c      	ite	eq
    1236:	2340      	moveq	r3, #64	; 0x40
    1238:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    123c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    123e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1240:	f000 fc34 	bl	1aac <memset>
	tx_head = 0;
    1244:	4a28      	ldr	r2, [pc, #160]	; (12e8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1246:	4621      	mov	r1, r4
	tx_available = 0;
    1248:	4b28      	ldr	r3, [pc, #160]	; (12ec <usb_serial_configure+0xcc>)
	tx_head = 0;
    124a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    124c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1250:	4827      	ldr	r0, [pc, #156]	; (12f0 <usb_serial_configure+0xd0>)
	tx_available = 0;
    1252:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1254:	f000 fc2a 	bl	1aac <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1258:	4a26      	ldr	r2, [pc, #152]	; (12f4 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    125a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    125c:	4b26      	ldr	r3, [pc, #152]	; (12f8 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    125e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    1260:	e9c2 4400 	strd	r4, r4, [r2]
    1264:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1268:	4a24      	ldr	r2, [pc, #144]	; (12fc <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    126a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    126e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1270:	4a23      	ldr	r2, [pc, #140]	; (1300 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    1272:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1276:	4b23      	ldr	r3, [pc, #140]	; (1304 <usb_serial_configure+0xe4>)
    1278:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    127a:	4623      	mov	r3, r4
	rx_available = 0;
    127c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    127e:	4622      	mov	r2, r4
    1280:	f7ff fd84 	bl	d8c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1284:	4622      	mov	r2, r4
    1286:	8831      	ldrh	r1, [r6, #0]
    1288:	2003      	movs	r0, #3
    128a:	4b1f      	ldr	r3, [pc, #124]	; (1308 <usb_serial_configure+0xe8>)
    128c:	f7ff fd4c 	bl	d28 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1290:	4623      	mov	r3, r4
    1292:	2201      	movs	r2, #1
    1294:	8829      	ldrh	r1, [r5, #0]
    1296:	2004      	movs	r0, #4
    1298:	f7ff fd78 	bl	d8c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    129c:	4620      	mov	r0, r4
    129e:	3401      	adds	r4, #1
    12a0:	f7ff fe0e 	bl	ec0 <rx_queue_transfer>
    12a4:	2c08      	cmp	r4, #8
    12a6:	d1f9      	bne.n	129c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    12a8:	4b18      	ldr	r3, [pc, #96]	; (130c <usb_serial_configure+0xec>)
    12aa:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    12ac:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    12ae:	4818      	ldr	r0, [pc, #96]	; (1310 <usb_serial_configure+0xf0>)
    12b0:	4c18      	ldr	r4, [pc, #96]	; (1314 <usb_serial_configure+0xf4>)
    12b2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    12b4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    12b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    12bc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    12c0:	4915      	ldr	r1, [pc, #84]	; (1318 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    12c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    12c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    12ca:	b121      	cbz	r1, 12d6 <usb_serial_configure+0xb6>
    12cc:	4a13      	ldr	r2, [pc, #76]	; (131c <usb_serial_configure+0xfc>)
    12ce:	7813      	ldrb	r3, [r2, #0]
    12d0:	f043 0301 	orr.w	r3, r3, #1
    12d4:	7013      	strb	r3, [r2, #0]
}
    12d6:	bd70      	pop	{r4, r5, r6, pc}
    12d8:	20000d5a 	.word	0x20000d5a
    12dc:	20000c00 	.word	0x20000c00
    12e0:	20000d4c 	.word	0x20000d4c
    12e4:	20000d48 	.word	0x20000d48
    12e8:	20000d56 	.word	0x20000d56
    12ec:	20000d4a 	.word	0x20000d4a
    12f0:	20000b00 	.word	0x20000b00
    12f4:	20000ce8 	.word	0x20000ce8
    12f8:	20000cf8 	.word	0x20000cf8
    12fc:	20000d52 	.word	0x20000d52
    1300:	20000ce4 	.word	0x20000ce4
    1304:	20000d53 	.word	0x20000d53
    1308:	00000f21 	.word	0x00000f21
    130c:	402e0000 	.word	0x402e0000
    1310:	20000d40 	.word	0x20000d40
    1314:	00000fd5 	.word	0x00000fd5
    1318:	00000000 	.word	0x00000000
    131c:	20000d5c 	.word	0x20000d5c

00001320 <usb_serial_available>:
	uint32_t n = rx_available;
    1320:	4b04      	ldr	r3, [pc, #16]	; (1334 <usb_serial_available+0x14>)
{
    1322:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    1324:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    1326:	b10c      	cbz	r4, 132c <usb_serial_available+0xc>
}
    1328:	4620      	mov	r0, r4
    132a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    132c:	f000 f810 	bl	1350 <yield>
}
    1330:	4620      	mov	r0, r4
    1332:	bd10      	pop	{r4, pc}
    1334:	20000ce4 	.word	0x20000ce4

00001338 <usb_serial_write>:
	if (!usb_configuration) return 0;
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <usb_serial_write+0x14>)
    133a:	781b      	ldrb	r3, [r3, #0]
    133c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1340:	b10b      	cbz	r3, 1346 <usb_serial_write+0xe>
    1342:	f7ff be8f 	b.w	1064 <usb_serial_write.part.0>
}
    1346:	4610      	mov	r0, r2
    1348:	4770      	bx	lr
    134a:	bf00      	nop
    134c:	20000d59 	.word	0x20000d59

00001350 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    1350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    1354:	4b2d      	ldr	r3, [pc, #180]	; (140c <yield+0xbc>)
    1356:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    1358:	b166      	cbz	r6, 1374 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    135a:	4f2d      	ldr	r7, [pc, #180]	; (1410 <yield+0xc0>)
    135c:	783b      	ldrb	r3, [r7, #0]
    135e:	b94b      	cbnz	r3, 1374 <yield+0x24>
	running = 1;
    1360:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1362:	07f1      	lsls	r1, r6, #31
	running = 1;
    1364:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1366:	d443      	bmi.n	13f0 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    1368:	07b2      	lsls	r2, r6, #30
    136a:	d426      	bmi.n	13ba <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    136c:	2300      	movs	r3, #0
    136e:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    1370:	0773      	lsls	r3, r6, #29
    1372:	d401      	bmi.n	1378 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    1374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1378:	4b26      	ldr	r3, [pc, #152]	; (1414 <yield+0xc4>)
    137a:	681a      	ldr	r2, [r3, #0]
    137c:	2a00      	cmp	r2, #0
    137e:	d0f9      	beq.n	1374 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1380:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1384:	2a00      	cmp	r2, #0
    1386:	d1f5      	bne.n	1374 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1388:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    138c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    138e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    1390:	2800      	cmp	r0, #0
    1392:	d034      	beq.n	13fe <yield+0xae>
		if (runningFromYield) {
    1394:	4c20      	ldr	r4, [pc, #128]	; (1418 <yield+0xc8>)
    1396:	7821      	ldrb	r1, [r4, #0]
    1398:	2900      	cmp	r1, #0
    139a:	d130      	bne.n	13fe <yield+0xae>
		runningFromYield = true;
    139c:	2201      	movs	r2, #1
    139e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    13a0:	6942      	ldr	r2, [r0, #20]
    13a2:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    13a4:	2a00      	cmp	r2, #0
    13a6:	d02e      	beq.n	1406 <yield+0xb6>
			firstYield->_prev = nullptr;
    13a8:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    13aa:	b905      	cbnz	r5, 13ae <yield+0x5e>
    13ac:	b662      	cpsie	i
		first->_triggered = false;
    13ae:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    13b0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    13b2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    13b4:	4798      	blx	r3
		runningFromYield = false;
    13b6:	7025      	strb	r5, [r4, #0]
    13b8:	e7dc      	b.n	1374 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    13ba:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1420 <yield+0xd0>
    13be:	f898 3000 	ldrb.w	r3, [r8]
    13c2:	2b00      	cmp	r3, #0
    13c4:	d0d2      	beq.n	136c <yield+0x1c>
    13c6:	2500      	movs	r5, #0
    13c8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1424 <yield+0xd4>
    13cc:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    13ce:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    13d2:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    13d4:	6823      	ldr	r3, [r4, #0]
    13d6:	4620      	mov	r0, r4
    13d8:	691b      	ldr	r3, [r3, #16]
    13da:	4798      	blx	r3
    13dc:	b110      	cbz	r0, 13e4 <yield+0x94>
    13de:	6963      	ldr	r3, [r4, #20]
    13e0:	689b      	ldr	r3, [r3, #8]
    13e2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    13e4:	f898 2000 	ldrb.w	r2, [r8]
    13e8:	b2eb      	uxtb	r3, r5
    13ea:	429a      	cmp	r2, r3
    13ec:	d8ef      	bhi.n	13ce <yield+0x7e>
    13ee:	e7bd      	b.n	136c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    13f0:	f7ff ff96 	bl	1320 <usb_serial_available>
		if (Serial.available()) serialEvent();
    13f4:	2800      	cmp	r0, #0
    13f6:	d0b7      	beq.n	1368 <yield+0x18>
    13f8:	f3af 8000 	nop.w
    13fc:	e7b4      	b.n	1368 <yield+0x18>
		if (doit) __enable_irq();
    13fe:	2d00      	cmp	r5, #0
    1400:	d1b8      	bne.n	1374 <yield+0x24>
    1402:	b662      	cpsie	i
    1404:	e7b6      	b.n	1374 <yield+0x24>
			lastYield = nullptr;
    1406:	4b05      	ldr	r3, [pc, #20]	; (141c <yield+0xcc>)
    1408:	601a      	str	r2, [r3, #0]
    140a:	e7ce      	b.n	13aa <yield+0x5a>
    140c:	20000d5c 	.word	0x20000d5c
    1410:	20000d50 	.word	0x20000d50
    1414:	20000c88 	.word	0x20000c88
    1418:	20000d4e 	.word	0x20000d4e
    141c:	20000c94 	.word	0x20000c94
    1420:	20000d4f 	.word	0x20000d4f
    1424:	20000c98 	.word	0x20000c98

00001428 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1428:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    142a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    142e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1430:	4c0c      	ldr	r4, [pc, #48]	; (1464 <EventResponder::runFromInterrupt()+0x3c>)
    1432:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1434:	b180      	cbz	r0, 1458 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1436:	4e0c      	ldr	r6, [pc, #48]	; (1468 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    1438:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    143a:	6943      	ldr	r3, [r0, #20]
    143c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    143e:	b173      	cbz	r3, 145e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1440:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    1442:	b902      	cbnz	r2, 1446 <EventResponder::runFromInterrupt()+0x1e>
    1444:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    1446:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1448:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    144a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    144c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1450:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1452:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1454:	2800      	cmp	r0, #0
    1456:	d1f0      	bne.n	143a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1458:	b902      	cbnz	r2, 145c <EventResponder::runFromInterrupt()+0x34>
    145a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    145c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    145e:	6033      	str	r3, [r6, #0]
    1460:	e7ef      	b.n	1442 <EventResponder::runFromInterrupt()+0x1a>
    1462:	bf00      	nop
    1464:	20000c90 	.word	0x20000c90
    1468:	20000c8c 	.word	0x20000c8c

0000146c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    146c:	f7ff bfdc 	b.w	1428 <EventResponder::runFromInterrupt()>

00001470 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1470:	4904      	ldr	r1, [pc, #16]	; (1484 <systick_isr+0x14>)
	systick_millis_count++;
    1472:	4a05      	ldr	r2, [pc, #20]	; (1488 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    1474:	6849      	ldr	r1, [r1, #4]
    1476:	4b05      	ldr	r3, [pc, #20]	; (148c <systick_isr+0x1c>)
    1478:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    147a:	6813      	ldr	r3, [r2, #0]
    147c:	3301      	adds	r3, #1
    147e:	6013      	str	r3, [r2, #0]
}
    1480:	4770      	bx	lr
    1482:	bf00      	nop
    1484:	e0001000 	.word	0xe0001000
    1488:	20000d2c 	.word	0x20000d2c
    148c:	20000d28 	.word	0x20000d28

00001490 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1490:	49a2      	ldr	r1, [pc, #648]	; (171c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1492:	4ba3      	ldr	r3, [pc, #652]	; (1720 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    1494:	4288      	cmp	r0, r1
{
    1496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    149a:	4ca2      	ldr	r4, [pc, #648]	; (1724 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    149c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    149e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    14a0:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    14a4:	d91b      	bls.n	14de <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    14a6:	4ba0      	ldr	r3, [pc, #640]	; (1728 <set_arm_clock+0x298>)
    14a8:	4298      	cmp	r0, r3
    14aa:	f240 8102 	bls.w	16b2 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    14ae:	1ac3      	subs	r3, r0, r3
    14b0:	499e      	ldr	r1, [pc, #632]	; (172c <set_arm_clock+0x29c>)
    14b2:	0a1b      	lsrs	r3, r3, #8
    14b4:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    14b8:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    14bc:	09db      	lsrs	r3, r3, #7
    14be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    14c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    14c6:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    14ca:	428b      	cmp	r3, r1
    14cc:	bf28      	it	cs
    14ce:	460b      	movcs	r3, r1
    14d0:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    14d4:	4b96      	ldr	r3, [pc, #600]	; (1730 <set_arm_clock+0x2a0>)
    14d6:	fba3 3707 	umull	r3, r7, r3, r7
    14da:	08ff      	lsrs	r7, r7, #3
    14dc:	e004      	b.n	14e8 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    14de:	4f95      	ldr	r7, [pc, #596]	; (1734 <set_arm_clock+0x2a4>)
    14e0:	42b8      	cmp	r0, r7
    14e2:	bf8c      	ite	hi
    14e4:	270e      	movhi	r7, #14
    14e6:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    14e8:	498d      	ldr	r1, [pc, #564]	; (1720 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    14ea:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    14ee:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    14f2:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    14f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    14f8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    14fc:	d20c      	bcs.n	1518 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    14fe:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1502:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1506:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    150a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    150e:	680b      	ldr	r3, [r1, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	dafc      	bge.n	150e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1514:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1518:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    151c:	d124      	bne.n	1568 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    151e:	4986      	ldr	r1, [pc, #536]	; (1738 <set_arm_clock+0x2a8>)
    1520:	690c      	ldr	r4, [r1, #16]
    1522:	4986      	ldr	r1, [pc, #536]	; (173c <set_arm_clock+0x2ac>)
    1524:	43a1      	bics	r1, r4
    1526:	f000 80ea 	beq.w	16fe <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    152a:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    152e:	4634      	mov	r4, r6
    1530:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1534:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1538:	d004      	beq.n	1544 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    153a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    153e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    1540:	4b77      	ldr	r3, [pc, #476]	; (1720 <set_arm_clock+0x290>)
    1542:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1544:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    1548:	d007      	beq.n	155a <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    154a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    154e:	4974      	ldr	r1, [pc, #464]	; (1720 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1550:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    1552:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1554:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    1556:	071a      	lsls	r2, r3, #28
    1558:	d4fc      	bmi.n	1554 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    155a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    155e:	4a70      	ldr	r2, [pc, #448]	; (1720 <set_arm_clock+0x290>)
    1560:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1562:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1564:	069b      	lsls	r3, r3, #26
    1566:	d4fc      	bmi.n	1562 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    1568:	4c75      	ldr	r4, [pc, #468]	; (1740 <set_arm_clock+0x2b0>)
    156a:	42a0      	cmp	r0, r4
    156c:	f200 80ce 	bhi.w	170c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    1570:	f04f 0c01 	mov.w	ip, #1
    1574:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    1576:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    1578:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    157c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    1580:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1584:	42a2      	cmp	r2, r4
    1586:	d818      	bhi.n	15ba <set_arm_clock+0x12a>
		if (div_arm < 8) {
    1588:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    158c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    1590:	f040 808d 	bne.w	16ae <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    1594:	f1bc 0f04 	cmp.w	ip, #4
    1598:	f200 8091 	bhi.w	16be <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    159c:	180a      	adds	r2, r1, r0
    159e:	42a2      	cmp	r2, r4
    15a0:	f200 80a4 	bhi.w	16ec <set_arm_clock+0x25c>
    15a4:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    15a8:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    15aa:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    15ae:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    15b2:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    15b6:	42a2      	cmp	r2, r4
    15b8:	d9e6      	bls.n	1588 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    15ba:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    15be:	028c      	lsls	r4, r1, #10
    15c0:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    15c4:	485f      	ldr	r0, [pc, #380]	; (1744 <set_arm_clock+0x2b4>)
    15c6:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    15c8:	4a5f      	ldr	r2, [pc, #380]	; (1748 <set_arm_clock+0x2b8>)
    15ca:	4290      	cmp	r0, r2
    15cc:	d97f      	bls.n	16ce <set_arm_clock+0x23e>
    15ce:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 1774 <set_arm_clock+0x2e4>
    15d2:	226c      	movs	r2, #108	; 0x6c
    15d4:	485d      	ldr	r0, [pc, #372]	; (174c <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    15d6:	4d58      	ldr	r5, [pc, #352]	; (1738 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    15d8:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    15dc:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    15e0:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    15e4:	f8df c190 	ldr.w	ip, [pc, #400]	; 1778 <set_arm_clock+0x2e8>
    15e8:	ea0e 0c0c 	and.w	ip, lr, ip
    15ec:	45d4      	cmp	ip, sl
    15ee:	d009      	beq.n	1604 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    15f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    15f4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    15f8:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    15fc:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    15fe:	682a      	ldr	r2, [r5, #0]
    1600:	2a00      	cmp	r2, #0
    1602:	dafc      	bge.n	15fe <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1604:	4a46      	ldr	r2, [pc, #280]	; (1720 <set_arm_clock+0x290>)
    1606:	6915      	ldr	r5, [r2, #16]
    1608:	f005 0507 	and.w	r5, r5, #7
    160c:	429d      	cmp	r5, r3
    160e:	d003      	beq.n	1618 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1610:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1612:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1614:	03dd      	lsls	r5, r3, #15
    1616:	d4fc      	bmi.n	1612 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1618:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    161c:	d009      	beq.n	1632 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    161e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1622:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    1626:	4a3e      	ldr	r2, [pc, #248]	; (1720 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1628:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    162a:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    162c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    162e:	0799      	lsls	r1, r3, #30
    1630:	d4fc      	bmi.n	162c <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1632:	4947      	ldr	r1, [pc, #284]	; (1750 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    1634:	4a47      	ldr	r2, [pc, #284]	; (1754 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1636:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    1638:	4291      	cmp	r1, r2
    163a:	d83c      	bhi.n	16b6 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    163c:	4b46      	ldr	r3, [pc, #280]	; (1758 <set_arm_clock+0x2c8>)
    163e:	09c9      	lsrs	r1, r1, #7
    1640:	fba3 3101 	umull	r3, r1, r3, r1
    1644:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1646:	1e4b      	subs	r3, r1, #1
    1648:	021b      	lsls	r3, r3, #8
    164a:	ea86 0203 	eor.w	r2, r6, r3
    164e:	f412 7f40 	tst.w	r2, #768	; 0x300
    1652:	d006      	beq.n	1662 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1654:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1658:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    165c:	4a30      	ldr	r2, [pc, #192]	; (1720 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    165e:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    1660:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1662:	4a2f      	ldr	r2, [pc, #188]	; (1720 <set_arm_clock+0x290>)
    1664:	6953      	ldr	r3, [r2, #20]
    1666:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    166a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    166c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    166e:	069b      	lsls	r3, r3, #26
    1670:	d4fc      	bmi.n	166c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1672:	4b3a      	ldr	r3, [pc, #232]	; (175c <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1674:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1676:	fba3 2300 	umull	r2, r3, r3, r0
    167a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    167e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    1682:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1686:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    168a:	4a35      	ldr	r2, [pc, #212]	; (1760 <set_arm_clock+0x2d0>)
    168c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    168e:	4a35      	ldr	r2, [pc, #212]	; (1764 <set_arm_clock+0x2d4>)
    1690:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1692:	4a35      	ldr	r2, [pc, #212]	; (1768 <set_arm_clock+0x2d8>)
    1694:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1696:	d208      	bcs.n	16aa <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1698:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    169c:	4a21      	ldr	r2, [pc, #132]	; (1724 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    169e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    16a2:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    16a4:	6813      	ldr	r3, [r2, #0]
    16a6:	2b00      	cmp	r3, #0
    16a8:	dafc      	bge.n	16a4 <set_arm_clock+0x214>
	}

	return frequency;
}
    16aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16ae:	4673      	mov	r3, lr
    16b0:	e762      	b.n	1578 <set_arm_clock+0xe8>
    16b2:	2712      	movs	r7, #18
    16b4:	e718      	b.n	14e8 <set_arm_clock+0x58>
    16b6:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    16ba:	2104      	movs	r1, #4
    16bc:	e7c5      	b.n	164a <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    16be:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    16c2:	4820      	ldr	r0, [pc, #128]	; (1744 <set_arm_clock+0x2b4>)
    16c4:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    16c6:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    16c8:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    16ca:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    16ce:	4a27      	ldr	r2, [pc, #156]	; (176c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    16d0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 177c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    16d4:	fba2 2000 	umull	r2, r0, r2, r0
    16d8:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    16da:	4825      	ldr	r0, [pc, #148]	; (1770 <set_arm_clock+0x2e0>)
    16dc:	2a36      	cmp	r2, #54	; 0x36
    16de:	bf38      	it	cc
    16e0:	2236      	movcc	r2, #54	; 0x36
    16e2:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    16e6:	ea42 0a0a 	orr.w	sl, r2, sl
    16ea:	e774      	b.n	15d6 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    16ec:	ea4f 248c 	mov.w	r4, ip, lsl #10
    16f0:	2300      	movs	r3, #0
    16f2:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    16f6:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    16fa:	46ac      	mov	ip, r5
    16fc:	e762      	b.n	15c4 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    16fe:	461d      	mov	r5, r3
    1700:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    1704:	4611      	mov	r1, r2
    1706:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    170a:	e713      	b.n	1534 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    170c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    170e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1712:	4602      	mov	r2, r0
    1714:	4631      	mov	r1, r6
    1716:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    1718:	46e6      	mov	lr, ip
    171a:	e753      	b.n	15c4 <set_arm_clock+0x134>
    171c:	1f78a400 	.word	0x1f78a400
    1720:	400fc000 	.word	0x400fc000
    1724:	40080000 	.word	0x40080000
    1728:	23c34600 	.word	0x23c34600
    172c:	004cb223 	.word	0x004cb223
    1730:	51eb851f 	.word	0x51eb851f
    1734:	016e3600 	.word	0x016e3600
    1738:	400d8000 	.word	0x400d8000
    173c:	80003040 	.word	0x80003040
    1740:	269fb1ff 	.word	0x269fb1ff
    1744:	005b8d80 	.word	0x005b8d80
    1748:	4df67eff 	.word	0x4df67eff
    174c:	4d3f6400 	.word	0x4d3f6400
    1750:	08f0d17f 	.word	0x08f0d17f
    1754:	2cb4177f 	.word	0x2cb4177f
    1758:	00e5109f 	.word	0x00e5109f
    175c:	431bde83 	.word	0x431bde83
    1760:	200005a4 	.word	0x200005a4
    1764:	200005a0 	.word	0x200005a0
    1768:	20000d24 	.word	0x20000d24
    176c:	165e9f81 	.word	0x165e9f81
    1770:	00b71b00 	.word	0x00b71b00
    1774:	8000206c 	.word	0x8000206c
    1778:	8001307f 	.word	0x8001307f
    177c:	80002000 	.word	0x80002000

00001780 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1780:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1782:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1786:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    178a:	d16d      	bne.n	1868 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    178c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    178e:	d341      	bcc.n	1814 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1790:	f851 3b04 	ldr.w	r3, [r1], #4
    1794:	f840 3b04 	str.w	r3, [r0], #4
    1798:	f851 3b04 	ldr.w	r3, [r1], #4
    179c:	f840 3b04 	str.w	r3, [r0], #4
    17a0:	f851 3b04 	ldr.w	r3, [r1], #4
    17a4:	f840 3b04 	str.w	r3, [r0], #4
    17a8:	f851 3b04 	ldr.w	r3, [r1], #4
    17ac:	f840 3b04 	str.w	r3, [r0], #4
    17b0:	f851 3b04 	ldr.w	r3, [r1], #4
    17b4:	f840 3b04 	str.w	r3, [r0], #4
    17b8:	f851 3b04 	ldr.w	r3, [r1], #4
    17bc:	f840 3b04 	str.w	r3, [r0], #4
    17c0:	f851 3b04 	ldr.w	r3, [r1], #4
    17c4:	f840 3b04 	str.w	r3, [r0], #4
    17c8:	f851 3b04 	ldr.w	r3, [r1], #4
    17cc:	f840 3b04 	str.w	r3, [r0], #4
    17d0:	f851 3b04 	ldr.w	r3, [r1], #4
    17d4:	f840 3b04 	str.w	r3, [r0], #4
    17d8:	f851 3b04 	ldr.w	r3, [r1], #4
    17dc:	f840 3b04 	str.w	r3, [r0], #4
    17e0:	f851 3b04 	ldr.w	r3, [r1], #4
    17e4:	f840 3b04 	str.w	r3, [r0], #4
    17e8:	f851 3b04 	ldr.w	r3, [r1], #4
    17ec:	f840 3b04 	str.w	r3, [r0], #4
    17f0:	f851 3b04 	ldr.w	r3, [r1], #4
    17f4:	f840 3b04 	str.w	r3, [r0], #4
    17f8:	f851 3b04 	ldr.w	r3, [r1], #4
    17fc:	f840 3b04 	str.w	r3, [r0], #4
    1800:	f851 3b04 	ldr.w	r3, [r1], #4
    1804:	f840 3b04 	str.w	r3, [r0], #4
    1808:	f851 3b04 	ldr.w	r3, [r1], #4
    180c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1810:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1812:	d2bd      	bcs.n	1790 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1814:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1816:	d311      	bcc.n	183c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1818:	f851 3b04 	ldr.w	r3, [r1], #4
    181c:	f840 3b04 	str.w	r3, [r0], #4
    1820:	f851 3b04 	ldr.w	r3, [r1], #4
    1824:	f840 3b04 	str.w	r3, [r0], #4
    1828:	f851 3b04 	ldr.w	r3, [r1], #4
    182c:	f840 3b04 	str.w	r3, [r0], #4
    1830:	f851 3b04 	ldr.w	r3, [r1], #4
    1834:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1838:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    183a:	d2ed      	bcs.n	1818 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    183c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    183e:	d305      	bcc.n	184c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1840:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1844:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1848:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    184a:	d2f9      	bcs.n	1840 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    184c:	3204      	adds	r2, #4
	beq	.Ldone
    184e:	d008      	beq.n	1862 <memcpy+0xe2>

	lsls	r2, r2, #31
    1850:	07d2      	lsls	r2, r2, #31
	itt ne
    1852:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1854:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1858:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    185c:	d301      	bcc.n	1862 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    185e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1860:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1862:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1864:	4770      	bx	lr
    1866:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1868:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    186a:	d313      	bcc.n	1894 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    186c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    186e:	d08d      	beq.n	178c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1870:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1874:	d08a      	beq.n	178c <memcpy+0xc>

	rsb	r3, #4
    1876:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    187a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    187c:	07db      	lsls	r3, r3, #31
	itt ne
    187e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1880:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1884:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1888:	d380      	bcc.n	178c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    188a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    188e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1892:	e77b      	b.n	178c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1894:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    1896:	d3d9      	bcc.n	184c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1898:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    189a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    189e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    18a2:	d2f9      	bcs.n	1898 <memcpy+0x118>

	ldrb	r3, [r1]
    18a4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    18a6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    18a8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    18aa:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    18ac:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    18ae:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    18b0:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    18b2:	4770      	bx	lr

000018b4 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    18b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    18b8:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    18ba:	4666      	mov	r6, ip
	int i=0, j;
    18bc:	2400      	movs	r4, #0
    18be:	e000      	b.n	18c2 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    18c0:	3401      	adds	r4, #1
		digit = val % radix;
    18c2:	fbb0 f5f2 	udiv	r5, r0, r2
    18c6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18ca:	2b09      	cmp	r3, #9
    18cc:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    18d0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    18d4:	fa5f fe8e 	uxtb.w	lr, lr
    18d8:	bf98      	it	ls
    18da:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    18de:	4290      	cmp	r0, r2
		val /= radix;
    18e0:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    18e2:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    18e6:	d2eb      	bcs.n	18c0 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    18e8:	1c63      	adds	r3, r4, #1
    18ea:	2200      	movs	r2, #0
    18ec:	18c8      	adds	r0, r1, r3
    18ee:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    18f0:	b17c      	cbz	r4, 1912 <ultoa+0x5e>
		t = buf[j];
    18f2:	4662      	mov	r2, ip
    18f4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    18f8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    18fc:	eba1 030c 	sub.w	r3, r1, ip
    1900:	3202      	adds	r2, #2
		buf[j] = buf[i];
    1902:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    1906:	3b01      	subs	r3, #1
    1908:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    190a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    190c:	4423      	add	r3, r4
    190e:	429a      	cmp	r2, r3
    1910:	dbef      	blt.n	18f2 <ultoa+0x3e>
	}
	return buf;
}
    1912:	4608      	mov	r0, r1
    1914:	bd70      	pop	{r4, r5, r6, pc}
    1916:	bf00      	nop

00001918 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1918:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    191a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    191c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    1920:	4619      	mov	r1, r3
{
    1922:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1924:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1928:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    192c:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1930:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    1934:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    1938:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    193a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    193e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1942:	b29b      	uxth	r3, r3
    1944:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1948:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    194c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    1950:	3101      	adds	r1, #1
    1952:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    1956:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1958:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    195a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    195e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1960:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1962:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1964:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1966:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    196a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    196c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    196e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1970:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    1972:	d1eb      	bne.n	194c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1974:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1978:	b29b      	uxth	r3, r3
    197a:	f043 030f 	orr.w	r3, r3, #15
    197e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1982:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1986:	b29b      	uxth	r3, r3
    1988:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    198c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    1990:	bd10      	pop	{r4, pc}
    1992:	bf00      	nop

00001994 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1994:	4b37      	ldr	r3, [pc, #220]	; (1a74 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1996:	4a38      	ldr	r2, [pc, #224]	; (1a78 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1998:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    199a:	4838      	ldr	r0, [pc, #224]	; (1a7c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    199c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    19a0:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    19a2:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    19a4:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    19a8:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    19ac:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    19b0:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    19b4:	430a      	orrs	r2, r1
    19b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    19ba:	f7ff ffad 	bl	1918 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    19be:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    19c2:	f7ff ffa9 	bl	1918 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    19c6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    19ca:	f7ff ffa5 	bl	1918 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    19ce:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    19d2:	f7ff ffa1 	bl	1918 <flexpwm_init>
	for (i=0; i < 4; i++) {
    19d6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    19d8:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    19dc:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    19e0:	4611      	mov	r1, r2
    19e2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    19e6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    19ea:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    19ec:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    19ee:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    19f0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    19f2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    19f6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    19f8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    19fa:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    19fe:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1a00:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1a02:	d1ee      	bne.n	19e2 <pwm_init+0x4e>
    1a04:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1a06:	481e      	ldr	r0, [pc, #120]	; (1a80 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1a08:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1a0c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1a10:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1a12:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1a16:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1a1a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1a1e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1a22:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1a24:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1a26:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1a28:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1a2a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1a2e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1a30:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1a32:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1a36:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1a38:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1a3a:	d1ee      	bne.n	1a1a <pwm_init+0x86>
    1a3c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1a3e:	4811      	ldr	r0, [pc, #68]	; (1a84 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1a40:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1a42:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1a46:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1a48:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1a4c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1a50:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1a54:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1a58:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1a5a:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1a5c:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1a5e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1a60:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1a62:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1a64:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1a66:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1a6a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1a6c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    1a70:	d1ee      	bne.n	1a50 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1a72:	bd70      	pop	{r4, r5, r6, pc}
    1a74:	400fc000 	.word	0x400fc000
    1a78:	fc030000 	.word	0xfc030000
    1a7c:	403dc000 	.word	0x403dc000
    1a80:	401e0000 	.word	0x401e0000
    1a84:	401e4000 	.word	0x401e4000

00001a88 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    1a88:	4a07      	ldr	r2, [pc, #28]	; (1aa8 <rtc_get+0x20>)
    1a8a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    1a8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    1a8e:	4619      	mov	r1, r3
    1a90:	4684      	mov	ip, r0
    1a92:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    1a94:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    1a96:	4299      	cmp	r1, r3
    1a98:	d1f9      	bne.n	1a8e <rtc_get+0x6>
    1a9a:	4584      	cmp	ip, r0
    1a9c:	d1f7      	bne.n	1a8e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    1a9e:	0bdb      	lsrs	r3, r3, #15
}
    1aa0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    1aa4:	4770      	bx	lr
    1aa6:	bf00      	nop
    1aa8:	400d4000 	.word	0x400d4000

00001aac <memset>:
    1aac:	0783      	lsls	r3, r0, #30
    1aae:	b530      	push	{r4, r5, lr}
    1ab0:	d048      	beq.n	1b44 <memset+0x98>
    1ab2:	1e54      	subs	r4, r2, #1
    1ab4:	2a00      	cmp	r2, #0
    1ab6:	d03f      	beq.n	1b38 <memset+0x8c>
    1ab8:	b2ca      	uxtb	r2, r1
    1aba:	4603      	mov	r3, r0
    1abc:	e001      	b.n	1ac2 <memset+0x16>
    1abe:	3c01      	subs	r4, #1
    1ac0:	d33a      	bcc.n	1b38 <memset+0x8c>
    1ac2:	f803 2b01 	strb.w	r2, [r3], #1
    1ac6:	079d      	lsls	r5, r3, #30
    1ac8:	d1f9      	bne.n	1abe <memset+0x12>
    1aca:	2c03      	cmp	r4, #3
    1acc:	d92d      	bls.n	1b2a <memset+0x7e>
    1ace:	b2cd      	uxtb	r5, r1
    1ad0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    1ad4:	2c0f      	cmp	r4, #15
    1ad6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    1ada:	d936      	bls.n	1b4a <memset+0x9e>
    1adc:	f1a4 0210 	sub.w	r2, r4, #16
    1ae0:	f022 0c0f 	bic.w	ip, r2, #15
    1ae4:	f103 0e20 	add.w	lr, r3, #32
    1ae8:	44e6      	add	lr, ip
    1aea:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    1aee:	f103 0210 	add.w	r2, r3, #16
    1af2:	e942 5504 	strd	r5, r5, [r2, #-16]
    1af6:	e942 5502 	strd	r5, r5, [r2, #-8]
    1afa:	3210      	adds	r2, #16
    1afc:	4572      	cmp	r2, lr
    1afe:	d1f8      	bne.n	1af2 <memset+0x46>
    1b00:	f10c 0201 	add.w	r2, ip, #1
    1b04:	f014 0f0c 	tst.w	r4, #12
    1b08:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    1b0c:	f004 0c0f 	and.w	ip, r4, #15
    1b10:	d013      	beq.n	1b3a <memset+0x8e>
    1b12:	f1ac 0304 	sub.w	r3, ip, #4
    1b16:	f023 0303 	bic.w	r3, r3, #3
    1b1a:	3304      	adds	r3, #4
    1b1c:	4413      	add	r3, r2
    1b1e:	f842 5b04 	str.w	r5, [r2], #4
    1b22:	4293      	cmp	r3, r2
    1b24:	d1fb      	bne.n	1b1e <memset+0x72>
    1b26:	f00c 0403 	and.w	r4, ip, #3
    1b2a:	b12c      	cbz	r4, 1b38 <memset+0x8c>
    1b2c:	b2c9      	uxtb	r1, r1
    1b2e:	441c      	add	r4, r3
    1b30:	f803 1b01 	strb.w	r1, [r3], #1
    1b34:	429c      	cmp	r4, r3
    1b36:	d1fb      	bne.n	1b30 <memset+0x84>
    1b38:	bd30      	pop	{r4, r5, pc}
    1b3a:	4664      	mov	r4, ip
    1b3c:	4613      	mov	r3, r2
    1b3e:	2c00      	cmp	r4, #0
    1b40:	d1f4      	bne.n	1b2c <memset+0x80>
    1b42:	e7f9      	b.n	1b38 <memset+0x8c>
    1b44:	4603      	mov	r3, r0
    1b46:	4614      	mov	r4, r2
    1b48:	e7bf      	b.n	1aca <memset+0x1e>
    1b4a:	461a      	mov	r2, r3
    1b4c:	46a4      	mov	ip, r4
    1b4e:	e7e0      	b.n	1b12 <memset+0x66>

00001b50 <__libc_init_array>:
    1b50:	b570      	push	{r4, r5, r6, lr}
    1b52:	4e0d      	ldr	r6, [pc, #52]	; (1b88 <__libc_init_array+0x38>)
    1b54:	4d0d      	ldr	r5, [pc, #52]	; (1b8c <__libc_init_array+0x3c>)
    1b56:	1b76      	subs	r6, r6, r5
    1b58:	10b6      	asrs	r6, r6, #2
    1b5a:	d006      	beq.n	1b6a <__libc_init_array+0x1a>
    1b5c:	2400      	movs	r4, #0
    1b5e:	f855 3b04 	ldr.w	r3, [r5], #4
    1b62:	3401      	adds	r4, #1
    1b64:	4798      	blx	r3
    1b66:	42a6      	cmp	r6, r4
    1b68:	d1f9      	bne.n	1b5e <__libc_init_array+0xe>
    1b6a:	4e09      	ldr	r6, [pc, #36]	; (1b90 <__libc_init_array+0x40>)
    1b6c:	4d09      	ldr	r5, [pc, #36]	; (1b94 <__libc_init_array+0x44>)
    1b6e:	1b76      	subs	r6, r6, r5
    1b70:	f000 f816 	bl	1ba0 <___init_veneer>
    1b74:	10b6      	asrs	r6, r6, #2
    1b76:	d006      	beq.n	1b86 <__libc_init_array+0x36>
    1b78:	2400      	movs	r4, #0
    1b7a:	f855 3b04 	ldr.w	r3, [r5], #4
    1b7e:	3401      	adds	r4, #1
    1b80:	4798      	blx	r3
    1b82:	42a6      	cmp	r6, r4
    1b84:	d1f9      	bne.n	1b7a <__libc_init_array+0x2a>
    1b86:	bd70      	pop	{r4, r5, r6, pc}
    1b88:	60001af0 	.word	0x60001af0
    1b8c:	60001af0 	.word	0x60001af0
    1b90:	60001af4 	.word	0x60001af4
    1b94:	60001af0 	.word	0x60001af0

00001b98 <___reboot_Teensyduino__veneer>:
    1b98:	f85f f000 	ldr.w	pc, [pc]	; 1b9c <___reboot_Teensyduino__veneer+0x4>
    1b9c:	60001a59 	.word	0x60001a59

00001ba0 <___init_veneer>:
    1ba0:	f85f f000 	ldr.w	pc, [pc]	; 1ba4 <___init_veneer+0x4>
    1ba4:	60001aad 	.word	0x60001aad
	...

Disassembly of section .fini:

00001bb0 <_fini>:
    1bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bb2:	bf00      	nop
